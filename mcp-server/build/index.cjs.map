{"version":3,"sources":["/Users/philw/Projects/Umbraco/umbraco-mcp/umbraco-mcp/mcp-server/build/index.cjs","../node_modules/@modelcontextprotocol/sdk/src/server/stdio.ts","../node_modules/@modelcontextprotocol/sdk/src/types.ts","../node_modules/@modelcontextprotocol/sdk/src/shared/stdio.ts","../node_modules/@modelcontextprotocol/sdk/src/shared/protocol.ts","../node_modules/@modelcontextprotocol/sdk/src/server/index.ts","../node_modules/zod-to-json-schema/dist/esm/Options.js","../node_modules/zod-to-json-schema/dist/esm/Refs.js","../node_modules/zod-to-json-schema/dist/esm/errorMessages.js","../node_modules/zod-to-json-schema/dist/esm/selectParser.js","../node_modules/zod-to-json-schema/dist/esm/parsers/any.js","../node_modules/zod-to-json-schema/dist/esm/parsers/array.js","../node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js","../node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js","../node_modules/zod-to-json-schema/dist/esm/parsers/branded.js","../node_modules/zod-to-json-schema/dist/esm/parsers/catch.js","../node_modules/zod-to-json-schema/dist/esm/parsers/date.js","../node_modules/zod-to-json-schema/dist/esm/parsers/default.js","../node_modules/zod-to-json-schema/dist/esm/parsers/effects.js","../node_modules/zod-to-json-schema/dist/esm/parsers/enum.js","../node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js","../node_modules/zod-to-json-schema/dist/esm/parsers/literal.js","../node_modules/zod-to-json-schema/dist/esm/parsers/record.js","../node_modules/zod-to-json-schema/dist/esm/parsers/string.js","../node_modules/zod-to-json-schema/dist/esm/parsers/map.js","../node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js","../node_modules/zod-to-json-schema/dist/esm/parsers/never.js","../node_modules/zod-to-json-schema/dist/esm/parsers/null.js","../node_modules/zod-to-json-schema/dist/esm/parsers/union.js","../node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js","../node_modules/zod-to-json-schema/dist/esm/parsers/number.js","../node_modules/zod-to-json-schema/dist/esm/parsers/object.js","../node_modules/zod-to-json-schema/dist/esm/parsers/optional.js","../node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js","../node_modules/zod-to-json-schema/dist/esm/parsers/promise.js","../node_modules/zod-to-json-schema/dist/esm/parsers/set.js","../node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js","../node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js","../node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js","../node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js","../node_modules/zod-to-json-schema/dist/esm/parseDef.js","../node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js","../node_modules/@modelcontextprotocol/sdk/src/server/mcp.ts","../node_modules/@modelcontextprotocol/sdk/src/server/completable.ts","../node_modules/@modelcontextprotocol/sdk/src/shared/uriTemplate.ts","../src/server/umbraco-mcp-server.ts","../src/api/umbraco/clients/umbraco-management-client.ts","../src/api/umbraco/management/umbracoManagementAPI.ts","../src/clients/umbraco-management-client.ts","../src/helpers/create-umbraco-tool.ts","../src/api/umbraco/management/umbracoManagementAPI.zod.ts","../src/tools/culture/get-cultures.ts","../src/tools/culture/index.ts","../src/tools/data-type/post/create-data-type.ts","../src/tools/data-type/delete/delete-data-type.ts","../src/tools/data-type/get/find-data-type.ts","../src/tools/data-type/get/get-data-type.ts","../src/tools/data-type/put/update-data-type.ts","../src/tools/data-type/post/copy-data-type.ts","../src/tools/data-type/get/is-used-data-type.ts","../src/tools/data-type/put/move-data-type.ts","../src/tools/data-type/get/get-references-data-type.ts","../src/tools/data-type/folders/post/create-folder.ts","../src/tools/data-type/folders/delete/delete-folder.ts","../src/tools/data-type/folders/get/get-folder.ts","../src/tools/data-type/items/get/get-search.ts","../src/tools/data-type/folders/put/update-folder.ts","../src/tools/data-type/items/get/get-root.ts","../src/tools/data-type/items/get/get-children.ts","../src/tools/data-type/items/get/get-ancestors.ts","../src/tools/data-type/index.ts","../src/tools/dictionary/delete/delete-dictionary-item.ts","../src/tools/dictionary/get/find-dictionary-item.ts","../src/tools/dictionary/get/get-dictionary-item.ts","../src/tools/dictionary/post/create-dictionary-item.ts","../src/tools/dictionary/put/update-dictionary-item.ts","../src/tools/dictionary/put/move-dictionary-item.ts","../src/tools/dictionary/items/get/get-root.ts","../src/tools/dictionary/items/get/get-children.ts","../src/tools/dictionary/items/get/get-ancestors.ts","../src/tools/dictionary/index.ts","../src/tools/document-type/post/create-document-type.ts","../src/tools/document-type/delete/delete-document-type.ts","../src/tools/document-type/get/get-document-type-by-ids.ts","../src/tools/document-type/put/update-document-type.ts","../src/tools/document-type/post/copy-document-type.ts","../src/tools/document-type/put/move-document-type.ts","../src/tools/document-type/items/get/get-root.ts","../src/tools/document-type/items/get/get-children.ts","../src/tools/document-type/items/get/get-ancestors.ts","../src/tools/document-type/folders/post/create-folder.ts","../src/tools/document-type/folders/delete/delete-folder.ts","../src/tools/document-type/folders/get/get-folder.ts","../src/tools/document-type/folders/put/update-folder.ts","../src/tools/document-type/get/get-document-type-blueprint.ts","../src/tools/document-type/get/get-document-type-composition-references.ts","../src/tools/document-type/post/get-document-type-available-compositions.ts","../src/tools/document-type/get/get-document-type-allowed-children.ts","../src/tools/document-type/get/get-document-type-configuration.ts","../src/tools/document-type/get/get-document-type-by-id-array.ts","../src/tools/document-type/index.ts","../src/tools/document-blueprint/get/get-blueprint.ts","../src/tools/document-blueprint/delete/delete-blueprint.ts","../src/tools/document-blueprint/put/update-blueprint.ts","../src/tools/document-blueprint/post/create-blueprint.ts","../src/tools/document-blueprint/get/get-ancestors.ts","../src/tools/document-blueprint/get/get-children.ts","../src/tools/document-blueprint/get/get-root.ts","../src/tools/document-blueprint/index.ts","../src/tools/tool-factory.ts","../src/helpers/create-umbraco-template-resource.ts","../src/resources/data-types/get/get-ancestors.ts","../src/resources/data-types/get/get-children.ts","../src/resources/data-types/get/get-folder.ts","../src/resources/data-types/get/get-is-used.ts","../src/resources/data-types/get/get-query.ts","../src/resources/data-types/get/get-references.ts","../src/resources/data-types/get/get-root.ts","../src/resources/data-types/get/get-search.ts","../src/resources/data-types/index.ts","../src/helpers/create-umbraco-read-resource.ts","../src/resources/language/get/get-default.ts","../src/resources/language/index.ts","../src/resources/resource-factory.ts","../src/index.ts"],"names":["ErrorCode","_a","ZodFirstPartyTypeKind","types","base","main","name","value","postTemporaryFileBody","UmbracoManagementClient","get_root_default","get_children_default","get_ancestors_default","create_folder_default","delete_folder_default","get_folder_default","update_folder_default","get_search_default"],"mappings":"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CH,IAAA;AACL,IAAA;AACM,IAAA;AACD,MAAA;AACf,IAAA;AACA,EAAA;AACV;AACY;AAGkE;AAElE;AACqB,EAAA;AACK,EAAA;AACD,EAAA;AACA,EAAA;AACrC;AAEY;AACS,EAAA;AACU,EAAA;AACH,IAAA;AACH,IAAA;AACH,IAAA;AACG,MAAA;AACf,IAAA;AACU,IAAA;AACK,IAAA;AACG,IAAA;AACH,MAAA;AACL,MAAA;AACM,MAAA;AACD,QAAA;AACf,MAAA;AACA,IAAA;AACT,EAAA;AACD;AAG0E;AAE9D;AAC0B,EAAA;AACD,EAAA;AACA,EAAA;AACrC;AAEY;AACS,EAAA;AACU,EAAA;AACH,IAAA;AACH,IAAA;AACH,IAAA;AACG,MAAA;AACf,IAAA;AACU,IAAA;AACK,IAAA;AACG,IAAA;AACH,MAAA;AACL,MAAA;AACM,MAAA;AACD,QAAA;AACf,MAAA;AACA,IAAA;AACT,EAAA;AACD;AAG8C;AAClB,EAAA;AACD,EAAA;AACU,EAAA;AACV,EAAA;AACG,EAAA;AACE,EAAA;AACA,EAAA;AACN,EAAA;AACD,IAAA;AACf,EAAA;AACgB,EAAA;AACU,EAAA;AACX,IAAA;AACA,IAAA;AACA,MAAA;AACf,IAAA;AACe,IAAA;AACG,IAAA;AACD,IAAA;AACU,IAAA;AACb,IAAA;AACC,MAAA;AACzB,IAAA;AACgC,IAAA;AACA,IAAA;AACN,IAAA;AACA,MAAA;AACQ,MAAA;AACH,MAAA;AACD,MAAA;AAC9B,IAAA;AAC0B,IAAA;AACC,MAAA;AAC3B,IAAA;AACC,EAAA;AACmC,EAAA;AACX,IAAA;AACH,IAAA;AACG,MAAA;AACf,IAAA;AACoB,IAAA;AACH,IAAA;AACF,IAAA;AACxB,EAAA;AACkC,EAAA;AACb,EAAA;AACG,IAAA;AACf,EAAA;AACyB,EAAA;AACV,IAAA;AACxB,EAAA;AAC8B,EAAA;AACN,IAAA;AACf,EAAA;AACa,EAAA;AACQ,IAAA;AACM,IAAA;AACF,IAAA;AACnC,EAAA;AACuC,EAAA;AACX,IAAA;AACH,MAAA;AACzB,IAAA;AACyB,IAAA;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AA;AACf,EAAA;AACkB,EAAA;AACH,IAAA;AACzB,EAAA;AACwB,EAAA;AACC,IAAA;AACd,EAAA;AACX;AAG6C;AACP,EAAA;AACtC;AAE8C;AACrB,EAAA;AACC,EAAA;AACE,EAAA;AACN,EAAA;AACG,IAAA;AACf,EAAA;AACkB,EAAA;AACA,EAAA;AACH,IAAA;AACL,IAAA;AACM,IAAA;AACD,MAAA;AACf,IAAA;AACV,EAAA;AACkC,EAAA;AACd,IAAA;AACa,IAAA;AACC,IAAA;AACjC,EAAA;AACD;AACgD;AAGmB;AAEpB;AACf,EAAA;AACM,EAAA;AACD,EAAA;AACJ,EAAA;AACM,EAAA;AACvC;AAEgD;AACjB,EAAA;AACN,IAAA;AACC,IAAA;AACE,IAAA;AACN,IAAA;AACG,MAAA;AACf,IAAA;AACkB,IAAA;AACA,IAAA;AACH,MAAA;AACL,MAAA;AACM,MAAA;AACD,QAAA;AACf,MAAA;AACV,IAAA;AACkC,IAAA;AACd,MAAA;AACa,MAAA;AACC,MAAA;AACjC,IAAA;AACA,EAAA;AACoB,EAAA;AACrB;AAGY;AACa,EAAA;AACzB;AAGY;AACa,EAAA;AACzB;AAEY;AACa,EAAA;AACzB;AAGY;AACa,EAAA;AACzB;AAEY;AACU,EAAA;AACG,IAAA;AACf,EAAA;AACV;AAG2E;AAE/D;AACqB,EAAA;AACK,EAAA;AACD,EAAA;AACrC;AAEY;AACS,EAAA;AACU,EAAA;AACN,IAAA;AACY,IAAA;AACT,IAAA;AACN,IAAA;AACG,MAAA;AACf,IAAA;AACkB,IAAA;AACH,MAAA;AACL,MAAA;AACM,MAAA;AACD,QAAA;AACf,MAAA;AACV,IAAA;AACkC,IAAA;AACd,MAAA;AACa,MAAA;AACC,MAAA;AACjC,IAAA;AACA,EAAA;AACD;AAGuE;AAE3D;AAC0B,EAAA;AACD,EAAA;AACrC;AAEgD;AAC3B,EAAA;AACU,EAAA;AACN,IAAA;AACY,IAAA;AACT,IAAA;AACN,IAAA;AACG,MAAA;AACf,IAAA;AACkB,IAAA;AACH,MAAA;AACL,MAAA;AACM,MAAA;AACD,QAAA;AACf,MAAA;AACV,IAAA;AACkC,IAAA;AACd,MAAA;AACa,MAAA;AACC,MAAA;AACjC,IAAA;AACA,EAAA;AACD;AAGY;AACyB,EAAA;AACrC;AAEY;AACgB,EAAA;AACN,EAAA;AACG,IAAA;AACf,EAAA;AACe,EAAA;AACC,EAAA;AACD,EAAA;AACa,EAAA;AACV,EAAA;AACA,EAAA;AACH,IAAA;AACL,IAAA;AACM,IAAA;AACD,MAAA;AACf,IAAA;AACV,EAAA;AACkC,EAAA;AACd,IAAA;AACa,IAAA;AACC,IAAA;AACjC,EAAA;AACD;AAC+C;AAGsB;AAEzD;AACqB,EAAA;AACK,EAAA;AACD,EAAA;AACF,EAAA;AACnC;AAE8C;AACzB,EAAA;AACU,EAAA;AACH,IAAA;AACN,IAAA;AACG,MAAA;AACf,IAAA;AACe,IAAA;AACC,IAAA;AACD,IAAA;AACY,IAAA;AACT,IAAA;AACA,IAAA;AACH,MAAA;AACL,MAAA;AACM,MAAA;AACD,QAAA;AACf,MAAA;AACV,IAAA;AACkC,IAAA;AACd,MAAA;AACa,MAAA;AACC,MAAA;AACjC,IAAA;AACA,EAAA;AACD;AAGiE;AAEpB;AACP,EAAA;AACD,EAAA;AACF,EAAA;AACnC;AAE8C;AACzB,EAAA;AACU,EAAA;AACH,IAAA;AACN,IAAA;AACG,MAAA;AACf,IAAA;AACe,IAAA;AACC,IAAA;AACD,IAAA;AACY,IAAA;AACT,IAAA;AACA,IAAA;AACH,MAAA;AACL,MAAA;AACM,MAAA;AACD,QAAA;AACf,MAAA;AACV,IAAA;AACkC,IAAA;AACd,MAAA;AACa,MAAA;AACC,MAAA;AACjC,IAAA;AACA,EAAA;AACD;AAG2C;AACpB,EAAA;AACY,IAAA;AACb,IAAA;AACG,MAAA;AACzB,IAAA;AACiC,IAAA;AACA,IAAA;AACjC,EAAA;AACqB,EAAA;AACC,IAAA;AACD,MAAA;AACc,MAAA;AACnC,IAAA;AAC+B,IAAA;AACV,MAAA;AACa,MAAA;AACjC,IAAA;AACD,EAAA;AACA;AAE+C;AACR,EAAA;AACvC;AAG8C;AACA;AAGmB;AAEpB;AACP,EAAA;A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","file":"/Users/philw/Projects/Umbraco/umbraco-mcp/umbraco-mcp/mcp-server/build/index.cjs","sourcesContent":[null,null,null,null,null,null,"export const ignoreOverride = Symbol(\"Let zodToJsonSchema decide on which parser to use\");\nexport const jsonDescription = (jsonSchema, def) => {\n    if (def.description) {\n        try {\n            return {\n                ...jsonSchema,\n                ...JSON.parse(def.description),\n            };\n        }\n        catch { }\n    }\n    return jsonSchema;\n};\nexport const defaultOptions = {\n    name: undefined,\n    $refStrategy: \"root\",\n    basePath: [\"#\"],\n    effectStrategy: \"input\",\n    pipeStrategy: \"all\",\n    dateStrategy: \"format:date-time\",\n    mapStrategy: \"entries\",\n    removeAdditionalStrategy: \"passthrough\",\n    allowedAdditionalProperties: true,\n    rejectedAdditionalProperties: false,\n    definitionPath: \"definitions\",\n    target: \"jsonSchema7\",\n    strictUnions: false,\n    definitions: {},\n    errorMessages: false,\n    markdownDescription: false,\n    patternStrategy: \"escape\",\n    applyRegexFlags: false,\n    emailStrategy: \"format:email\",\n    base64Strategy: \"contentEncoding:base64\",\n    nameStrategy: \"ref\",\n};\nexport const getDefaultOptions = (options) => (typeof options === \"string\"\n    ? {\n        ...defaultOptions,\n        name: options,\n    }\n    : {\n        ...defaultOptions,\n        ...options,\n    });\n","import { getDefaultOptions } from \"./Options.js\";\nexport const getRefs = (options) => {\n    const _options = getDefaultOptions(options);\n    const currentPath = _options.name !== undefined\n        ? [..._options.basePath, _options.definitionPath, _options.name]\n        : _options.basePath;\n    return {\n        ..._options,\n        currentPath: currentPath,\n        propertyPath: undefined,\n        seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [\n            def._def,\n            {\n                def: def._def,\n                path: [..._options.basePath, _options.definitionPath, name],\n                // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n                jsonSchema: undefined,\n            },\n        ])),\n    };\n};\n","export function addErrorMessage(res, key, errorMessage, refs) {\n    if (!refs?.errorMessages)\n        return;\n    if (errorMessage) {\n        res.errorMessage = {\n            ...res.errorMessage,\n            [key]: errorMessage,\n        };\n    }\n}\nexport function setResponseValueAndErrors(res, key, value, errorMessage, refs) {\n    res[key] = value;\n    addErrorMessage(res, key, errorMessage, refs);\n}\n","import { ZodFirstPartyTypeKind } from \"zod\";\nimport { parseAnyDef } from \"./parsers/any.js\";\nimport { parseArrayDef } from \"./parsers/array.js\";\nimport { parseBigintDef } from \"./parsers/bigint.js\";\nimport { parseBooleanDef } from \"./parsers/boolean.js\";\nimport { parseBrandedDef } from \"./parsers/branded.js\";\nimport { parseCatchDef } from \"./parsers/catch.js\";\nimport { parseDateDef } from \"./parsers/date.js\";\nimport { parseDefaultDef } from \"./parsers/default.js\";\nimport { parseEffectsDef } from \"./parsers/effects.js\";\nimport { parseEnumDef } from \"./parsers/enum.js\";\nimport { parseIntersectionDef } from \"./parsers/intersection.js\";\nimport { parseLiteralDef } from \"./parsers/literal.js\";\nimport { parseMapDef } from \"./parsers/map.js\";\nimport { parseNativeEnumDef } from \"./parsers/nativeEnum.js\";\nimport { parseNeverDef } from \"./parsers/never.js\";\nimport { parseNullDef } from \"./parsers/null.js\";\nimport { parseNullableDef } from \"./parsers/nullable.js\";\nimport { parseNumberDef } from \"./parsers/number.js\";\nimport { parseObjectDef } from \"./parsers/object.js\";\nimport { parseOptionalDef } from \"./parsers/optional.js\";\nimport { parsePipelineDef } from \"./parsers/pipeline.js\";\nimport { parsePromiseDef } from \"./parsers/promise.js\";\nimport { parseRecordDef } from \"./parsers/record.js\";\nimport { parseSetDef } from \"./parsers/set.js\";\nimport { parseStringDef } from \"./parsers/string.js\";\nimport { parseTupleDef } from \"./parsers/tuple.js\";\nimport { parseUndefinedDef } from \"./parsers/undefined.js\";\nimport { parseUnionDef } from \"./parsers/union.js\";\nimport { parseUnknownDef } from \"./parsers/unknown.js\";\nimport { parseReadonlyDef } from \"./parsers/readonly.js\";\nexport const selectParser = (def, typeName, refs) => {\n    switch (typeName) {\n        case ZodFirstPartyTypeKind.ZodString:\n            return parseStringDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodNumber:\n            return parseNumberDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodObject:\n            return parseObjectDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodBigInt:\n            return parseBigintDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodBoolean:\n            return parseBooleanDef();\n        case ZodFirstPartyTypeKind.ZodDate:\n            return parseDateDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodUndefined:\n            return parseUndefinedDef();\n        case ZodFirstPartyTypeKind.ZodNull:\n            return parseNullDef(refs);\n        case ZodFirstPartyTypeKind.ZodArray:\n            return parseArrayDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodUnion:\n        case ZodFirstPartyTypeKind.ZodDiscriminatedUnion:\n            return parseUnionDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodIntersection:\n            return parseIntersectionDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodTuple:\n            return parseTupleDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodRecord:\n            return parseRecordDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodLiteral:\n            return parseLiteralDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodEnum:\n            return parseEnumDef(def);\n        case ZodFirstPartyTypeKind.ZodNativeEnum:\n            return parseNativeEnumDef(def);\n        case ZodFirstPartyTypeKind.ZodNullable:\n            return parseNullableDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodOptional:\n            return parseOptionalDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodMap:\n            return parseMapDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodSet:\n            return parseSetDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodLazy:\n            return () => def.getter()._def;\n        case ZodFirstPartyTypeKind.ZodPromise:\n            return parsePromiseDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodNaN:\n        case ZodFirstPartyTypeKind.ZodNever:\n            return parseNeverDef();\n        case ZodFirstPartyTypeKind.ZodEffects:\n            return parseEffectsDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodAny:\n            return parseAnyDef();\n        case ZodFirstPartyTypeKind.ZodUnknown:\n            return parseUnknownDef();\n        case ZodFirstPartyTypeKind.ZodDefault:\n            return parseDefaultDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodBranded:\n            return parseBrandedDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodReadonly:\n            return parseReadonlyDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodCatch:\n            return parseCatchDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodPipeline:\n            return parsePipelineDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodFunction:\n        case ZodFirstPartyTypeKind.ZodVoid:\n        case ZodFirstPartyTypeKind.ZodSymbol:\n            return undefined;\n        default:\n            /* c8 ignore next */\n            return ((_) => undefined)(typeName);\n    }\n};\n","export function parseAnyDef() {\n    return {};\n}\n","import { ZodFirstPartyTypeKind } from \"zod\";\nimport { setResponseValueAndErrors } from \"../errorMessages.js\";\nimport { parseDef } from \"../parseDef.js\";\nexport function parseArrayDef(def, refs) {\n    const res = {\n        type: \"array\",\n    };\n    if (def.type?._def &&\n        def.type?._def?.typeName !== ZodFirstPartyTypeKind.ZodAny) {\n        res.items = parseDef(def.type._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"items\"],\n        });\n    }\n    if (def.minLength) {\n        setResponseValueAndErrors(res, \"minItems\", def.minLength.value, def.minLength.message, refs);\n    }\n    if (def.maxLength) {\n        setResponseValueAndErrors(res, \"maxItems\", def.maxLength.value, def.maxLength.message, refs);\n    }\n    if (def.exactLength) {\n        setResponseValueAndErrors(res, \"minItems\", def.exactLength.value, def.exactLength.message, refs);\n        setResponseValueAndErrors(res, \"maxItems\", def.exactLength.value, def.exactLength.message, refs);\n    }\n    return res;\n}\n","import { setResponseValueAndErrors } from \"../errorMessages.js\";\nexport function parseBigintDef(def, refs) {\n    const res = {\n        type: \"integer\",\n        format: \"int64\",\n    };\n    if (!def.checks)\n        return res;\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"min\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n                    }\n                    else {\n                        setResponseValueAndErrors(res, \"exclusiveMinimum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMinimum = true;\n                    }\n                    setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n                }\n                break;\n            case \"max\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n                    }\n                    else {\n                        setResponseValueAndErrors(res, \"exclusiveMaximum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMaximum = true;\n                    }\n                    setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n                }\n                break;\n            case \"multipleOf\":\n                setResponseValueAndErrors(res, \"multipleOf\", check.value, check.message, refs);\n                break;\n        }\n    }\n    return res;\n}\n","export function parseBooleanDef() {\n    return {\n        type: \"boolean\",\n    };\n}\n","import { parseDef } from \"../parseDef.js\";\nexport function parseBrandedDef(_def, refs) {\n    return parseDef(_def.type._def, refs);\n}\n","import { parseDef } from \"../parseDef.js\";\nexport const parseCatchDef = (def, refs) => {\n    return parseDef(def.innerType._def, refs);\n};\n","import { setResponseValueAndErrors } from \"../errorMessages.js\";\nexport function parseDateDef(def, refs, overrideDateStrategy) {\n    const strategy = overrideDateStrategy ?? refs.dateStrategy;\n    if (Array.isArray(strategy)) {\n        return {\n            anyOf: strategy.map((item, i) => parseDateDef(def, refs, item)),\n        };\n    }\n    switch (strategy) {\n        case \"string\":\n        case \"format:date-time\":\n            return {\n                type: \"string\",\n                format: \"date-time\",\n            };\n        case \"format:date\":\n            return {\n                type: \"string\",\n                format: \"date\",\n            };\n        case \"integer\":\n            return integerDateParser(def, refs);\n    }\n}\nconst integerDateParser = (def, refs) => {\n    const res = {\n        type: \"integer\",\n        format: \"unix-time\",\n    };\n    if (refs.target === \"openApi3\") {\n        return res;\n    }\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"min\":\n                setResponseValueAndErrors(res, \"minimum\", check.value, // This is in milliseconds\n                check.message, refs);\n                break;\n            case \"max\":\n                setResponseValueAndErrors(res, \"maximum\", check.value, // This is in milliseconds\n                check.message, refs);\n                break;\n        }\n    }\n    return res;\n};\n","import { parseDef } from \"../parseDef.js\";\nexport function parseDefaultDef(_def, refs) {\n    return {\n        ...parseDef(_def.innerType._def, refs),\n        default: _def.defaultValue(),\n    };\n}\n","import { parseDef } from \"../parseDef.js\";\nexport function parseEffectsDef(_def, refs) {\n    return refs.effectStrategy === \"input\"\n        ? parseDef(_def.schema._def, refs)\n        : {};\n}\n","export function parseEnumDef(def) {\n    return {\n        type: \"string\",\n        enum: Array.from(def.values),\n    };\n}\n","import { parseDef } from \"../parseDef.js\";\nconst isJsonSchema7AllOfType = (type) => {\n    if (\"type\" in type && type.type === \"string\")\n        return false;\n    return \"allOf\" in type;\n};\nexport function parseIntersectionDef(def, refs) {\n    const allOf = [\n        parseDef(def.left._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"allOf\", \"0\"],\n        }),\n        parseDef(def.right._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"allOf\", \"1\"],\n        }),\n    ].filter((x) => !!x);\n    let unevaluatedProperties = refs.target === \"jsonSchema2019-09\"\n        ? { unevaluatedProperties: false }\n        : undefined;\n    const mergedAllOf = [];\n    // If either of the schemas is an allOf, merge them into a single allOf\n    allOf.forEach((schema) => {\n        if (isJsonSchema7AllOfType(schema)) {\n            mergedAllOf.push(...schema.allOf);\n            if (schema.unevaluatedProperties === undefined) {\n                // If one of the schemas has no unevaluatedProperties set,\n                // the merged schema should also have no unevaluatedProperties set\n                unevaluatedProperties = undefined;\n            }\n        }\n        else {\n            let nestedSchema = schema;\n            if (\"additionalProperties\" in schema &&\n                schema.additionalProperties === false) {\n                const { additionalProperties, ...rest } = schema;\n                nestedSchema = rest;\n            }\n            else {\n                // As soon as one of the schemas has additionalProperties set not to false, we allow unevaluatedProperties\n                unevaluatedProperties = undefined;\n            }\n            mergedAllOf.push(nestedSchema);\n        }\n    });\n    return mergedAllOf.length\n        ? {\n            allOf: mergedAllOf,\n            ...unevaluatedProperties,\n        }\n        : undefined;\n}\n","export function parseLiteralDef(def, refs) {\n    const parsedType = typeof def.value;\n    if (parsedType !== \"bigint\" &&\n        parsedType !== \"number\" &&\n        parsedType !== \"boolean\" &&\n        parsedType !== \"string\") {\n        return {\n            type: Array.isArray(def.value) ? \"array\" : \"object\",\n        };\n    }\n    if (refs.target === \"openApi3\") {\n        return {\n            type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n            enum: [def.value],\n        };\n    }\n    return {\n        type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n        const: def.value,\n    };\n}\n","import { ZodFirstPartyTypeKind, } from \"zod\";\nimport { parseDef } from \"../parseDef.js\";\nimport { parseStringDef } from \"./string.js\";\nimport { parseBrandedDef } from \"./branded.js\";\nexport function parseRecordDef(def, refs) {\n    if (refs.target === \"openAi\") {\n        console.warn(\"Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead.\");\n    }\n    if (refs.target === \"openApi3\" &&\n        def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n        return {\n            type: \"object\",\n            required: def.keyType._def.values,\n            properties: def.keyType._def.values.reduce((acc, key) => ({\n                ...acc,\n                [key]: parseDef(def.valueType._def, {\n                    ...refs,\n                    currentPath: [...refs.currentPath, \"properties\", key],\n                }) ?? {},\n            }), {}),\n            additionalProperties: refs.rejectedAdditionalProperties,\n        };\n    }\n    const schema = {\n        type: \"object\",\n        additionalProperties: parseDef(def.valueType._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"additionalProperties\"],\n        }) ?? refs.allowedAdditionalProperties,\n    };\n    if (refs.target === \"openApi3\") {\n        return schema;\n    }\n    if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString &&\n        def.keyType._def.checks?.length) {\n        const { type, ...keyType } = parseStringDef(def.keyType._def, refs);\n        return {\n            ...schema,\n            propertyNames: keyType,\n        };\n    }\n    else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n        return {\n            ...schema,\n            propertyNames: {\n                enum: def.keyType._def.values,\n            },\n        };\n    }\n    else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodBranded &&\n        def.keyType._def.type._def.typeName === ZodFirstPartyTypeKind.ZodString &&\n        def.keyType._def.type._def.checks?.length) {\n        const { type, ...keyType } = parseBrandedDef(def.keyType._def, refs);\n        return {\n            ...schema,\n            propertyNames: keyType,\n        };\n    }\n    return schema;\n}\n","import { setResponseValueAndErrors } from \"../errorMessages.js\";\nlet emojiRegex = undefined;\n/**\n * Generated from the regular expressions found here as of 2024-05-22:\n * https://github.com/colinhacks/zod/blob/master/src/types.ts.\n *\n * Expressions with /i flag have been changed accordingly.\n */\nexport const zodPatterns = {\n    /**\n     * `c` was changed to `[cC]` to replicate /i flag\n     */\n    cuid: /^[cC][^\\s-]{8,}$/,\n    cuid2: /^[0-9a-z]+$/,\n    ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,\n    /**\n     * `a-z` was added to replicate /i flag\n     */\n    email: /^(?!\\.)(?!.*\\.\\.)([a-zA-Z0-9_'+\\-\\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\\-]*\\.)+[a-zA-Z]{2,}$/,\n    /**\n     * Constructed a valid Unicode RegExp\n     *\n     * Lazily instantiate since this type of regex isn't supported\n     * in all envs (e.g. React Native).\n     *\n     * See:\n     * https://github.com/colinhacks/zod/issues/2433\n     * Fix in Zod:\n     * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b\n     */\n    emoji: () => {\n        if (emojiRegex === undefined) {\n            emojiRegex = RegExp(\"^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$\", \"u\");\n        }\n        return emojiRegex;\n    },\n    /**\n     * Unused\n     */\n    uuid: /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/,\n    /**\n     * Unused\n     */\n    ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,\n    ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/,\n    /**\n     * Unused\n     */\n    ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,\n    ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\n    base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,\n    base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,\n    nanoid: /^[a-zA-Z0-9_-]{21}$/,\n    jwt: /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/,\n};\nexport function parseStringDef(def, refs) {\n    const res = {\n        type: \"string\",\n    };\n    if (def.checks) {\n        for (const check of def.checks) {\n            switch (check.kind) {\n                case \"min\":\n                    setResponseValueAndErrors(res, \"minLength\", typeof res.minLength === \"number\"\n                        ? Math.max(res.minLength, check.value)\n                        : check.value, check.message, refs);\n                    break;\n                case \"max\":\n                    setResponseValueAndErrors(res, \"maxLength\", typeof res.maxLength === \"number\"\n                        ? Math.min(res.maxLength, check.value)\n                        : check.value, check.message, refs);\n                    break;\n                case \"email\":\n                    switch (refs.emailStrategy) {\n                        case \"format:email\":\n                            addFormat(res, \"email\", check.message, refs);\n                            break;\n                        case \"format:idn-email\":\n                            addFormat(res, \"idn-email\", check.message, refs);\n                            break;\n                        case \"pattern:zod\":\n                            addPattern(res, zodPatterns.email, check.message, refs);\n                            break;\n                    }\n                    break;\n                case \"url\":\n                    addFormat(res, \"uri\", check.message, refs);\n                    break;\n                case \"uuid\":\n                    addFormat(res, \"uuid\", check.message, refs);\n                    break;\n                case \"regex\":\n                    addPattern(res, check.regex, check.message, refs);\n                    break;\n                case \"cuid\":\n                    addPattern(res, zodPatterns.cuid, check.message, refs);\n                    break;\n                case \"cuid2\":\n                    addPattern(res, zodPatterns.cuid2, check.message, refs);\n                    break;\n                case \"startsWith\":\n                    addPattern(res, RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`), check.message, refs);\n                    break;\n                case \"endsWith\":\n                    addPattern(res, RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`), check.message, refs);\n                    break;\n                case \"datetime\":\n                    addFormat(res, \"date-time\", check.message, refs);\n                    break;\n                case \"date\":\n                    addFormat(res, \"date\", check.message, refs);\n                    break;\n                case \"time\":\n                    addFormat(res, \"time\", check.message, refs);\n                    break;\n                case \"duration\":\n                    addFormat(res, \"duration\", check.message, refs);\n                    break;\n                case \"length\":\n                    setResponseValueAndErrors(res, \"minLength\", typeof res.minLength === \"number\"\n                        ? Math.max(res.minLength, check.value)\n                        : check.value, check.message, refs);\n                    setResponseValueAndErrors(res, \"maxLength\", typeof res.maxLength === \"number\"\n                        ? Math.min(res.maxLength, check.value)\n                        : check.value, check.message, refs);\n                    break;\n                case \"includes\": {\n                    addPattern(res, RegExp(escapeLiteralCheckValue(check.value, refs)), check.message, refs);\n                    break;\n                }\n                case \"ip\": {\n                    if (check.version !== \"v6\") {\n                        addFormat(res, \"ipv4\", check.message, refs);\n                    }\n                    if (check.version !== \"v4\") {\n                        addFormat(res, \"ipv6\", check.message, refs);\n                    }\n                    break;\n                }\n                case \"base64url\":\n                    addPattern(res, zodPatterns.base64url, check.message, refs);\n                    break;\n                case \"jwt\":\n                    addPattern(res, zodPatterns.jwt, check.message, refs);\n                    break;\n                case \"cidr\": {\n                    if (check.version !== \"v6\") {\n                        addPattern(res, zodPatterns.ipv4Cidr, check.message, refs);\n                    }\n                    if (check.version !== \"v4\") {\n                        addPattern(res, zodPatterns.ipv6Cidr, check.message, refs);\n                    }\n                    break;\n                }\n                case \"emoji\":\n                    addPattern(res, zodPatterns.emoji(), check.message, refs);\n                    break;\n                case \"ulid\": {\n                    addPattern(res, zodPatterns.ulid, check.message, refs);\n                    break;\n                }\n                case \"base64\": {\n                    switch (refs.base64Strategy) {\n                        case \"format:binary\": {\n                            addFormat(res, \"binary\", check.message, refs);\n                            break;\n                        }\n                        case \"contentEncoding:base64\": {\n                            setResponseValueAndErrors(res, \"contentEncoding\", \"base64\", check.message, refs);\n                            break;\n                        }\n                        case \"pattern:zod\": {\n                            addPattern(res, zodPatterns.base64, check.message, refs);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"nanoid\": {\n                    addPattern(res, zodPatterns.nanoid, check.message, refs);\n                }\n                case \"toLowerCase\":\n                case \"toUpperCase\":\n                case \"trim\":\n                    break;\n                default:\n                    /* c8 ignore next */\n                    ((_) => { })(check);\n            }\n        }\n    }\n    return res;\n}\nfunction escapeLiteralCheckValue(literal, refs) {\n    return refs.patternStrategy === \"escape\"\n        ? escapeNonAlphaNumeric(literal)\n        : literal;\n}\nconst ALPHA_NUMERIC = new Set(\"ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789\");\nfunction escapeNonAlphaNumeric(source) {\n    let result = \"\";\n    for (let i = 0; i < source.length; i++) {\n        if (!ALPHA_NUMERIC.has(source[i])) {\n            result += \"\\\\\";\n        }\n        result += source[i];\n    }\n    return result;\n}\n// Adds a \"format\" keyword to the schema. If a format exists, both formats will be joined in an allOf-node, along with subsequent ones.\nfunction addFormat(schema, value, message, refs) {\n    if (schema.format || schema.anyOf?.some((x) => x.format)) {\n        if (!schema.anyOf) {\n            schema.anyOf = [];\n        }\n        if (schema.format) {\n            schema.anyOf.push({\n                format: schema.format,\n                ...(schema.errorMessage &&\n                    refs.errorMessages && {\n                    errorMessage: { format: schema.errorMessage.format },\n                }),\n            });\n            delete schema.format;\n            if (schema.errorMessage) {\n                delete schema.errorMessage.format;\n                if (Object.keys(schema.errorMessage).length === 0) {\n                    delete schema.errorMessage;\n                }\n            }\n        }\n        schema.anyOf.push({\n            format: value,\n            ...(message &&\n                refs.errorMessages && { errorMessage: { format: message } }),\n        });\n    }\n    else {\n        setResponseValueAndErrors(schema, \"format\", value, message, refs);\n    }\n}\n// Adds a \"pattern\" keyword to the schema. If a pattern exists, both patterns will be joined in an allOf-node, along with subsequent ones.\nfunction addPattern(schema, regex, message, refs) {\n    if (schema.pattern || schema.allOf?.some((x) => x.pattern)) {\n        if (!schema.allOf) {\n            schema.allOf = [];\n        }\n        if (schema.pattern) {\n            schema.allOf.push({\n                pattern: schema.pattern,\n                ...(schema.errorMessage &&\n                    refs.errorMessages && {\n                    errorMessage: { pattern: schema.errorMessage.pattern },\n                }),\n            });\n            delete schema.pattern;\n            if (schema.errorMessage) {\n                delete schema.errorMessage.pattern;\n                if (Object.keys(schema.errorMessage).length === 0) {\n                    delete schema.errorMessage;\n                }\n            }\n        }\n        schema.allOf.push({\n            pattern: stringifyRegExpWithFlags(regex, refs),\n            ...(message &&\n                refs.errorMessages && { errorMessage: { pattern: message } }),\n        });\n    }\n    else {\n        setResponseValueAndErrors(schema, \"pattern\", stringifyRegExpWithFlags(regex, refs), message, refs);\n    }\n}\n// Mutate z.string.regex() in a best attempt to accommodate for regex flags when applyRegexFlags is true\nfunction stringifyRegExpWithFlags(regex, refs) {\n    if (!refs.applyRegexFlags || !regex.flags) {\n        return regex.source;\n    }\n    // Currently handled flags\n    const flags = {\n        i: regex.flags.includes(\"i\"),\n        m: regex.flags.includes(\"m\"),\n        s: regex.flags.includes(\"s\"), // `.` matches newlines\n    };\n    // The general principle here is to step through each character, one at a time, applying mutations as flags require. We keep track when the current character is escaped, and when it's inside a group /like [this]/ or (also) a range like /[a-z]/. The following is fairly brittle imperative code; edit at your peril!\n    const source = flags.i ? regex.source.toLowerCase() : regex.source;\n    let pattern = \"\";\n    let isEscaped = false;\n    let inCharGroup = false;\n    let inCharRange = false;\n    for (let i = 0; i < source.length; i++) {\n        if (isEscaped) {\n            pattern += source[i];\n            isEscaped = false;\n            continue;\n        }\n        if (flags.i) {\n            if (inCharGroup) {\n                if (source[i].match(/[a-z]/)) {\n                    if (inCharRange) {\n                        pattern += source[i];\n                        pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();\n                        inCharRange = false;\n                    }\n                    else if (source[i + 1] === \"-\" && source[i + 2]?.match(/[a-z]/)) {\n                        pattern += source[i];\n                        inCharRange = true;\n                    }\n                    else {\n                        pattern += `${source[i]}${source[i].toUpperCase()}`;\n                    }\n                    continue;\n                }\n            }\n            else if (source[i].match(/[a-z]/)) {\n                pattern += `[${source[i]}${source[i].toUpperCase()}]`;\n                continue;\n            }\n        }\n        if (flags.m) {\n            if (source[i] === \"^\") {\n                pattern += `(^|(?<=[\\r\\n]))`;\n                continue;\n            }\n            else if (source[i] === \"$\") {\n                pattern += `($|(?=[\\r\\n]))`;\n                continue;\n            }\n        }\n        if (flags.s && source[i] === \".\") {\n            pattern += inCharGroup ? `${source[i]}\\r\\n` : `[${source[i]}\\r\\n]`;\n            continue;\n        }\n        pattern += source[i];\n        if (source[i] === \"\\\\\") {\n            isEscaped = true;\n        }\n        else if (inCharGroup && source[i] === \"]\") {\n            inCharGroup = false;\n        }\n        else if (!inCharGroup && source[i] === \"[\") {\n            inCharGroup = true;\n        }\n    }\n    try {\n        new RegExp(pattern);\n    }\n    catch {\n        console.warn(`Could not convert regex pattern at ${refs.currentPath.join(\"/\")} to a flag-independent form! Falling back to the flag-ignorant source`);\n        return regex.source;\n    }\n    return pattern;\n}\n","import { parseDef } from \"../parseDef.js\";\nimport { parseRecordDef } from \"./record.js\";\nexport function parseMapDef(def, refs) {\n    if (refs.mapStrategy === \"record\") {\n        return parseRecordDef(def, refs);\n    }\n    const keys = parseDef(def.keyType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\", \"items\", \"0\"],\n    }) || {};\n    const values = parseDef(def.valueType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\", \"items\", \"1\"],\n    }) || {};\n    return {\n        type: \"array\",\n        maxItems: 125,\n        items: {\n            type: \"array\",\n            items: [keys, values],\n            minItems: 2,\n            maxItems: 2,\n        },\n    };\n}\n","export function parseNativeEnumDef(def) {\n    const object = def.values;\n    const actualKeys = Object.keys(def.values).filter((key) => {\n        return typeof object[object[key]] !== \"number\";\n    });\n    const actualValues = actualKeys.map((key) => object[key]);\n    const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));\n    return {\n        type: parsedTypes.length === 1\n            ? parsedTypes[0] === \"string\"\n                ? \"string\"\n                : \"number\"\n            : [\"string\", \"number\"],\n        enum: actualValues,\n    };\n}\n","export function parseNeverDef() {\n    return {\n        not: {},\n    };\n}\n","export function parseNullDef(refs) {\n    return refs.target === \"openApi3\"\n        ? {\n            enum: [\"null\"],\n            nullable: true,\n        }\n        : {\n            type: \"null\",\n        };\n}\n","import { parseDef } from \"../parseDef.js\";\nexport const primitiveMappings = {\n    ZodString: \"string\",\n    ZodNumber: \"number\",\n    ZodBigInt: \"integer\",\n    ZodBoolean: \"boolean\",\n    ZodNull: \"null\",\n};\nexport function parseUnionDef(def, refs) {\n    if (refs.target === \"openApi3\")\n        return asAnyOf(def, refs);\n    const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;\n    // This blocks tries to look ahead a bit to produce nicer looking schemas with type array instead of anyOf.\n    if (options.every((x) => x._def.typeName in primitiveMappings &&\n        (!x._def.checks || !x._def.checks.length))) {\n        // all types in union are primitive and lack checks, so might as well squash into {type: [...]}\n        const types = options.reduce((types, x) => {\n            const type = primitiveMappings[x._def.typeName]; //Can be safely casted due to row 43\n            return type && !types.includes(type) ? [...types, type] : types;\n        }, []);\n        return {\n            type: types.length > 1 ? types : types[0],\n        };\n    }\n    else if (options.every((x) => x._def.typeName === \"ZodLiteral\" && !x.description)) {\n        // all options literals\n        const types = options.reduce((acc, x) => {\n            const type = typeof x._def.value;\n            switch (type) {\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                    return [...acc, type];\n                case \"bigint\":\n                    return [...acc, \"integer\"];\n                case \"object\":\n                    if (x._def.value === null)\n                        return [...acc, \"null\"];\n                case \"symbol\":\n                case \"undefined\":\n                case \"function\":\n                default:\n                    return acc;\n            }\n        }, []);\n        if (types.length === options.length) {\n            // all the literals are primitive, as far as null can be considered primitive\n            const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);\n            return {\n                type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],\n                enum: options.reduce((acc, x) => {\n                    return acc.includes(x._def.value) ? acc : [...acc, x._def.value];\n                }, []),\n            };\n        }\n    }\n    else if (options.every((x) => x._def.typeName === \"ZodEnum\")) {\n        return {\n            type: \"string\",\n            enum: options.reduce((acc, x) => [\n                ...acc,\n                ...x._def.values.filter((x) => !acc.includes(x)),\n            ], []),\n        };\n    }\n    return asAnyOf(def, refs);\n}\nconst asAnyOf = (def, refs) => {\n    const anyOf = (def.options instanceof Map\n        ? Array.from(def.options.values())\n        : def.options)\n        .map((x, i) => parseDef(x._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"anyOf\", `${i}`],\n    }))\n        .filter((x) => !!x &&\n        (!refs.strictUnions ||\n            (typeof x === \"object\" && Object.keys(x).length > 0)));\n    return anyOf.length ? { anyOf } : undefined;\n};\n","import { parseDef } from \"../parseDef.js\";\nimport { primitiveMappings } from \"./union.js\";\nexport function parseNullableDef(def, refs) {\n    if ([\"ZodString\", \"ZodNumber\", \"ZodBigInt\", \"ZodBoolean\", \"ZodNull\"].includes(def.innerType._def.typeName) &&\n        (!def.innerType._def.checks || !def.innerType._def.checks.length)) {\n        if (refs.target === \"openApi3\") {\n            return {\n                type: primitiveMappings[def.innerType._def.typeName],\n                nullable: true,\n            };\n        }\n        return {\n            type: [\n                primitiveMappings[def.innerType._def.typeName],\n                \"null\",\n            ],\n        };\n    }\n    if (refs.target === \"openApi3\") {\n        const base = parseDef(def.innerType._def, {\n            ...refs,\n            currentPath: [...refs.currentPath],\n        });\n        if (base && \"$ref\" in base)\n            return { allOf: [base], nullable: true };\n        return base && { ...base, nullable: true };\n    }\n    const base = parseDef(def.innerType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"anyOf\", \"0\"],\n    });\n    return base && { anyOf: [base, { type: \"null\" }] };\n}\n","import { addErrorMessage, setResponseValueAndErrors, } from \"../errorMessages.js\";\nexport function parseNumberDef(def, refs) {\n    const res = {\n        type: \"number\",\n    };\n    if (!def.checks)\n        return res;\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"int\":\n                res.type = \"integer\";\n                addErrorMessage(res, \"type\", check.message, refs);\n                break;\n            case \"min\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n                    }\n                    else {\n                        setResponseValueAndErrors(res, \"exclusiveMinimum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMinimum = true;\n                    }\n                    setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n                }\n                break;\n            case \"max\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n                    }\n                    else {\n                        setResponseValueAndErrors(res, \"exclusiveMaximum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMaximum = true;\n                    }\n                    setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n                }\n                break;\n            case \"multipleOf\":\n                setResponseValueAndErrors(res, \"multipleOf\", check.value, check.message, refs);\n                break;\n        }\n    }\n    return res;\n}\n","import { ZodOptional } from \"zod\";\nimport { parseDef } from \"../parseDef.js\";\nexport function parseObjectDef(def, refs) {\n    const forceOptionalIntoNullable = refs.target === \"openAi\";\n    const result = {\n        type: \"object\",\n        properties: {},\n    };\n    const required = [];\n    const shape = def.shape();\n    for (const propName in shape) {\n        let propDef = shape[propName];\n        if (propDef === undefined || propDef._def === undefined) {\n            continue;\n        }\n        let propOptional = safeIsOptional(propDef);\n        if (propOptional && forceOptionalIntoNullable) {\n            if (propDef instanceof ZodOptional) {\n                propDef = propDef._def.innerType;\n            }\n            if (!propDef.isNullable()) {\n                propDef = propDef.nullable();\n            }\n            propOptional = false;\n        }\n        const parsedDef = parseDef(propDef._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"properties\", propName],\n            propertyPath: [...refs.currentPath, \"properties\", propName],\n        });\n        if (parsedDef === undefined) {\n            continue;\n        }\n        result.properties[propName] = parsedDef;\n        if (!propOptional) {\n            required.push(propName);\n        }\n    }\n    if (required.length) {\n        result.required = required;\n    }\n    const additionalProperties = decideAdditionalProperties(def, refs);\n    if (additionalProperties !== undefined) {\n        result.additionalProperties = additionalProperties;\n    }\n    return result;\n}\nfunction decideAdditionalProperties(def, refs) {\n    if (def.catchall._def.typeName !== \"ZodNever\") {\n        return parseDef(def.catchall._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"additionalProperties\"],\n        });\n    }\n    switch (def.unknownKeys) {\n        case \"passthrough\":\n            return refs.allowedAdditionalProperties;\n        case \"strict\":\n            return refs.rejectedAdditionalProperties;\n        case \"strip\":\n            return refs.removeAdditionalStrategy === \"strict\"\n                ? refs.allowedAdditionalProperties\n                : refs.rejectedAdditionalProperties;\n    }\n}\nfunction safeIsOptional(schema) {\n    try {\n        return schema.isOptional();\n    }\n    catch {\n        return true;\n    }\n}\n","import { parseDef } from \"../parseDef.js\";\nexport const parseOptionalDef = (def, refs) => {\n    if (refs.currentPath.toString() === refs.propertyPath?.toString()) {\n        return parseDef(def.innerType._def, refs);\n    }\n    const innerSchema = parseDef(def.innerType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"anyOf\", \"1\"],\n    });\n    return innerSchema\n        ? {\n            anyOf: [\n                {\n                    not: {},\n                },\n                innerSchema,\n            ],\n        }\n        : {};\n};\n","import { parseDef } from \"../parseDef.js\";\nexport const parsePipelineDef = (def, refs) => {\n    if (refs.pipeStrategy === \"input\") {\n        return parseDef(def.in._def, refs);\n    }\n    else if (refs.pipeStrategy === \"output\") {\n        return parseDef(def.out._def, refs);\n    }\n    const a = parseDef(def.in._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"allOf\", \"0\"],\n    });\n    const b = parseDef(def.out._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"allOf\", a ? \"1\" : \"0\"],\n    });\n    return {\n        allOf: [a, b].filter((x) => x !== undefined),\n    };\n};\n","import { parseDef } from \"../parseDef.js\";\nexport function parsePromiseDef(def, refs) {\n    return parseDef(def.type._def, refs);\n}\n","import { setResponseValueAndErrors } from \"../errorMessages.js\";\nimport { parseDef } from \"../parseDef.js\";\nexport function parseSetDef(def, refs) {\n    const items = parseDef(def.valueType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\"],\n    });\n    const schema = {\n        type: \"array\",\n        uniqueItems: true,\n        items,\n    };\n    if (def.minSize) {\n        setResponseValueAndErrors(schema, \"minItems\", def.minSize.value, def.minSize.message, refs);\n    }\n    if (def.maxSize) {\n        setResponseValueAndErrors(schema, \"maxItems\", def.maxSize.value, def.maxSize.message, refs);\n    }\n    return schema;\n}\n","import { parseDef } from \"../parseDef.js\";\nexport function parseTupleDef(def, refs) {\n    if (def.rest) {\n        return {\n            type: \"array\",\n            minItems: def.items.length,\n            items: def.items\n                .map((x, i) => parseDef(x._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"items\", `${i}`],\n            }))\n                .reduce((acc, x) => (x === undefined ? acc : [...acc, x]), []),\n            additionalItems: parseDef(def.rest._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"additionalItems\"],\n            }),\n        };\n    }\n    else {\n        return {\n            type: \"array\",\n            minItems: def.items.length,\n            maxItems: def.items.length,\n            items: def.items\n                .map((x, i) => parseDef(x._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"items\", `${i}`],\n            }))\n                .reduce((acc, x) => (x === undefined ? acc : [...acc, x]), []),\n        };\n    }\n}\n","export function parseUndefinedDef() {\n    return {\n        not: {},\n    };\n}\n","export function parseUnknownDef() {\n    return {};\n}\n","import { parseDef } from \"../parseDef.js\";\nexport const parseReadonlyDef = (def, refs) => {\n    return parseDef(def.innerType._def, refs);\n};\n","import { ignoreOverride } from \"./Options.js\";\nimport { selectParser } from \"./selectParser.js\";\nexport function parseDef(def, refs, forceResolution = false) {\n    const seenItem = refs.seen.get(def);\n    if (refs.override) {\n        const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);\n        if (overrideResult !== ignoreOverride) {\n            return overrideResult;\n        }\n    }\n    if (seenItem && !forceResolution) {\n        const seenSchema = get$ref(seenItem, refs);\n        if (seenSchema !== undefined) {\n            return seenSchema;\n        }\n    }\n    const newItem = { def, path: refs.currentPath, jsonSchema: undefined };\n    refs.seen.set(def, newItem);\n    const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);\n    // If the return was a function, then the inner definition needs to be extracted before a call to parseDef (recursive)\n    const jsonSchema = typeof jsonSchemaOrGetter === \"function\"\n        ? parseDef(jsonSchemaOrGetter(), refs)\n        : jsonSchemaOrGetter;\n    if (jsonSchema) {\n        addMeta(def, refs, jsonSchema);\n    }\n    if (refs.postProcess) {\n        const postProcessResult = refs.postProcess(jsonSchema, def, refs);\n        newItem.jsonSchema = jsonSchema;\n        return postProcessResult;\n    }\n    newItem.jsonSchema = jsonSchema;\n    return jsonSchema;\n}\nconst get$ref = (item, refs) => {\n    switch (refs.$refStrategy) {\n        case \"root\":\n            return { $ref: item.path.join(\"/\") };\n        case \"relative\":\n            return { $ref: getRelativePath(refs.currentPath, item.path) };\n        case \"none\":\n        case \"seen\": {\n            if (item.path.length < refs.currentPath.length &&\n                item.path.every((value, index) => refs.currentPath[index] === value)) {\n                console.warn(`Recursive reference detected at ${refs.currentPath.join(\"/\")}! Defaulting to any`);\n                return {};\n            }\n            return refs.$refStrategy === \"seen\" ? {} : undefined;\n        }\n    }\n};\nconst getRelativePath = (pathA, pathB) => {\n    let i = 0;\n    for (; i < pathA.length && i < pathB.length; i++) {\n        if (pathA[i] !== pathB[i])\n            break;\n    }\n    return [(pathA.length - i).toString(), ...pathB.slice(i)].join(\"/\");\n};\nconst addMeta = (def, refs, jsonSchema) => {\n    if (def.description) {\n        jsonSchema.description = def.description;\n        if (refs.markdownDescription) {\n            jsonSchema.markdownDescription = def.description;\n        }\n    }\n    return jsonSchema;\n};\n","import { parseDef } from \"./parseDef.js\";\nimport { getRefs } from \"./Refs.js\";\nconst zodToJsonSchema = (schema, options) => {\n    const refs = getRefs(options);\n    const definitions = typeof options === \"object\" && options.definitions\n        ? Object.entries(options.definitions).reduce((acc, [name, schema]) => ({\n            ...acc,\n            [name]: parseDef(schema._def, {\n                ...refs,\n                currentPath: [...refs.basePath, refs.definitionPath, name],\n            }, true) ?? {},\n        }), {})\n        : undefined;\n    const name = typeof options === \"string\"\n        ? options\n        : options?.nameStrategy === \"title\"\n            ? undefined\n            : options?.name;\n    const main = parseDef(schema._def, name === undefined\n        ? refs\n        : {\n            ...refs,\n            currentPath: [...refs.basePath, refs.definitionPath, name],\n        }, false) ?? {};\n    const title = typeof options === \"object\" &&\n        options.name !== undefined &&\n        options.nameStrategy === \"title\"\n        ? options.name\n        : undefined;\n    if (title !== undefined) {\n        main.title = title;\n    }\n    const combined = name === undefined\n        ? definitions\n            ? {\n                ...main,\n                [refs.definitionPath]: definitions,\n            }\n            : main\n        : {\n            $ref: [\n                ...(refs.$refStrategy === \"relative\" ? [] : refs.basePath),\n                refs.definitionPath,\n                name,\n            ].join(\"/\"),\n            [refs.definitionPath]: {\n                ...definitions,\n                [name]: main,\n            },\n        };\n    if (refs.target === \"jsonSchema7\") {\n        combined.$schema = \"http://json-schema.org/draft-07/schema#\";\n    }\n    else if (refs.target === \"jsonSchema2019-09\" || refs.target === \"openAi\") {\n        combined.$schema = \"https://json-schema.org/draft/2019-09/schema#\";\n    }\n    if (refs.target === \"openAi\" &&\n        (\"anyOf\" in combined ||\n            \"oneOf\" in combined ||\n            \"allOf\" in combined ||\n            (\"type\" in combined && Array.isArray(combined.type)))) {\n        console.warn(\"Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property.\");\n    }\n    return combined;\n};\nexport { zodToJsonSchema };\n",null,null,null,"import { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\nexport class UmbracoMcpServer {\n  private static instance: McpServer | null = null;\n\n  private constructor() {}\n\n  public static GetServer(): McpServer {\n    if (UmbracoMcpServer.instance === null) {\n      UmbracoMcpServer.instance = new McpServer({\n        name: \"Umbraco Server\",\n        version: \"1.0.0\",\n        capabilities: {\n          tools: {},\n        },\n      });\n    }\n    return UmbracoMcpServer.instance;\n  }\n}\n","import Axios, { AxiosRequestConfig } from \"axios\";\nimport qs from 'qs';\nconst client_id = process.env.UMBRACO_CLIENT_ID;\nconst client_secret = process.env.UMBRACO_CLIENT_SECRET;\nconst grant_type = \"client_credentials\";\n\nconst baseURL = process.env.UMBRACO_BASE_URL;\n\nif (!baseURL)\n  throw new Error(\"Missing required environment variable: UMBRACO_BASE_URL\");\nif (!client_id)\n  throw new Error(\"Missing required environment variable: UMBRACO_CLIENT_ID\");\nif (!client_secret && client_id !== \"umbraco-swagger\")\n  throw new Error(\n    \"Missing required environment variable: UMBRACO_CLIENT_SECRET\"\n  );\n\nconst tokenPath = \"/umbraco/management/api/v1/security/back-office/token\";\n\nexport const UmbracoAxios = Axios.create({ baseURL }); // Set base URL from config\n\nlet accessToken: string | null = null;\nlet tokenExpiry: number | null = null;\n\n// Function to fetch a new access token\nconst fetchAccessToken = async (): Promise<string | null> => {\n  const response = await Axios.post(\n    `${baseURL}${tokenPath}`,\n    {\n      client_id,\n      client_secret: client_secret ?? \"\",\n      grant_type,\n    },\n    {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n    }\n  );\n\n  const { access_token, expires_in } = response.data;\n  accessToken = access_token;\n  tokenExpiry = Date.now() + expires_in * 1000; // Calculate token expiry time\n  return accessToken;\n};\n\n// Axios request interceptor to add the Authorization header\nUmbracoAxios.interceptors.request.use(async (config) => {\n  if (!accessToken || (tokenExpiry && Date.now() >= tokenExpiry)) {\n    await fetchAccessToken(); // Fetch a new token if it doesn't exist or has expired\n  }\n\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n\n  return config;\n});\n\nUmbracoAxios.defaults.paramsSerializer = params => qs.stringify(params, { arrayFormat: 'repeat' });\n\n/*UmbracoAxios.interceptors.request.use(request => {\n  console.log('Starting Request', request);\n  return request;\n});\n\nUmbracoAxios.interceptors.response.use(response => {\n  console.log('Response', response);\n  return response;\n});*/\n\n/*UmbracoAxios.interceptors.request.use(request => {\n  console.log('Final Request URL:', request.baseURL + request.url!);\n  return request;\n});*/\n\n// Add a generic error handler to the Axios instance\nUmbracoAxios.interceptors.response.use(\n  (response) => response, // Pass through successful responses\n  (error) => {\n    if (error.response) {\n      // Server responded with a status code outside the 2xx range\n      console.error(\n        `HTTP Error: ${error.response.status}`,\n        error.response.data\n      );\n    } else if (error.request) {\n      // Request was made but no response was received\n      console.error(\"No response received:\", error.request);\n    } else {\n      // Something happened in setting up the request\n      console.error(\"Error setting up request:\", error.message);\n    }\n\n    // Optionally, you can throw the error to be handled by the caller\n    return Promise.reject(error);\n  }\n);\n\n// add a second `options` argument here if you want to pass extra options to each generated query\nexport const UmbracoManagementClient = <T>(\n  config: AxiosRequestConfig,\n  options?: AxiosRequestConfig\n): Promise<T> => {\n  const source = Axios.CancelToken.source();\n  const promise = UmbracoAxios({\n    ...config,\n    ...options,\n    cancelToken: source.token,\n  }).then(({ data }) => data);\n\n  // @ts-ignore\n  promise.cancel = () => {\n    source.cancel(\"Query was cancelled\");\n  };\n\n  return promise;\n};\n","/**\n * Generated by orval v7.8.0 🍺\n * Do not edit manually.\n * Umbraco Management API\n * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility\n * OpenAPI spec version: Latest\n */\nimport type {\n  AvailableDocumentTypeCompositionResponseModel,\n  AvailableMediaTypeCompositionResponseModel,\n  AvailableMemberTypeCompositionResponseModel,\n  CalculatedUserStartNodesResponseModel,\n  ChangePasswordCurrentUserRequestModel,\n  ChangePasswordUserRequestModel,\n  CopyDataTypeRequestModel,\n  CopyDocumentRequestModel,\n  CopyDocumentTypeRequestModel,\n  CopyMediaTypeRequestModel,\n  CreateDataTypeRequestModel,\n  CreateDictionaryItemRequestModel,\n  CreateDocumentBlueprintFromDocumentRequestModel,\n  CreateDocumentBlueprintRequestModel,\n  CreateDocumentRequestModel,\n  CreateDocumentTypeRequestModel,\n  CreateFolderRequestModel,\n  CreateInitialPasswordUserRequestModel,\n  CreateLanguageRequestModel,\n  CreateMediaRequestModel,\n  CreateMediaTypeRequestModel,\n  CreateMemberGroupRequestModel,\n  CreateMemberRequestModel,\n  CreateMemberTypeRequestModel,\n  CreatePackageRequestModel,\n  CreatePartialViewFolderRequestModel,\n  CreatePartialViewRequestModel,\n  CreateScriptFolderRequestModel,\n  CreateScriptRequestModel,\n  CreateStylesheetFolderRequestModel,\n  CreateStylesheetRequestModel,\n  CreateTemplateRequestModel,\n  CreateUserClientCredentialsRequestModel,\n  CreateUserDataRequestModel,\n  CreateUserGroupRequestModel,\n  CreateUserRequestModel,\n  CreateWebhookRequestModel,\n  CurrenUserConfigurationResponseModel,\n  CurrentUserResponseModel,\n  DataTypeItemResponseModel,\n  DataTypeReferenceResponseModel,\n  DataTypeResponseModel,\n  DataTypeTreeItemResponseModel,\n  DatabaseInstallRequestModel,\n  DatatypeConfigurationResponseModel,\n  DeleteUserCurrent2faByProviderNameParams,\n  DeleteUserGroupsRequestModel,\n  DeleteUsersRequestModel,\n  DictionaryItemItemResponseModel,\n  DictionaryItemResponseModel,\n  DisableUserRequestModel,\n  DocumentBlueprintItemResponseModel,\n  DocumentBlueprintResponseModel,\n  DocumentBlueprintTreeItemResponseModel,\n  DocumentConfigurationResponseModel,\n  DocumentItemResponseModel,\n  DocumentNotificationResponseModel,\n  DocumentResponseModel,\n  DocumentTreeItemResponseModel,\n  DocumentTypeCompositionRequestModel,\n  DocumentTypeCompositionResponseModel,\n  DocumentTypeConfigurationResponseModel,\n  DocumentTypeItemResponseModel,\n  DocumentTypeResponseModel,\n  DocumentTypeTreeItemResponseModel,\n  DocumentUrlInfoResponseModel,\n  DocumentVersionResponseModel,\n  DomainsResponseModel,\n  DynamicRootRequestModel,\n  DynamicRootResponseModel,\n  EnableTwoFactorRequestModel,\n  EnableUserRequestModel,\n  EntityImportAnalysisResponseModel,\n  FileSystemTreeItemPresentationModel,\n  FolderResponseModel,\n  GetCollectionDocumentByIdParams,\n  GetCollectionMediaParams,\n  GetCultureParams,\n  GetDictionaryByIdExportParams,\n  GetDictionaryParams,\n  GetDocumentAreReferencedParams,\n  GetDocumentByIdAuditLogParams,\n  GetDocumentByIdReferencedByParams,\n  GetDocumentByIdReferencedDescendantsParams,\n  GetDocumentTypeAllowedAtRootParams,\n  GetDocumentTypeByIdAllowedChildrenParams,\n  GetDocumentTypeByIdBlueprintParams,\n  GetDocumentUrlsParams,\n  GetDocumentVersionParams,\n  GetFilterDataTypeParams,\n  GetFilterMemberParams,\n  GetFilterUserGroupParams,\n  GetFilterUserParams,\n  GetHealthCheckGroupParams,\n  GetHelpParams,\n  GetImagingResizeUrlsParams,\n  GetImportAnalyzeParams,\n  GetIndexerParams,\n  GetItemDataTypeParams,\n  GetItemDataTypeSearchParams,\n  GetItemDictionaryParams,\n  GetItemDocumentBlueprintParams,\n  GetItemDocumentParams,\n  GetItemDocumentSearchParams,\n  GetItemDocumentTypeParams,\n  GetItemDocumentTypeSearchParams,\n  GetItemLanguageParams,\n  GetItemMediaParams,\n  GetItemMediaSearchParams,\n  GetItemMediaTypeAllowedParams,\n  GetItemMediaTypeFoldersParams,\n  GetItemMediaTypeParams,\n  GetItemMediaTypeSearchParams,\n  GetItemMemberGroupParams,\n  GetItemMemberParams,\n  GetItemMemberSearchParams,\n  GetItemMemberTypeParams,\n  GetItemMemberTypeSearchParams,\n  GetItemPartialViewParams,\n  GetItemRelationTypeParams,\n  GetItemScriptParams,\n  GetItemStaticFileParams,\n  GetItemStylesheetParams,\n  GetItemTemplateParams,\n  GetItemTemplateSearchParams,\n  GetItemUserGroupParams,\n  GetItemUserParams,\n  GetItemWebhookParams,\n  GetLanguageParams,\n  GetLogViewerLevelCountParams,\n  GetLogViewerLevelParams,\n  GetLogViewerLogParams,\n  GetLogViewerMessageTemplateParams,\n  GetLogViewerSavedSearchParams,\n  GetLogViewerValidateLogsSizeParams,\n  GetMediaAreReferencedParams,\n  GetMediaByIdAuditLogParams,\n  GetMediaByIdReferencedByParams,\n  GetMediaByIdReferencedDescendantsParams,\n  GetMediaTypeAllowedAtRootParams,\n  GetMediaTypeByIdAllowedChildrenParams,\n  GetMediaUrlsParams,\n  GetMemberGroupParams,\n  GetObjectTypesParams,\n  GetOembedQueryParams,\n  GetPackageCreatedParams,\n  GetPackageMigrationStatusParams,\n  GetPartialViewSnippetParams,\n  GetPropertyTypeIsUsedParams,\n  GetRecycleBinDocumentChildrenParams,\n  GetRecycleBinDocumentRootParams,\n  GetRecycleBinMediaChildrenParams,\n  GetRecycleBinMediaRootParams,\n  GetRedirectManagementByIdParams,\n  GetRedirectManagementParams,\n  GetRelationByRelationTypeIdParams,\n  GetRelationTypeParams,\n  GetSearcherBySearcherNameQueryParams,\n  GetSearcherParams,\n  GetSegmentParams,\n  GetTagParams,\n  GetTelemetryParams,\n  GetTreeDataTypeAncestorsParams,\n  GetTreeDataTypeChildrenParams,\n  GetTreeDataTypeRootParams,\n  GetTreeDictionaryAncestorsParams,\n  GetTreeDictionaryChildrenParams,\n  GetTreeDictionaryRootParams,\n  GetTreeDocumentAncestorsParams,\n  GetTreeDocumentBlueprintAncestorsParams,\n  GetTreeDocumentBlueprintChildrenParams,\n  GetTreeDocumentBlueprintRootParams,\n  GetTreeDocumentChildrenParams,\n  GetTreeDocumentRootParams,\n  GetTreeDocumentTypeAncestorsParams,\n  GetTreeDocumentTypeChildrenParams,\n  GetTreeDocumentTypeRootParams,\n  GetTreeMediaAncestorsParams,\n  GetTreeMediaChildrenParams,\n  GetTreeMediaRootParams,\n  GetTreeMediaTypeAncestorsParams,\n  GetTreeMediaTypeChildrenParams,\n  GetTreeMediaTypeRootParams,\n  GetTreeMemberGroupRootParams,\n  GetTreeMemberTypeRootParams,\n  GetTreePartialViewAncestorsParams,\n  GetTreePartialViewChildrenParams,\n  GetTreePartialViewRootParams,\n  GetTreeScriptAncestorsParams,\n  GetTreeScriptChildrenParams,\n  GetTreeScriptRootParams,\n  GetTreeStaticFileAncestorsParams,\n  GetTreeStaticFileChildrenParams,\n  GetTreeStaticFileRootParams,\n  GetTreeStylesheetAncestorsParams,\n  GetTreeStylesheetChildrenParams,\n  GetTreeStylesheetRootParams,\n  GetTreeTemplateAncestorsParams,\n  GetTreeTemplateChildrenParams,\n  GetTreeTemplateRootParams,\n  GetUserCurrentPermissionsDocumentParams,\n  GetUserCurrentPermissionsMediaParams,\n  GetUserCurrentPermissionsParams,\n  GetUserDataParams,\n  GetUserGroupParams,\n  GetUserParams,\n  GetWebhookByIdLogsParams,\n  GetWebhookEventsParams,\n  GetWebhookLogsParams,\n  GetWebhookParams,\n  HealthCheckActionRequestModel,\n  HealthCheckGroupPresentationModel,\n  HealthCheckGroupWithResultResponseModel,\n  HealthCheckResultResponseModel,\n  ImportDictionaryRequestModel,\n  ImportDocumentTypeRequestModel,\n  ImportMediaTypeRequestModel,\n  IndexResponseModel,\n  InstallRequestModel,\n  InstallSettingsResponseModel,\n  InviteUserRequestModel,\n  LanguageItemResponseModel,\n  LanguageResponseModel,\n  LogLevelCountsReponseModel,\n  ManifestResponseModel,\n  MediaConfigurationResponseModel,\n  MediaItemResponseModel,\n  MediaResponseModel,\n  MediaTreeItemResponseModel,\n  MediaTypeCompositionRequestModel,\n  MediaTypeCompositionResponseModel,\n  MediaTypeConfigurationResponseModel,\n  MediaTypeItemResponseModel,\n  MediaTypeResponseModel,\n  MediaTypeTreeItemResponseModel,\n  MediaUrlInfoResponseModel,\n  MemberConfigurationResponseModel,\n  MemberGroupItemResponseModel,\n  MemberGroupResponseModel,\n  MemberItemResponseModel,\n  MemberResponseModel,\n  MemberTypeCompositionRequestModel,\n  MemberTypeCompositionResponseModel,\n  MemberTypeConfigurationResponseModel,\n  MemberTypeItemResponseModel,\n  MemberTypeResponseModel,\n  ModelsBuilderResponseModel,\n  MoveDataTypeRequestModel,\n  MoveDictionaryRequestModel,\n  MoveDocumentBlueprintRequestModel,\n  MoveDocumentRequestModel,\n  MoveDocumentTypeRequestModel,\n  MoveMediaRequestModel,\n  MoveMediaTypeRequestModel,\n  NamedEntityTreeItemResponseModel,\n  NoopSetupTwoFactorModel,\n  OEmbedResponseModel,\n  OutOfDateStatusResponseModel,\n  PackageConfigurationResponseModel,\n  PackageDefinitionResponseModel,\n  PagedAllowedDocumentTypeModel,\n  PagedAllowedMediaTypeModel,\n  PagedAuditLogResponseModel,\n  PagedCultureReponseModel,\n  PagedDataTypeItemResponseModel,\n  PagedDataTypeTreeItemResponseModel,\n  PagedDictionaryOverviewResponseModel,\n  PagedDocumentBlueprintTreeItemResponseModel,\n  PagedDocumentCollectionResponseModel,\n  PagedDocumentRecycleBinItemResponseModel,\n  PagedDocumentTreeItemResponseModel,\n  PagedDocumentTypeBlueprintItemResponseModel,\n  PagedDocumentTypeTreeItemResponseModel,\n  PagedDocumentVersionItemResponseModel,\n  PagedFileSystemTreeItemPresentationModel,\n  PagedHealthCheckGroupResponseModel,\n  PagedHelpPageResponseModel,\n  PagedIReferenceResponseModel,\n  PagedIndexResponseModel,\n  PagedLanguageResponseModel,\n  PagedLogMessageResponseModel,\n  PagedLogTemplateResponseModel,\n  PagedLoggerResponseModel,\n  PagedMediaCollectionResponseModel,\n  PagedMediaRecycleBinItemResponseModel,\n  PagedMediaTreeItemResponseModel,\n  PagedMediaTypeTreeItemResponseModel,\n  PagedMemberGroupResponseModel,\n  PagedMemberResponseModel,\n  PagedMemberTypeTreeItemResponseModel,\n  PagedModelDataTypeItemResponseModel,\n  PagedModelDocumentItemResponseModel,\n  PagedModelDocumentTypeItemResponseModel,\n  PagedModelMediaItemResponseModel,\n  PagedModelMediaTypeItemResponseModel,\n  PagedModelMemberItemResponseModel,\n  PagedModelMemberTypeItemResponseModel,\n  PagedModelTemplateItemResponseModel,\n  PagedNamedEntityTreeItemResponseModel,\n  PagedObjectTypeResponseModel,\n  PagedPackageDefinitionResponseModel,\n  PagedPackageMigrationStatusResponseModel,\n  PagedPartialViewSnippetItemResponseModel,\n  PagedRedirectUrlResponseModel,\n  PagedReferenceByIdModel,\n  PagedRelationResponseModel,\n  PagedRelationTypeResponseModel,\n  PagedSavedLogSearchResponseModel,\n  PagedSearchResultResponseModel,\n  PagedSearcherResponseModel,\n  PagedSegmentResponseModel,\n  PagedTagResponseModel,\n  PagedTelemetryResponseModel,\n  PagedUserDataResponseModel,\n  PagedUserGroupResponseModel,\n  PagedUserResponseModel,\n  PagedWebhookEventModel,\n  PagedWebhookLogResponseModel,\n  PagedWebhookResponseModel,\n  PartialViewFolderResponseModel,\n  PartialViewItemResponseModel,\n  PartialViewResponseModel,\n  PartialViewSnippetResponseModel,\n  PostDocumentVersionByIdRollbackParams,\n  PostRedirectManagementStatusParams,\n  PostTemporaryFileBody,\n  ProfilingStatusRequestModel,\n  ProfilingStatusResponseModel,\n  PublicAccessRequestModel,\n  PublicAccessResponseModel,\n  PublishDocumentRequestModel,\n  PublishDocumentWithDescendantsRequestModel,\n  PublishedDocumentResponseModel,\n  PutDocumentVersionByIdPreventCleanupParams,\n  RedirectUrlStatusResponseModel,\n  ReferenceByIdModel,\n  RelationTypeItemResponseModel,\n  RelationTypeResponseModel,\n  RenamePartialViewRequestModel,\n  RenameScriptRequestModel,\n  RenameStylesheetRequestModel,\n  ResendInviteUserRequestModel,\n  ResetPasswordRequestModel,\n  ResetPasswordTokenRequestModel,\n  ResetPasswordUserResponseModel,\n  SavedLogSearchRequestModel,\n  SavedLogSearchResponseModel,\n  ScriptFolderResponseModel,\n  ScriptItemResponseModel,\n  ScriptResponseModel,\n  SecurityConfigurationResponseModel,\n  ServerConfigurationResponseModel,\n  ServerInformationResponseModel,\n  ServerStatusResponseModel,\n  ServerTroubleshootingResponseModel,\n  SetAvatarRequestModel,\n  SortingRequestModel,\n  StaticFileItemResponseModel,\n  StylesheetFolderResponseModel,\n  StylesheetItemResponseModel,\n  StylesheetResponseModel,\n  TelemetryRequestModel,\n  TelemetryResponseModel,\n  TemplateConfigurationResponseModel,\n  TemplateItemResponseModel,\n  TemplateQueryExecuteModel,\n  TemplateQueryResultResponseModel,\n  TemplateQuerySettingsResponseModel,\n  TemplateResponseModel,\n  TemporaryFileConfigurationResponseModel,\n  TemporaryFileResponseModel,\n  UnlockUsersRequestModel,\n  UnpublishDocumentRequestModel,\n  UpdateDataTypeRequestModel,\n  UpdateDictionaryItemRequestModel,\n  UpdateDocumentBlueprintRequestModel,\n  UpdateDocumentNotificationsRequestModel,\n  UpdateDocumentRequestModel,\n  UpdateDocumentTypeRequestModel,\n  UpdateDomainsRequestModel,\n  UpdateFolderResponseModel,\n  UpdateLanguageRequestModel,\n  UpdateMediaRequestModel,\n  UpdateMediaTypeRequestModel,\n  UpdateMemberGroupRequestModel,\n  UpdateMemberRequestModel,\n  UpdateMemberTypeRequestModel,\n  UpdatePackageRequestModel,\n  UpdatePartialViewRequestModel,\n  UpdateScriptRequestModel,\n  UpdateStylesheetRequestModel,\n  UpdateTemplateRequestModel,\n  UpdateUserDataRequestModel,\n  UpdateUserGroupRequestModel,\n  UpdateUserGroupsOnUserRequestModel,\n  UpdateUserRequestModel,\n  UpdateWebhookRequestModel,\n  UpgradeCheckResponseModel,\n  UpgradeSettingsResponseModel,\n  UserConfigurationResponseModel,\n  UserDataModel,\n  UserExternalLoginProviderModel,\n  UserGroupItemResponseModel,\n  UserGroupResponseModel,\n  UserItemResponseModel,\n  UserPermissionsResponseModel,\n  UserResponseModel,\n  UserTwoFactorProviderModel,\n  ValidateUpdateDocumentRequestModel,\n  VerifyInviteUserRequestModel,\n  VerifyInviteUserResponseModel,\n  VerifyResetPasswordResponseModel,\n  VerifyResetPasswordTokenRequestModel,\n  WebhookItemResponseModel,\n  WebhookResponseModel\n} from './schemas';\n\nimport { UmbracoManagementClient } from '../clients/umbraco-management-client.js';\n\n// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497\ntype IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <\nT,\n>() => T extends Y ? 1 : 2\n? A\n: B;\n\ntype WritableKeys<T> = {\n[P in keyof T]-?: IfEquals<\n  { [Q in P]: T[P] },\n  { -readonly [Q in P]: T[P] },\n  P\n>;\n}[keyof T];\n\ntype UnionToIntersection<U> =\n  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;\ntype DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;\n\ntype Writable<T> = Pick<T, WritableKeys<T>>;\ntype NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {\n  [P in keyof Writable<T>]: T[P] extends object\n    ? NonReadonly<NonNullable<T[P]>>\n    : T[P];\n} : DistributeReadOnlyOverUnions<T>;\n\n\ntype SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];\n\n\n  export const getUmbracoManagementAPI = () => {\nconst getCulture = (\n    params?: GetCultureParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedCultureReponseModel>(\n      {url: `/umbraco/management/api/v1/culture`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postDataType = (\n    createDataTypeRequestModel: CreateDataTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/data-type`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createDataTypeRequestModel\n    },\n      options);\n    }\n  \nconst getDataTypeById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DataTypeResponseModel>(\n      {url: `/umbraco/management/api/v1/data-type/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteDataTypeById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/data-type/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putDataTypeById = (\n    id: string,\n    updateDataTypeRequestModel: UpdateDataTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/data-type/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateDataTypeRequestModel\n    },\n      options);\n    }\n  \nconst postDataTypeByIdCopy = (\n    id: string,\n    copyDataTypeRequestModel: CopyDataTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/data-type/${id}/copy`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: copyDataTypeRequestModel\n    },\n      options);\n    }\n  \nconst getDataTypeByIdIsUsed = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<boolean>(\n      {url: `/umbraco/management/api/v1/data-type/${id}/is-used`, method: 'GET'\n    },\n      options);\n    }\n  \nconst putDataTypeByIdMove = (\n    id: string,\n    moveDataTypeRequestModel: MoveDataTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/data-type/${id}/move`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: moveDataTypeRequestModel\n    },\n      options);\n    }\n  \nconst getDataTypeByIdReferences = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DataTypeReferenceResponseModel[]>(\n      {url: `/umbraco/management/api/v1/data-type/${id}/references`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getDataTypeConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DatatypeConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/data-type/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postDataTypeFolder = (\n    createFolderRequestModel: CreateFolderRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/data-type/folder`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createFolderRequestModel\n    },\n      options);\n    }\n  \nconst getDataTypeFolderById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<FolderResponseModel>(\n      {url: `/umbraco/management/api/v1/data-type/folder/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteDataTypeFolderById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/data-type/folder/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putDataTypeFolderById = (\n    id: string,\n    updateFolderResponseModel: UpdateFolderResponseModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/data-type/folder/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateFolderResponseModel\n    },\n      options);\n    }\n  \nconst getFilterDataType = (\n    params?: GetFilterDataTypeParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDataTypeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/filter/data-type`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemDataType = (\n    params?: GetItemDataTypeParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DataTypeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/data-type`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemDataTypeSearch = (\n    params?: GetItemDataTypeSearchParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedModelDataTypeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/data-type/search`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDataTypeAncestors = (\n    params?: GetTreeDataTypeAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DataTypeTreeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/tree/data-type/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDataTypeChildren = (\n    params?: GetTreeDataTypeChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDataTypeTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/data-type/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDataTypeRoot = (\n    params?: GetTreeDataTypeRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDataTypeTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/data-type/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getDictionary = (\n    params?: GetDictionaryParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDictionaryOverviewResponseModel>(\n      {url: `/umbraco/management/api/v1/dictionary`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postDictionary = (\n    createDictionaryItemRequestModel: CreateDictionaryItemRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/dictionary`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createDictionaryItemRequestModel\n    },\n      options);\n    }\n  \nconst getDictionaryById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DictionaryItemResponseModel>(\n      {url: `/umbraco/management/api/v1/dictionary/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteDictionaryById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/dictionary/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putDictionaryById = (\n    id: string,\n    updateDictionaryItemRequestModel: UpdateDictionaryItemRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/dictionary/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateDictionaryItemRequestModel\n    },\n      options);\n    }\n  \nconst getDictionaryByIdExport = (\n    id: string,\n    params?: GetDictionaryByIdExportParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<Blob>(\n      {url: `/umbraco/management/api/v1/dictionary/${id}/export`, method: 'GET',\n        params,\n        responseType: 'blob'\n    },\n      options);\n    }\n  \nconst putDictionaryByIdMove = (\n    id: string,\n    moveDictionaryRequestModel: MoveDictionaryRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/dictionary/${id}/move`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: moveDictionaryRequestModel\n    },\n      options);\n    }\n  \nconst postDictionaryImport = (\n    importDictionaryRequestModel: ImportDictionaryRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/dictionary/import`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: importDictionaryRequestModel\n    },\n      options);\n    }\n  \nconst getItemDictionary = (\n    params?: GetItemDictionaryParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DictionaryItemItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/dictionary`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDictionaryAncestors = (\n    params?: GetTreeDictionaryAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<NamedEntityTreeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/tree/dictionary/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDictionaryChildren = (\n    params?: GetTreeDictionaryChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedNamedEntityTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/dictionary/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDictionaryRoot = (\n    params?: GetTreeDictionaryRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedNamedEntityTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/dictionary/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postDocumentBlueprint = (\n    createDocumentBlueprintRequestModel: CreateDocumentBlueprintRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-blueprint`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createDocumentBlueprintRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentBlueprintById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentBlueprintResponseModel>(\n      {url: `/umbraco/management/api/v1/document-blueprint/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteDocumentBlueprintById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-blueprint/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putDocumentBlueprintById = (\n    id: string,\n    updateDocumentBlueprintRequestModel: UpdateDocumentBlueprintRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-blueprint/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateDocumentBlueprintRequestModel\n    },\n      options);\n    }\n  \nconst putDocumentBlueprintByIdMove = (\n    id: string,\n    moveDocumentBlueprintRequestModel: MoveDocumentBlueprintRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-blueprint/${id}/move`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: moveDocumentBlueprintRequestModel\n    },\n      options);\n    }\n  \nconst postDocumentBlueprintFolder = (\n    createFolderRequestModel: CreateFolderRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-blueprint/folder`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createFolderRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentBlueprintFolderById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<FolderResponseModel>(\n      {url: `/umbraco/management/api/v1/document-blueprint/folder/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteDocumentBlueprintFolderById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-blueprint/folder/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putDocumentBlueprintFolderById = (\n    id: string,\n    updateFolderResponseModel: UpdateFolderResponseModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-blueprint/folder/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateFolderResponseModel\n    },\n      options);\n    }\n  \nconst postDocumentBlueprintFromDocument = (\n    createDocumentBlueprintFromDocumentRequestModel: CreateDocumentBlueprintFromDocumentRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-blueprint/from-document`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createDocumentBlueprintFromDocumentRequestModel\n    },\n      options);\n    }\n  \nconst getItemDocumentBlueprint = (\n    params?: GetItemDocumentBlueprintParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentBlueprintItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/document-blueprint`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDocumentBlueprintAncestors = (\n    params?: GetTreeDocumentBlueprintAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentBlueprintTreeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/tree/document-blueprint/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDocumentBlueprintChildren = (\n    params?: GetTreeDocumentBlueprintChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentBlueprintTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/document-blueprint/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDocumentBlueprintRoot = (\n    params?: GetTreeDocumentBlueprintRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentBlueprintTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/document-blueprint/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postDocumentType = (\n    createDocumentTypeRequestModel: CreateDocumentTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-type`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createDocumentTypeRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentTypeById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentTypeResponseModel>(\n      {url: `/umbraco/management/api/v1/document-type/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteDocumentTypeById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-type/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putDocumentTypeById = (\n    id: string,\n    updateDocumentTypeRequestModel: UpdateDocumentTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-type/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateDocumentTypeRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentTypeByIdAllowedChildren = (\n    id: string,\n    params?: GetDocumentTypeByIdAllowedChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedAllowedDocumentTypeModel>(\n      {url: `/umbraco/management/api/v1/document-type/${id}/allowed-children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getDocumentTypeByIdBlueprint = (\n    id: string,\n    params?: GetDocumentTypeByIdBlueprintParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentTypeBlueprintItemResponseModel>(\n      {url: `/umbraco/management/api/v1/document-type/${id}/blueprint`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getDocumentTypeByIdCompositionReferences = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentTypeCompositionResponseModel[]>(\n      {url: `/umbraco/management/api/v1/document-type/${id}/composition-references`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postDocumentTypeByIdCopy = (\n    id: string,\n    copyDocumentTypeRequestModel: CopyDocumentTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-type/${id}/copy`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: copyDocumentTypeRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentTypeByIdExport = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<Blob>(\n      {url: `/umbraco/management/api/v1/document-type/${id}/export`, method: 'GET',\n        responseType: 'blob'\n    },\n      options);\n    }\n  \nconst putDocumentTypeByIdImport = (\n    id: string,\n    importDocumentTypeRequestModel: ImportDocumentTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-type/${id}/import`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: importDocumentTypeRequestModel\n    },\n      options);\n    }\n  \nconst putDocumentTypeByIdMove = (\n    id: string,\n    moveDocumentTypeRequestModel: MoveDocumentTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-type/${id}/move`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: moveDocumentTypeRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentTypeAllowedAtRoot = (\n    params?: GetDocumentTypeAllowedAtRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedAllowedDocumentTypeModel>(\n      {url: `/umbraco/management/api/v1/document-type/allowed-at-root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postDocumentTypeAvailableCompositions = (\n    documentTypeCompositionRequestModel: DocumentTypeCompositionRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<AvailableDocumentTypeCompositionResponseModel[]>(\n      {url: `/umbraco/management/api/v1/document-type/available-compositions`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: documentTypeCompositionRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentTypeConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentTypeConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/document-type/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postDocumentTypeFolder = (\n    createFolderRequestModel: CreateFolderRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-type/folder`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createFolderRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentTypeFolderById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<FolderResponseModel>(\n      {url: `/umbraco/management/api/v1/document-type/folder/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteDocumentTypeFolderById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-type/folder/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putDocumentTypeFolderById = (\n    id: string,\n    updateFolderResponseModel: UpdateFolderResponseModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-type/folder/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateFolderResponseModel\n    },\n      options);\n    }\n  \nconst postDocumentTypeImport = (\n    importDocumentTypeRequestModel: ImportDocumentTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-type/import`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: importDocumentTypeRequestModel\n    },\n      options);\n    }\n  \nconst getItemDocumentType = (\n    params?: GetItemDocumentTypeParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentTypeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/document-type`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemDocumentTypeSearch = (\n    params?: GetItemDocumentTypeSearchParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedModelDocumentTypeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/document-type/search`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDocumentTypeAncestors = (\n    params?: GetTreeDocumentTypeAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentTypeTreeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/tree/document-type/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDocumentTypeChildren = (\n    params?: GetTreeDocumentTypeChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentTypeTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/document-type/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDocumentTypeRoot = (\n    params?: GetTreeDocumentTypeRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentTypeTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/document-type/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getDocumentVersion = (\n    params: GetDocumentVersionParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentVersionItemResponseModel>(\n      {url: `/umbraco/management/api/v1/document-version`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getDocumentVersionById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentVersionResponseModel>(\n      {url: `/umbraco/management/api/v1/document-version/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst putDocumentVersionByIdPreventCleanup = (\n    id: string,\n    params?: PutDocumentVersionByIdPreventCleanupParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-version/${id}/prevent-cleanup`, method: 'PUT',\n        params\n    },\n      options);\n    }\n  \nconst postDocumentVersionByIdRollback = (\n    id: string,\n    params?: PostDocumentVersionByIdRollbackParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document-version/${id}/rollback`, method: 'POST',\n        params\n    },\n      options);\n    }\n  \nconst getCollectionDocumentById = (\n    id: string,\n    params?: GetCollectionDocumentByIdParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentCollectionResponseModel>(\n      {url: `/umbraco/management/api/v1/collection/document/${id}`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postDocument = (\n    createDocumentRequestModel: CreateDocumentRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createDocumentRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentResponseModel>(\n      {url: `/umbraco/management/api/v1/document/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteDocumentById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putDocumentById = (\n    id: string,\n    updateDocumentRequestModel: UpdateDocumentRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateDocumentRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentByIdAuditLog = (\n    id: string,\n    params?: GetDocumentByIdAuditLogParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedAuditLogResponseModel>(\n      {url: `/umbraco/management/api/v1/document/${id}/audit-log`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postDocumentByIdCopy = (\n    id: string,\n    copyDocumentRequestModel: CopyDocumentRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/copy`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: copyDocumentRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentByIdDomains = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DomainsResponseModel>(\n      {url: `/umbraco/management/api/v1/document/${id}/domains`, method: 'GET'\n    },\n      options);\n    }\n  \nconst putDocumentByIdDomains = (\n    id: string,\n    updateDomainsRequestModel: UpdateDomainsRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/domains`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateDomainsRequestModel\n    },\n      options);\n    }\n  \nconst putDocumentByIdMove = (\n    id: string,\n    moveDocumentRequestModel: MoveDocumentRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/move`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: moveDocumentRequestModel\n    },\n      options);\n    }\n  \nconst putDocumentByIdMoveToRecycleBin = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/move-to-recycle-bin`, method: 'PUT'\n    },\n      options);\n    }\n  \nconst getDocumentByIdNotifications = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentNotificationResponseModel[]>(\n      {url: `/umbraco/management/api/v1/document/${id}/notifications`, method: 'GET'\n    },\n      options);\n    }\n  \nconst putDocumentByIdNotifications = (\n    id: string,\n    updateDocumentNotificationsRequestModel: UpdateDocumentNotificationsRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/notifications`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateDocumentNotificationsRequestModel\n    },\n      options);\n    }\n  \nconst postDocumentByIdPublicAccess = (\n    id: string,\n    publicAccessRequestModel: PublicAccessRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/public-access`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: publicAccessRequestModel\n    },\n      options);\n    }\n  \nconst deleteDocumentByIdPublicAccess = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/public-access`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst getDocumentByIdPublicAccess = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PublicAccessResponseModel>(\n      {url: `/umbraco/management/api/v1/document/${id}/public-access`, method: 'GET'\n    },\n      options);\n    }\n  \nconst putDocumentByIdPublicAccess = (\n    id: string,\n    publicAccessRequestModel: PublicAccessRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/public-access`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: publicAccessRequestModel\n    },\n      options);\n    }\n  \nconst putDocumentByIdPublish = (\n    id: string,\n    publishDocumentRequestModel: PublishDocumentRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/publish`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: publishDocumentRequestModel\n    },\n      options);\n    }\n  \nconst putDocumentByIdPublishWithDescendants = (\n    id: string,\n    publishDocumentWithDescendantsRequestModel: PublishDocumentWithDescendantsRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/publish-with-descendants`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: publishDocumentWithDescendantsRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentByIdPublished = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PublishedDocumentResponseModel>(\n      {url: `/umbraco/management/api/v1/document/${id}/published`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getDocumentByIdReferencedBy = (\n    id: string,\n    params?: GetDocumentByIdReferencedByParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedIReferenceResponseModel>(\n      {url: `/umbraco/management/api/v1/document/${id}/referenced-by`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getDocumentByIdReferencedDescendants = (\n    id: string,\n    params?: GetDocumentByIdReferencedDescendantsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedReferenceByIdModel>(\n      {url: `/umbraco/management/api/v1/document/${id}/referenced-descendants`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst putDocumentByIdUnpublish = (\n    id: string,\n    unpublishDocumentRequestModel: UnpublishDocumentRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/unpublish`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: unpublishDocumentRequestModel\n    },\n      options);\n    }\n  \n/**\n * @deprecated\n */\nconst putDocumentByIdValidate = (\n    id: string,\n    updateDocumentRequestModel: UpdateDocumentRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/${id}/validate`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateDocumentRequestModel\n    },\n      options);\n    }\n  \nconst putUmbracoManagementApiV11DocumentByIdValidate11 = (\n    id: string,\n    validateUpdateDocumentRequestModel: ValidateUpdateDocumentRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1.1/document/${id}/validate`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: validateUpdateDocumentRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentAreReferenced = (\n    params?: GetDocumentAreReferencedParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedReferenceByIdModel>(\n      {url: `/umbraco/management/api/v1/document/are-referenced`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getDocumentConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/document/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst putDocumentSort = (\n    sortingRequestModel: SortingRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/sort`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: sortingRequestModel\n    },\n      options);\n    }\n  \nconst getDocumentUrls = (\n    params?: GetDocumentUrlsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentUrlInfoResponseModel[]>(\n      {url: `/umbraco/management/api/v1/document/urls`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postDocumentValidate = (\n    createDocumentRequestModel: CreateDocumentRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/document/validate`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createDocumentRequestModel\n    },\n      options);\n    }\n  \nconst getItemDocument = (\n    params?: GetItemDocumentParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/document`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemDocumentSearch = (\n    params?: GetItemDocumentSearchParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedModelDocumentItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/document/search`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst deleteRecycleBinDocument = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/recycle-bin/document`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst deleteRecycleBinDocumentById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/recycle-bin/document/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst getRecycleBinDocumentByIdOriginalParent = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ReferenceByIdModel>(\n      {url: `/umbraco/management/api/v1/recycle-bin/document/${id}/original-parent`, method: 'GET'\n    },\n      options);\n    }\n  \nconst putRecycleBinDocumentByIdRestore = (\n    id: string,\n    moveMediaRequestModel: MoveMediaRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/recycle-bin/document/${id}/restore`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: moveMediaRequestModel\n    },\n      options);\n    }\n  \nconst getRecycleBinDocumentChildren = (\n    params?: GetRecycleBinDocumentChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentRecycleBinItemResponseModel>(\n      {url: `/umbraco/management/api/v1/recycle-bin/document/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getRecycleBinDocumentRoot = (\n    params?: GetRecycleBinDocumentRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentRecycleBinItemResponseModel>(\n      {url: `/umbraco/management/api/v1/recycle-bin/document/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDocumentAncestors = (\n    params?: GetTreeDocumentAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DocumentTreeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/tree/document/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDocumentChildren = (\n    params?: GetTreeDocumentChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/document/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeDocumentRoot = (\n    params?: GetTreeDocumentRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedDocumentTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/document/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postDynamicRootQuery = (\n    dynamicRootRequestModel: DynamicRootRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<DynamicRootResponseModel>(\n      {url: `/umbraco/management/api/v1/dynamic-root/query`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: dynamicRootRequestModel\n    },\n      options);\n    }\n  \nconst getDynamicRootSteps = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<string[]>(\n      {url: `/umbraco/management/api/v1/dynamic-root/steps`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getHealthCheckGroup = (\n    params?: GetHealthCheckGroupParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedHealthCheckGroupResponseModel>(\n      {url: `/umbraco/management/api/v1/health-check-group`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getHealthCheckGroupByName = (\n    name: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<HealthCheckGroupPresentationModel>(\n      {url: `/umbraco/management/api/v1/health-check-group/${name}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postHealthCheckGroupByNameCheck = (\n    name: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<HealthCheckGroupWithResultResponseModel>(\n      {url: `/umbraco/management/api/v1/health-check-group/${name}/check`, method: 'POST'\n    },\n      options);\n    }\n  \nconst postHealthCheckExecuteAction = (\n    healthCheckActionRequestModel: HealthCheckActionRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<HealthCheckResultResponseModel>(\n      {url: `/umbraco/management/api/v1/health-check/execute-action`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: healthCheckActionRequestModel\n    },\n      options);\n    }\n  \nconst getHelp = (\n    params?: GetHelpParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedHelpPageResponseModel>(\n      {url: `/umbraco/management/api/v1/help`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getImagingResizeUrls = (\n    params?: GetImagingResizeUrlsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaUrlInfoResponseModel[]>(\n      {url: `/umbraco/management/api/v1/imaging/resize/urls`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getImportAnalyze = (\n    params?: GetImportAnalyzeParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<EntityImportAnalysisResponseModel>(\n      {url: `/umbraco/management/api/v1/import/analyze`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getIndexer = (\n    params?: GetIndexerParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedIndexResponseModel>(\n      {url: `/umbraco/management/api/v1/indexer`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getIndexerByIndexName = (\n    indexName: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<IndexResponseModel>(\n      {url: `/umbraco/management/api/v1/indexer/${indexName}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postIndexerByIndexNameRebuild = (\n    indexName: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/indexer/${indexName}/rebuild`, method: 'POST'\n    },\n      options);\n    }\n  \nconst getInstallSettings = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<InstallSettingsResponseModel>(\n      {url: `/umbraco/management/api/v1/install/settings`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postInstallSetup = (\n    installRequestModel: InstallRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/install/setup`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: installRequestModel\n    },\n      options);\n    }\n  \nconst postInstallValidateDatabase = (\n    databaseInstallRequestModel: DatabaseInstallRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/install/validate-database`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: databaseInstallRequestModel\n    },\n      options);\n    }\n  \nconst getItemLanguage = (\n    params?: GetItemLanguageParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<LanguageItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/language`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemLanguageDefault = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<LanguageItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/language/default`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getLanguage = (\n    params?: GetLanguageParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedLanguageResponseModel>(\n      {url: `/umbraco/management/api/v1/language`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postLanguage = (\n    createLanguageRequestModel: CreateLanguageRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/language`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createLanguageRequestModel\n    },\n      options);\n    }\n  \nconst getLanguageByIsoCode = (\n    isoCode: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<LanguageResponseModel>(\n      {url: `/umbraco/management/api/v1/language/${isoCode}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteLanguageByIsoCode = (\n    isoCode: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/language/${isoCode}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putLanguageByIsoCode = (\n    isoCode: string,\n    updateLanguageRequestModel: UpdateLanguageRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/language/${isoCode}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateLanguageRequestModel\n    },\n      options);\n    }\n  \nconst getLogViewerLevel = (\n    params?: GetLogViewerLevelParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedLoggerResponseModel>(\n      {url: `/umbraco/management/api/v1/log-viewer/level`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getLogViewerLevelCount = (\n    params?: GetLogViewerLevelCountParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<LogLevelCountsReponseModel>(\n      {url: `/umbraco/management/api/v1/log-viewer/level-count`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getLogViewerLog = (\n    params?: GetLogViewerLogParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedLogMessageResponseModel>(\n      {url: `/umbraco/management/api/v1/log-viewer/log`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getLogViewerMessageTemplate = (\n    params?: GetLogViewerMessageTemplateParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedLogTemplateResponseModel>(\n      {url: `/umbraco/management/api/v1/log-viewer/message-template`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getLogViewerSavedSearch = (\n    params?: GetLogViewerSavedSearchParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedSavedLogSearchResponseModel>(\n      {url: `/umbraco/management/api/v1/log-viewer/saved-search`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postLogViewerSavedSearch = (\n    savedLogSearchRequestModel: SavedLogSearchRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/log-viewer/saved-search`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: savedLogSearchRequestModel\n    },\n      options);\n    }\n  \nconst getLogViewerSavedSearchByName = (\n    name: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<SavedLogSearchResponseModel>(\n      {url: `/umbraco/management/api/v1/log-viewer/saved-search/${name}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteLogViewerSavedSearchByName = (\n    name: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/log-viewer/saved-search/${name}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst getLogViewerValidateLogsSize = (\n    params?: GetLogViewerValidateLogsSizeParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/log-viewer/validate-logs-size`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getManifestManifest = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ManifestResponseModel[]>(\n      {url: `/umbraco/management/api/v1/manifest/manifest`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getManifestManifestPrivate = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ManifestResponseModel[]>(\n      {url: `/umbraco/management/api/v1/manifest/manifest/private`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getManifestManifestPublic = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ManifestResponseModel[]>(\n      {url: `/umbraco/management/api/v1/manifest/manifest/public`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getItemMediaType = (\n    params?: GetItemMediaTypeParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaTypeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/media-type`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemMediaTypeAllowed = (\n    params?: GetItemMediaTypeAllowedParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedModelMediaTypeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/media-type/allowed`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemMediaTypeFolders = (\n    params?: GetItemMediaTypeFoldersParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedModelMediaTypeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/media-type/folders`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemMediaTypeSearch = (\n    params?: GetItemMediaTypeSearchParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedModelMediaTypeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/media-type/search`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postMediaType = (\n    createMediaTypeRequestModel: CreateMediaTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media-type`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createMediaTypeRequestModel\n    },\n      options);\n    }\n  \nconst getMediaTypeById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaTypeResponseModel>(\n      {url: `/umbraco/management/api/v1/media-type/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteMediaTypeById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media-type/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putMediaTypeById = (\n    id: string,\n    updateMediaTypeRequestModel: UpdateMediaTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media-type/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateMediaTypeRequestModel\n    },\n      options);\n    }\n  \nconst getMediaTypeByIdAllowedChildren = (\n    id: string,\n    params?: GetMediaTypeByIdAllowedChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedAllowedMediaTypeModel>(\n      {url: `/umbraco/management/api/v1/media-type/${id}/allowed-children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getMediaTypeByIdCompositionReferences = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaTypeCompositionResponseModel[]>(\n      {url: `/umbraco/management/api/v1/media-type/${id}/composition-references`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postMediaTypeByIdCopy = (\n    id: string,\n    copyMediaTypeRequestModel: CopyMediaTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media-type/${id}/copy`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: copyMediaTypeRequestModel\n    },\n      options);\n    }\n  \nconst getMediaTypeByIdExport = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<Blob>(\n      {url: `/umbraco/management/api/v1/media-type/${id}/export`, method: 'GET',\n        responseType: 'blob'\n    },\n      options);\n    }\n  \nconst putMediaTypeByIdImport = (\n    id: string,\n    importMediaTypeRequestModel: ImportMediaTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media-type/${id}/import`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: importMediaTypeRequestModel\n    },\n      options);\n    }\n  \nconst putMediaTypeByIdMove = (\n    id: string,\n    moveMediaTypeRequestModel: MoveMediaTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media-type/${id}/move`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: moveMediaTypeRequestModel\n    },\n      options);\n    }\n  \nconst getMediaTypeAllowedAtRoot = (\n    params?: GetMediaTypeAllowedAtRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedAllowedMediaTypeModel>(\n      {url: `/umbraco/management/api/v1/media-type/allowed-at-root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postMediaTypeAvailableCompositions = (\n    mediaTypeCompositionRequestModel: MediaTypeCompositionRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<AvailableMediaTypeCompositionResponseModel[]>(\n      {url: `/umbraco/management/api/v1/media-type/available-compositions`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: mediaTypeCompositionRequestModel\n    },\n      options);\n    }\n  \nconst getMediaTypeConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaTypeConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/media-type/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postMediaTypeFolder = (\n    createFolderRequestModel: CreateFolderRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media-type/folder`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createFolderRequestModel\n    },\n      options);\n    }\n  \nconst getMediaTypeFolderById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<FolderResponseModel>(\n      {url: `/umbraco/management/api/v1/media-type/folder/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteMediaTypeFolderById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media-type/folder/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putMediaTypeFolderById = (\n    id: string,\n    updateFolderResponseModel: UpdateFolderResponseModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media-type/folder/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateFolderResponseModel\n    },\n      options);\n    }\n  \nconst postMediaTypeImport = (\n    importMediaTypeRequestModel: ImportMediaTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media-type/import`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: importMediaTypeRequestModel\n    },\n      options);\n    }\n  \nconst getTreeMediaTypeAncestors = (\n    params?: GetTreeMediaTypeAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaTypeTreeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/tree/media-type/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeMediaTypeChildren = (\n    params?: GetTreeMediaTypeChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedMediaTypeTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/media-type/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeMediaTypeRoot = (\n    params?: GetTreeMediaTypeRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedMediaTypeTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/media-type/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getCollectionMedia = (\n    params?: GetCollectionMediaParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedMediaCollectionResponseModel>(\n      {url: `/umbraco/management/api/v1/collection/media`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemMedia = (\n    params?: GetItemMediaParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/media`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemMediaSearch = (\n    params?: GetItemMediaSearchParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedModelMediaItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/media/search`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postMedia = (\n    createMediaRequestModel: CreateMediaRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createMediaRequestModel\n    },\n      options);\n    }\n  \nconst getMediaById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaResponseModel>(\n      {url: `/umbraco/management/api/v1/media/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteMediaById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putMediaById = (\n    id: string,\n    updateMediaRequestModel: UpdateMediaRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateMediaRequestModel\n    },\n      options);\n    }\n  \nconst getMediaByIdAuditLog = (\n    id: string,\n    params?: GetMediaByIdAuditLogParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedAuditLogResponseModel>(\n      {url: `/umbraco/management/api/v1/media/${id}/audit-log`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst putMediaByIdMove = (\n    id: string,\n    moveMediaRequestModel: MoveMediaRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media/${id}/move`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: moveMediaRequestModel\n    },\n      options);\n    }\n  \nconst putMediaByIdMoveToRecycleBin = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media/${id}/move-to-recycle-bin`, method: 'PUT'\n    },\n      options);\n    }\n  \nconst getMediaByIdReferencedBy = (\n    id: string,\n    params?: GetMediaByIdReferencedByParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedIReferenceResponseModel>(\n      {url: `/umbraco/management/api/v1/media/${id}/referenced-by`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getMediaByIdReferencedDescendants = (\n    id: string,\n    params?: GetMediaByIdReferencedDescendantsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedReferenceByIdModel>(\n      {url: `/umbraco/management/api/v1/media/${id}/referenced-descendants`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst putMediaByIdValidate = (\n    id: string,\n    updateMediaRequestModel: UpdateMediaRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media/${id}/validate`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateMediaRequestModel\n    },\n      options);\n    }\n  \nconst getMediaAreReferenced = (\n    params?: GetMediaAreReferencedParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedReferenceByIdModel>(\n      {url: `/umbraco/management/api/v1/media/are-referenced`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getMediaConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/media/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst putMediaSort = (\n    sortingRequestModel: SortingRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media/sort`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: sortingRequestModel\n    },\n      options);\n    }\n  \nconst getMediaUrls = (\n    params?: GetMediaUrlsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaUrlInfoResponseModel[]>(\n      {url: `/umbraco/management/api/v1/media/urls`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postMediaValidate = (\n    createMediaRequestModel: CreateMediaRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/media/validate`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createMediaRequestModel\n    },\n      options);\n    }\n  \nconst deleteRecycleBinMedia = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/recycle-bin/media`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst deleteRecycleBinMediaById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/recycle-bin/media/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst getRecycleBinMediaByIdOriginalParent = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ReferenceByIdModel>(\n      {url: `/umbraco/management/api/v1/recycle-bin/media/${id}/original-parent`, method: 'GET'\n    },\n      options);\n    }\n  \nconst putRecycleBinMediaByIdRestore = (\n    id: string,\n    moveMediaRequestModel: MoveMediaRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/recycle-bin/media/${id}/restore`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: moveMediaRequestModel\n    },\n      options);\n    }\n  \nconst getRecycleBinMediaChildren = (\n    params?: GetRecycleBinMediaChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedMediaRecycleBinItemResponseModel>(\n      {url: `/umbraco/management/api/v1/recycle-bin/media/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getRecycleBinMediaRoot = (\n    params?: GetRecycleBinMediaRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedMediaRecycleBinItemResponseModel>(\n      {url: `/umbraco/management/api/v1/recycle-bin/media/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeMediaAncestors = (\n    params?: GetTreeMediaAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MediaTreeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/tree/media/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeMediaChildren = (\n    params?: GetTreeMediaChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedMediaTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/media/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeMediaRoot = (\n    params?: GetTreeMediaRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedMediaTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/media/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemMemberGroup = (\n    params?: GetItemMemberGroupParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MemberGroupItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/member-group`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getMemberGroup = (\n    params?: GetMemberGroupParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedMemberGroupResponseModel>(\n      {url: `/umbraco/management/api/v1/member-group`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postMemberGroup = (\n    createMemberGroupRequestModel: CreateMemberGroupRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member-group`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createMemberGroupRequestModel\n    },\n      options);\n    }\n  \nconst getMemberGroupById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MemberGroupResponseModel>(\n      {url: `/umbraco/management/api/v1/member-group/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteMemberGroupById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member-group/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putMemberGroupById = (\n    id: string,\n    updateMemberGroupRequestModel: UpdateMemberGroupRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member-group/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateMemberGroupRequestModel\n    },\n      options);\n    }\n  \nconst getTreeMemberGroupRoot = (\n    params?: GetTreeMemberGroupRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedNamedEntityTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/member-group/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemMemberType = (\n    params?: GetItemMemberTypeParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MemberTypeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/member-type`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemMemberTypeSearch = (\n    params?: GetItemMemberTypeSearchParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedModelMemberTypeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/member-type/search`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postMemberType = (\n    createMemberTypeRequestModel: CreateMemberTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member-type`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createMemberTypeRequestModel\n    },\n      options);\n    }\n  \nconst getMemberTypeById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MemberTypeResponseModel>(\n      {url: `/umbraco/management/api/v1/member-type/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteMemberTypeById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member-type/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putMemberTypeById = (\n    id: string,\n    updateMemberTypeRequestModel: UpdateMemberTypeRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member-type/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateMemberTypeRequestModel\n    },\n      options);\n    }\n  \nconst getMemberTypeByIdCompositionReferences = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MemberTypeCompositionResponseModel[]>(\n      {url: `/umbraco/management/api/v1/member-type/${id}/composition-references`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postMemberTypeByIdCopy = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member-type/${id}/copy`, method: 'POST'\n    },\n      options);\n    }\n  \nconst postMemberTypeAvailableCompositions = (\n    memberTypeCompositionRequestModel: MemberTypeCompositionRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<AvailableMemberTypeCompositionResponseModel[]>(\n      {url: `/umbraco/management/api/v1/member-type/available-compositions`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: memberTypeCompositionRequestModel\n    },\n      options);\n    }\n  \nconst getMemberTypeConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MemberTypeConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/member-type/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getTreeMemberTypeRoot = (\n    params?: GetTreeMemberTypeRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedMemberTypeTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/member-type/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getFilterMember = (\n    params?: GetFilterMemberParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedMemberResponseModel>(\n      {url: `/umbraco/management/api/v1/filter/member`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemMember = (\n    params?: GetItemMemberParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MemberItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/member`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemMemberSearch = (\n    params?: GetItemMemberSearchParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedModelMemberItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/member/search`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postMember = (\n    createMemberRequestModel: CreateMemberRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createMemberRequestModel\n    },\n      options);\n    }\n  \nconst getMemberById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MemberResponseModel>(\n      {url: `/umbraco/management/api/v1/member/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteMemberById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putMemberById = (\n    id: string,\n    updateMemberRequestModel: UpdateMemberRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateMemberRequestModel\n    },\n      options);\n    }\n  \nconst putMemberByIdValidate = (\n    id: string,\n    updateMemberRequestModel: UpdateMemberRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member/${id}/validate`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateMemberRequestModel\n    },\n      options);\n    }\n  \nconst getMemberConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<MemberConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/member/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postMemberValidate = (\n    createMemberRequestModel: CreateMemberRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/member/validate`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createMemberRequestModel\n    },\n      options);\n    }\n  \nconst postModelsBuilderBuild = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/models-builder/build`, method: 'POST'\n    },\n      options);\n    }\n  \nconst getModelsBuilderDashboard = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ModelsBuilderResponseModel>(\n      {url: `/umbraco/management/api/v1/models-builder/dashboard`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getModelsBuilderStatus = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<OutOfDateStatusResponseModel>(\n      {url: `/umbraco/management/api/v1/models-builder/status`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getObjectTypes = (\n    params?: GetObjectTypesParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedObjectTypeResponseModel>(\n      {url: `/umbraco/management/api/v1/object-types`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getOembedQuery = (\n    params?: GetOembedQueryParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<OEmbedResponseModel>(\n      {url: `/umbraco/management/api/v1/oembed/query`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postPackageByNameRunMigration = (\n    name: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/package/${name}/run-migration`, method: 'POST'\n    },\n      options);\n    }\n  \nconst getPackageConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PackageConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/package/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getPackageCreated = (\n    params?: GetPackageCreatedParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedPackageDefinitionResponseModel>(\n      {url: `/umbraco/management/api/v1/package/created`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postPackageCreated = (\n    createPackageRequestModel: CreatePackageRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/package/created`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createPackageRequestModel\n    },\n      options);\n    }\n  \nconst getPackageCreatedById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PackageDefinitionResponseModel>(\n      {url: `/umbraco/management/api/v1/package/created/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deletePackageCreatedById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/package/created/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putPackageCreatedById = (\n    id: string,\n    updatePackageRequestModel: NonReadonly<UpdatePackageRequestModel>,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/package/created/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updatePackageRequestModel\n    },\n      options);\n    }\n  \nconst getPackageCreatedByIdDownload = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<Blob>(\n      {url: `/umbraco/management/api/v1/package/created/${id}/download`, method: 'GET',\n        responseType: 'blob'\n    },\n      options);\n    }\n  \nconst getPackageMigrationStatus = (\n    params?: GetPackageMigrationStatusParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedPackageMigrationStatusResponseModel>(\n      {url: `/umbraco/management/api/v1/package/migration-status`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemPartialView = (\n    params?: GetItemPartialViewParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PartialViewItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/partial-view`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postPartialView = (\n    createPartialViewRequestModel: CreatePartialViewRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/partial-view`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createPartialViewRequestModel\n    },\n      options);\n    }\n  \nconst getPartialViewByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PartialViewResponseModel>(\n      {url: `/umbraco/management/api/v1/partial-view/${path}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deletePartialViewByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/partial-view/${path}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putPartialViewByPath = (\n    path: string,\n    updatePartialViewRequestModel: UpdatePartialViewRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/partial-view/${path}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updatePartialViewRequestModel\n    },\n      options);\n    }\n  \nconst putPartialViewByPathRename = (\n    path: string,\n    renamePartialViewRequestModel: RenamePartialViewRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/partial-view/${path}/rename`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: renamePartialViewRequestModel\n    },\n      options);\n    }\n  \nconst postPartialViewFolder = (\n    createPartialViewFolderRequestModel: CreatePartialViewFolderRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/partial-view/folder`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createPartialViewFolderRequestModel\n    },\n      options);\n    }\n  \nconst getPartialViewFolderByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PartialViewFolderResponseModel>(\n      {url: `/umbraco/management/api/v1/partial-view/folder/${path}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deletePartialViewFolderByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/partial-view/folder/${path}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst getPartialViewSnippet = (\n    params?: GetPartialViewSnippetParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedPartialViewSnippetItemResponseModel>(\n      {url: `/umbraco/management/api/v1/partial-view/snippet`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getPartialViewSnippetById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PartialViewSnippetResponseModel>(\n      {url: `/umbraco/management/api/v1/partial-view/snippet/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getTreePartialViewAncestors = (\n    params?: GetTreePartialViewAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<FileSystemTreeItemPresentationModel[]>(\n      {url: `/umbraco/management/api/v1/tree/partial-view/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreePartialViewChildren = (\n    params?: GetTreePartialViewChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedFileSystemTreeItemPresentationModel>(\n      {url: `/umbraco/management/api/v1/tree/partial-view/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreePartialViewRoot = (\n    params?: GetTreePartialViewRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedFileSystemTreeItemPresentationModel>(\n      {url: `/umbraco/management/api/v1/tree/partial-view/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst deletePreview = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/preview`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst postPreview = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/preview`, method: 'POST'\n    },\n      options);\n    }\n  \nconst getProfilingStatus = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ProfilingStatusResponseModel>(\n      {url: `/umbraco/management/api/v1/profiling/status`, method: 'GET'\n    },\n      options);\n    }\n  \nconst putProfilingStatus = (\n    profilingStatusRequestModel: ProfilingStatusRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/profiling/status`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: profilingStatusRequestModel\n    },\n      options);\n    }\n  \nconst getPropertyTypeIsUsed = (\n    params?: GetPropertyTypeIsUsedParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<boolean>(\n      {url: `/umbraco/management/api/v1/property-type/is-used`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \n/**\n * @deprecated\n */\nconst postPublishedCacheCollect = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<unknown>(\n      {url: `/umbraco/management/api/v1/published-cache/collect`, method: 'POST'\n    },\n      options);\n    }\n  \nconst postPublishedCacheRebuild = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/published-cache/rebuild`, method: 'POST'\n    },\n      options);\n    }\n  \nconst postPublishedCacheReload = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/published-cache/reload`, method: 'POST'\n    },\n      options);\n    }\n  \n/**\n * @deprecated\n */\nconst getPublishedCacheStatus = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<unknown>(\n      {url: `/umbraco/management/api/v1/published-cache/status`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getRedirectManagement = (\n    params?: GetRedirectManagementParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedRedirectUrlResponseModel>(\n      {url: `/umbraco/management/api/v1/redirect-management`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getRedirectManagementById = (\n    id: string,\n    params?: GetRedirectManagementByIdParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedRedirectUrlResponseModel>(\n      {url: `/umbraco/management/api/v1/redirect-management/${id}`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst deleteRedirectManagementById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/redirect-management/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst getRedirectManagementStatus = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<RedirectUrlStatusResponseModel>(\n      {url: `/umbraco/management/api/v1/redirect-management/status`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postRedirectManagementStatus = (\n    params?: PostRedirectManagementStatusParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/redirect-management/status`, method: 'POST',\n        params\n    },\n      options);\n    }\n  \nconst getItemRelationType = (\n    params?: GetItemRelationTypeParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<RelationTypeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/relation-type`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getRelationType = (\n    params?: GetRelationTypeParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedRelationTypeResponseModel>(\n      {url: `/umbraco/management/api/v1/relation-type`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getRelationTypeById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<RelationTypeResponseModel>(\n      {url: `/umbraco/management/api/v1/relation-type/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getRelationByRelationTypeId = (\n    id: string,\n    params?: GetRelationByRelationTypeIdParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedRelationResponseModel>(\n      {url: `/umbraco/management/api/v1/relation/type/${id}`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemScript = (\n    params?: GetItemScriptParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ScriptItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/script`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postScript = (\n    createScriptRequestModel: CreateScriptRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/script`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createScriptRequestModel\n    },\n      options);\n    }\n  \nconst getScriptByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ScriptResponseModel>(\n      {url: `/umbraco/management/api/v1/script/${path}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteScriptByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/script/${path}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putScriptByPath = (\n    path: string,\n    updateScriptRequestModel: UpdateScriptRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/script/${path}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateScriptRequestModel\n    },\n      options);\n    }\n  \nconst putScriptByPathRename = (\n    path: string,\n    renameScriptRequestModel: RenameScriptRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/script/${path}/rename`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: renameScriptRequestModel\n    },\n      options);\n    }\n  \nconst postScriptFolder = (\n    createScriptFolderRequestModel: CreateScriptFolderRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/script/folder`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createScriptFolderRequestModel\n    },\n      options);\n    }\n  \nconst getScriptFolderByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ScriptFolderResponseModel>(\n      {url: `/umbraco/management/api/v1/script/folder/${path}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteScriptFolderByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/script/folder/${path}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst getTreeScriptAncestors = (\n    params?: GetTreeScriptAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<FileSystemTreeItemPresentationModel[]>(\n      {url: `/umbraco/management/api/v1/tree/script/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeScriptChildren = (\n    params?: GetTreeScriptChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedFileSystemTreeItemPresentationModel>(\n      {url: `/umbraco/management/api/v1/tree/script/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeScriptRoot = (\n    params?: GetTreeScriptRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedFileSystemTreeItemPresentationModel>(\n      {url: `/umbraco/management/api/v1/tree/script/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getSearcher = (\n    params?: GetSearcherParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedSearcherResponseModel>(\n      {url: `/umbraco/management/api/v1/searcher`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getSearcherBySearcherNameQuery = (\n    searcherName: string,\n    params?: GetSearcherBySearcherNameQueryParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedSearchResultResponseModel>(\n      {url: `/umbraco/management/api/v1/searcher/${searcherName}/query`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getSecurityConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<SecurityConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/security/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postSecurityForgotPassword = (\n    resetPasswordRequestModel: ResetPasswordRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/security/forgot-password`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: resetPasswordRequestModel\n    },\n      options);\n    }\n  \nconst postSecurityForgotPasswordReset = (\n    resetPasswordTokenRequestModel: ResetPasswordTokenRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/security/forgot-password/reset`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: resetPasswordTokenRequestModel\n    },\n      options);\n    }\n  \nconst postSecurityForgotPasswordVerify = (\n    verifyResetPasswordTokenRequestModel: VerifyResetPasswordTokenRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<VerifyResetPasswordResponseModel>(\n      {url: `/umbraco/management/api/v1/security/forgot-password/verify`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: verifyResetPasswordTokenRequestModel\n    },\n      options);\n    }\n  \nconst getSegment = (\n    params?: GetSegmentParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedSegmentResponseModel>(\n      {url: `/umbraco/management/api/v1/segment`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getServerConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ServerConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/server/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getServerInformation = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ServerInformationResponseModel>(\n      {url: `/umbraco/management/api/v1/server/information`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getServerStatus = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ServerStatusResponseModel>(\n      {url: `/umbraco/management/api/v1/server/status`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getServerTroubleshooting = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ServerTroubleshootingResponseModel>(\n      {url: `/umbraco/management/api/v1/server/troubleshooting`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getServerUpgradeCheck = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UpgradeCheckResponseModel>(\n      {url: `/umbraco/management/api/v1/server/upgrade-check`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getItemStaticFile = (\n    params?: GetItemStaticFileParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<StaticFileItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/static-file`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeStaticFileAncestors = (\n    params?: GetTreeStaticFileAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<FileSystemTreeItemPresentationModel[]>(\n      {url: `/umbraco/management/api/v1/tree/static-file/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeStaticFileChildren = (\n    params?: GetTreeStaticFileChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedFileSystemTreeItemPresentationModel>(\n      {url: `/umbraco/management/api/v1/tree/static-file/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeStaticFileRoot = (\n    params?: GetTreeStaticFileRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedFileSystemTreeItemPresentationModel>(\n      {url: `/umbraco/management/api/v1/tree/static-file/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemStylesheet = (\n    params?: GetItemStylesheetParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<StylesheetItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/stylesheet`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postStylesheet = (\n    createStylesheetRequestModel: CreateStylesheetRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/stylesheet`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createStylesheetRequestModel\n    },\n      options);\n    }\n  \nconst getStylesheetByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<StylesheetResponseModel>(\n      {url: `/umbraco/management/api/v1/stylesheet/${path}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteStylesheetByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/stylesheet/${path}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putStylesheetByPath = (\n    path: string,\n    updateStylesheetRequestModel: UpdateStylesheetRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/stylesheet/${path}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateStylesheetRequestModel\n    },\n      options);\n    }\n  \nconst putStylesheetByPathRename = (\n    path: string,\n    renameStylesheetRequestModel: RenameStylesheetRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/stylesheet/${path}/rename`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: renameStylesheetRequestModel\n    },\n      options);\n    }\n  \nconst postStylesheetFolder = (\n    createStylesheetFolderRequestModel: CreateStylesheetFolderRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/stylesheet/folder`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createStylesheetFolderRequestModel\n    },\n      options);\n    }\n  \nconst getStylesheetFolderByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<StylesheetFolderResponseModel>(\n      {url: `/umbraco/management/api/v1/stylesheet/folder/${path}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteStylesheetFolderByPath = (\n    path: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/stylesheet/folder/${path}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst getTreeStylesheetAncestors = (\n    params?: GetTreeStylesheetAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<FileSystemTreeItemPresentationModel[]>(\n      {url: `/umbraco/management/api/v1/tree/stylesheet/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeStylesheetChildren = (\n    params?: GetTreeStylesheetChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedFileSystemTreeItemPresentationModel>(\n      {url: `/umbraco/management/api/v1/tree/stylesheet/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeStylesheetRoot = (\n    params?: GetTreeStylesheetRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedFileSystemTreeItemPresentationModel>(\n      {url: `/umbraco/management/api/v1/tree/stylesheet/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTag = (\n    params?: GetTagParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedTagResponseModel>(\n      {url: `/umbraco/management/api/v1/tag`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTelemetry = (\n    params?: GetTelemetryParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedTelemetryResponseModel>(\n      {url: `/umbraco/management/api/v1/telemetry`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTelemetryLevel = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<TelemetryResponseModel>(\n      {url: `/umbraco/management/api/v1/telemetry/level`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postTelemetryLevel = (\n    telemetryRequestModel: TelemetryRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/telemetry/level`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: telemetryRequestModel\n    },\n      options);\n    }\n  \nconst getItemTemplate = (\n    params?: GetItemTemplateParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<TemplateItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/template`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemTemplateSearch = (\n    params?: GetItemTemplateSearchParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedModelTemplateItemResponseModel>(\n      {url: `/umbraco/management/api/v1/item/template/search`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postTemplate = (\n    createTemplateRequestModel: CreateTemplateRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/template`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createTemplateRequestModel\n    },\n      options);\n    }\n  \nconst getTemplateById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<TemplateResponseModel>(\n      {url: `/umbraco/management/api/v1/template/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteTemplateById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/template/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putTemplateById = (\n    id: string,\n    updateTemplateRequestModel: UpdateTemplateRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/template/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateTemplateRequestModel\n    },\n      options);\n    }\n  \nconst getTemplateConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<TemplateConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/template/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postTemplateQueryExecute = (\n    templateQueryExecuteModel: TemplateQueryExecuteModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<TemplateQueryResultResponseModel>(\n      {url: `/umbraco/management/api/v1/template/query/execute`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: templateQueryExecuteModel\n    },\n      options);\n    }\n  \nconst getTemplateQuerySettings = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<TemplateQuerySettingsResponseModel>(\n      {url: `/umbraco/management/api/v1/template/query/settings`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getTreeTemplateAncestors = (\n    params?: GetTreeTemplateAncestorsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<NamedEntityTreeItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/tree/template/ancestors`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeTemplateChildren = (\n    params?: GetTreeTemplateChildrenParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedNamedEntityTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/template/children`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getTreeTemplateRoot = (\n    params?: GetTreeTemplateRootParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedNamedEntityTreeItemResponseModel>(\n      {url: `/umbraco/management/api/v1/tree/template/root`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postTemporaryFile = (\n    postTemporaryFileBody: PostTemporaryFileBody,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {const formData = new FormData();\nformData.append('Id', postTemporaryFileBody.Id)\nformData.append('File', postTemporaryFileBody.File)\n\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/temporary-file`, method: 'POST',\n      headers: {'Content-Type': 'multipart/form-data', },\n       data: formData\n    },\n      options);\n    }\n  \nconst getTemporaryFileById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<TemporaryFileResponseModel>(\n      {url: `/umbraco/management/api/v1/temporary-file/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteTemporaryFileById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/temporary-file/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst getTemporaryFileConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<TemporaryFileConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/temporary-file/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postUpgradeAuthorize = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/upgrade/authorize`, method: 'POST'\n    },\n      options);\n    }\n  \nconst getUpgradeSettings = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UpgradeSettingsResponseModel>(\n      {url: `/umbraco/management/api/v1/upgrade/settings`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postUserData = (\n    createUserDataRequestModel: CreateUserDataRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user-data`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createUserDataRequestModel\n    },\n      options);\n    }\n  \nconst getUserData = (\n    params?: GetUserDataParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedUserDataResponseModel>(\n      {url: `/umbraco/management/api/v1/user-data`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst putUserData = (\n    updateUserDataRequestModel: UpdateUserDataRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user-data`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateUserDataRequestModel\n    },\n      options);\n    }\n  \nconst getUserDataById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserDataModel>(\n      {url: `/umbraco/management/api/v1/user-data/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getFilterUserGroup = (\n    params?: GetFilterUserGroupParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedUserGroupResponseModel>(\n      {url: `/umbraco/management/api/v1/filter/user-group`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemUserGroup = (\n    params?: GetItemUserGroupParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserGroupItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/user-group`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst deleteUserGroup = (\n    deleteUserGroupsRequestModel: DeleteUserGroupsRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user-group`, method: 'DELETE',\n      headers: {'Content-Type': 'application/json', },\n      data: deleteUserGroupsRequestModel\n    },\n      options);\n    }\n  \nconst postUserGroup = (\n    createUserGroupRequestModel: CreateUserGroupRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user-group`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createUserGroupRequestModel\n    },\n      options);\n    }\n  \nconst getUserGroup = (\n    params?: GetUserGroupParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedUserGroupResponseModel>(\n      {url: `/umbraco/management/api/v1/user-group`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getUserGroupById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserGroupResponseModel>(\n      {url: `/umbraco/management/api/v1/user-group/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteUserGroupById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user-group/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putUserGroupById = (\n    id: string,\n    updateUserGroupRequestModel: UpdateUserGroupRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user-group/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateUserGroupRequestModel\n    },\n      options);\n    }\n  \nconst deleteUserGroupByIdUsers = (\n    id: string,\n    referenceByIdModel: ReferenceByIdModel[],\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user-group/${id}/users`, method: 'DELETE',\n      headers: {'Content-Type': 'application/json', },\n      data: referenceByIdModel\n    },\n      options);\n    }\n  \nconst postUserGroupByIdUsers = (\n    id: string,\n    referenceByIdModel: ReferenceByIdModel[],\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user-group/${id}/users`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: referenceByIdModel\n    },\n      options);\n    }\n  \nconst getFilterUser = (\n    params?: GetFilterUserParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedUserResponseModel>(\n      {url: `/umbraco/management/api/v1/filter/user`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getItemUser = (\n    params?: GetItemUserParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/user`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postUser = (\n    createUserRequestModel: CreateUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createUserRequestModel\n    },\n      options);\n    }\n  \nconst deleteUser = (\n    deleteUsersRequestModel: DeleteUsersRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user`, method: 'DELETE',\n      headers: {'Content-Type': 'application/json', },\n      data: deleteUsersRequestModel\n    },\n      options);\n    }\n  \nconst getUser = (\n    params?: GetUserParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedUserResponseModel>(\n      {url: `/umbraco/management/api/v1/user`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getUserById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserResponseModel>(\n      {url: `/umbraco/management/api/v1/user/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteUserById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putUserById = (\n    id: string,\n    updateUserRequestModel: UpdateUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateUserRequestModel\n    },\n      options);\n    }\n  \nconst getUserById2fa = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserTwoFactorProviderModel[]>(\n      {url: `/umbraco/management/api/v1/user/${id}/2fa`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteUserById2faByProviderName = (\n    id: string,\n    providerName: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/${id}/2fa/${providerName}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst getUserByIdCalculateStartNodes = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<CalculatedUserStartNodesResponseModel>(\n      {url: `/umbraco/management/api/v1/user/${id}/calculate-start-nodes`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postUserByIdChangePassword = (\n    id: string,\n    changePasswordUserRequestModel: ChangePasswordUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/${id}/change-password`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: changePasswordUserRequestModel\n    },\n      options);\n    }\n  \nconst postUserByIdClientCredentials = (\n    id: string,\n    createUserClientCredentialsRequestModel: CreateUserClientCredentialsRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/${id}/client-credentials`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createUserClientCredentialsRequestModel\n    },\n      options);\n    }\n  \nconst getUserByIdClientCredentials = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<string[]>(\n      {url: `/umbraco/management/api/v1/user/${id}/client-credentials`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteUserByIdClientCredentialsByClientId = (\n    id: string,\n    clientId: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/${id}/client-credentials/${clientId}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst postUserByIdResetPassword = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<ResetPasswordUserResponseModel>(\n      {url: `/umbraco/management/api/v1/user/${id}/reset-password`, method: 'POST'\n    },\n      options);\n    }\n  \nconst deleteUserAvatarById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/avatar/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst postUserAvatarById = (\n    id: string,\n    setAvatarRequestModel: SetAvatarRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/avatar/${id}`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: setAvatarRequestModel\n    },\n      options);\n    }\n  \nconst getUserConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/user/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getUserCurrent = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<CurrentUserResponseModel>(\n      {url: `/umbraco/management/api/v1/user/current`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getUserCurrent2fa = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserTwoFactorProviderModel[]>(\n      {url: `/umbraco/management/api/v1/user/current/2fa`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteUserCurrent2faByProviderName = (\n    providerName: string,\n    params?: DeleteUserCurrent2faByProviderNameParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/current/2fa/${providerName}`, method: 'DELETE',\n        params\n    },\n      options);\n    }\n  \nconst postUserCurrent2faByProviderName = (\n    providerName: string,\n    enableTwoFactorRequestModel: EnableTwoFactorRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<NoopSetupTwoFactorModel>(\n      {url: `/umbraco/management/api/v1/user/current/2fa/${providerName}`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: enableTwoFactorRequestModel\n    },\n      options);\n    }\n  \nconst getUserCurrent2faByProviderName = (\n    providerName: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<NoopSetupTwoFactorModel>(\n      {url: `/umbraco/management/api/v1/user/current/2fa/${providerName}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst postUserCurrentAvatar = (\n    setAvatarRequestModel: SetAvatarRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/current/avatar`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: setAvatarRequestModel\n    },\n      options);\n    }\n  \nconst postUserCurrentChangePassword = (\n    changePasswordCurrentUserRequestModel: ChangePasswordCurrentUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/current/change-password`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: changePasswordCurrentUserRequestModel\n    },\n      options);\n    }\n  \nconst getUserCurrentConfiguration = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<CurrenUserConfigurationResponseModel>(\n      {url: `/umbraco/management/api/v1/user/current/configuration`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getUserCurrentLoginProviders = (\n    \n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserExternalLoginProviderModel[]>(\n      {url: `/umbraco/management/api/v1/user/current/login-providers`, method: 'GET'\n    },\n      options);\n    }\n  \nconst getUserCurrentPermissions = (\n    params?: GetUserCurrentPermissionsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserPermissionsResponseModel>(\n      {url: `/umbraco/management/api/v1/user/current/permissions`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getUserCurrentPermissionsDocument = (\n    params?: GetUserCurrentPermissionsDocumentParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserPermissionsResponseModel[]>(\n      {url: `/umbraco/management/api/v1/user/current/permissions/document`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getUserCurrentPermissionsMedia = (\n    params?: GetUserCurrentPermissionsMediaParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<UserPermissionsResponseModel>(\n      {url: `/umbraco/management/api/v1/user/current/permissions/media`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postUserDisable = (\n    disableUserRequestModel: DisableUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/disable`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: disableUserRequestModel\n    },\n      options);\n    }\n  \nconst postUserEnable = (\n    enableUserRequestModel: EnableUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/enable`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: enableUserRequestModel\n    },\n      options);\n    }\n  \nconst postUserInvite = (\n    inviteUserRequestModel: InviteUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/invite`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: inviteUserRequestModel\n    },\n      options);\n    }\n  \nconst postUserInviteCreatePassword = (\n    createInitialPasswordUserRequestModel: CreateInitialPasswordUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/invite/create-password`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createInitialPasswordUserRequestModel\n    },\n      options);\n    }\n  \nconst postUserInviteResend = (\n    resendInviteUserRequestModel: ResendInviteUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/invite/resend`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: resendInviteUserRequestModel\n    },\n      options);\n    }\n  \nconst postUserInviteVerify = (\n    verifyInviteUserRequestModel: VerifyInviteUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<VerifyInviteUserResponseModel>(\n      {url: `/umbraco/management/api/v1/user/invite/verify`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: verifyInviteUserRequestModel\n    },\n      options);\n    }\n  \nconst postUserSetUserGroups = (\n    updateUserGroupsOnUserRequestModel: UpdateUserGroupsOnUserRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/set-user-groups`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: updateUserGroupsOnUserRequestModel\n    },\n      options);\n    }\n  \nconst postUserUnlock = (\n    unlockUsersRequestModel: UnlockUsersRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/user/unlock`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: unlockUsersRequestModel\n    },\n      options);\n    }\n  \nconst getItemWebhook = (\n    params?: GetItemWebhookParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<WebhookItemResponseModel[]>(\n      {url: `/umbraco/management/api/v1/item/webhook`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getWebhook = (\n    params?: GetWebhookParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedWebhookResponseModel>(\n      {url: `/umbraco/management/api/v1/webhook`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst postWebhook = (\n    createWebhookRequestModel: CreateWebhookRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/webhook`, method: 'POST',\n      headers: {'Content-Type': 'application/json', },\n      data: createWebhookRequestModel\n    },\n      options);\n    }\n  \nconst getWebhookById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<WebhookResponseModel>(\n      {url: `/umbraco/management/api/v1/webhook/${id}`, method: 'GET'\n    },\n      options);\n    }\n  \nconst deleteWebhookById = (\n    id: string,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/webhook/${id}`, method: 'DELETE'\n    },\n      options);\n    }\n  \nconst putWebhookById = (\n    id: string,\n    updateWebhookRequestModel: UpdateWebhookRequestModel,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<void>(\n      {url: `/umbraco/management/api/v1/webhook/${id}`, method: 'PUT',\n      headers: {'Content-Type': 'application/json', },\n      data: updateWebhookRequestModel\n    },\n      options);\n    }\n  \nconst getWebhookByIdLogs = (\n    id: string,\n    params?: GetWebhookByIdLogsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedWebhookLogResponseModel>(\n      {url: `/umbraco/management/api/v1/webhook/${id}/logs`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getWebhookEvents = (\n    params?: GetWebhookEventsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedWebhookEventModel>(\n      {url: `/umbraco/management/api/v1/webhook/events`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nconst getWebhookLogs = (\n    params?: GetWebhookLogsParams,\n options?: SecondParameter<typeof UmbracoManagementClient>,) => {\n      return UmbracoManagementClient<PagedWebhookLogResponseModel>(\n      {url: `/umbraco/management/api/v1/webhook/logs`, method: 'GET',\n        params\n    },\n      options);\n    }\n  \nreturn {getCulture,postDataType,getDataTypeById,deleteDataTypeById,putDataTypeById,postDataTypeByIdCopy,getDataTypeByIdIsUsed,putDataTypeByIdMove,getDataTypeByIdReferences,getDataTypeConfiguration,postDataTypeFolder,getDataTypeFolderById,deleteDataTypeFolderById,putDataTypeFolderById,getFilterDataType,getItemDataType,getItemDataTypeSearch,getTreeDataTypeAncestors,getTreeDataTypeChildren,getTreeDataTypeRoot,getDictionary,postDictionary,getDictionaryById,deleteDictionaryById,putDictionaryById,getDictionaryByIdExport,putDictionaryByIdMove,postDictionaryImport,getItemDictionary,getTreeDictionaryAncestors,getTreeDictionaryChildren,getTreeDictionaryRoot,postDocumentBlueprint,getDocumentBlueprintById,deleteDocumentBlueprintById,putDocumentBlueprintById,putDocumentBlueprintByIdMove,postDocumentBlueprintFolder,getDocumentBlueprintFolderById,deleteDocumentBlueprintFolderById,putDocumentBlueprintFolderById,postDocumentBlueprintFromDocument,getItemDocumentBlueprint,getTreeDocumentBlueprintAncestors,getTreeDocumentBlueprintChildren,getTreeDocumentBlueprintRoot,postDocumentType,getDocumentTypeById,deleteDocumentTypeById,putDocumentTypeById,getDocumentTypeByIdAllowedChildren,getDocumentTypeByIdBlueprint,getDocumentTypeByIdCompositionReferences,postDocumentTypeByIdCopy,getDocumentTypeByIdExport,putDocumentTypeByIdImport,putDocumentTypeByIdMove,getDocumentTypeAllowedAtRoot,postDocumentTypeAvailableCompositions,getDocumentTypeConfiguration,postDocumentTypeFolder,getDocumentTypeFolderById,deleteDocumentTypeFolderById,putDocumentTypeFolderById,postDocumentTypeImport,getItemDocumentType,getItemDocumentTypeSearch,getTreeDocumentTypeAncestors,getTreeDocumentTypeChildren,getTreeDocumentTypeRoot,getDocumentVersion,getDocumentVersionById,putDocumentVersionByIdPreventCleanup,postDocumentVersionByIdRollback,getCollectionDocumentById,postDocument,getDocumentById,deleteDocumentById,putDocumentById,getDocumentByIdAuditLog,postDocumentByIdCopy,getDocumentByIdDomains,putDocumentByIdDomains,putDocumentByIdMove,putDocumentByIdMoveToRecycleBin,getDocumentByIdNotifications,putDocumentByIdNotifications,postDocumentByIdPublicAccess,deleteDocumentByIdPublicAccess,getDocumentByIdPublicAccess,putDocumentByIdPublicAccess,putDocumentByIdPublish,putDocumentByIdPublishWithDescendants,getDocumentByIdPublished,getDocumentByIdReferencedBy,getDocumentByIdReferencedDescendants,putDocumentByIdUnpublish,putDocumentByIdValidate,putUmbracoManagementApiV11DocumentByIdValidate11,getDocumentAreReferenced,getDocumentConfiguration,putDocumentSort,getDocumentUrls,postDocumentValidate,getItemDocument,getItemDocumentSearch,deleteRecycleBinDocument,deleteRecycleBinDocumentById,getRecycleBinDocumentByIdOriginalParent,putRecycleBinDocumentByIdRestore,getRecycleBinDocumentChildren,getRecycleBinDocumentRoot,getTreeDocumentAncestors,getTreeDocumentChildren,getTreeDocumentRoot,postDynamicRootQuery,getDynamicRootSteps,getHealthCheckGroup,getHealthCheckGroupByName,postHealthCheckGroupByNameCheck,postHealthCheckExecuteAction,getHelp,getImagingResizeUrls,getImportAnalyze,getIndexer,getIndexerByIndexName,postIndexerByIndexNameRebuild,getInstallSettings,postInstallSetup,postInstallValidateDatabase,getItemLanguage,getItemLanguageDefault,getLanguage,postLanguage,getLanguageByIsoCode,deleteLanguageByIsoCode,putLanguageByIsoCode,getLogViewerLevel,getLogViewerLevelCount,getLogViewerLog,getLogViewerMessageTemplate,getLogViewerSavedSearch,postLogViewerSavedSearch,getLogViewerSavedSearchByName,deleteLogViewerSavedSearchByName,getLogViewerValidateLogsSize,getManifestManifest,getManifestManifestPrivate,getManifestManifestPublic,getItemMediaType,getItemMediaTypeAllowed,getItemMediaTypeFolders,getItemMediaTypeSearch,postMediaType,getMediaTypeById,deleteMediaTypeById,putMediaTypeById,getMediaTypeByIdAllowedChildren,getMediaTypeByIdCompositionReferences,postMediaTypeByIdCopy,getMediaTypeByIdExport,putMediaTypeByIdImport,putMediaTypeByIdMove,getMediaTypeAllowedAtRoot,postMediaTypeAvailableCompositions,getMediaTypeConfiguration,postMediaTypeFolder,getMediaTypeFolderById,deleteMediaTypeFolderById,putMediaTypeFolderById,postMediaTypeImport,getTreeMediaTypeAncestors,getTreeMediaTypeChildren,getTreeMediaTypeRoot,getCollectionMedia,getItemMedia,getItemMediaSearch,postMedia,getMediaById,deleteMediaById,putMediaById,getMediaByIdAuditLog,putMediaByIdMove,putMediaByIdMoveToRecycleBin,getMediaByIdReferencedBy,getMediaByIdReferencedDescendants,putMediaByIdValidate,getMediaAreReferenced,getMediaConfiguration,putMediaSort,getMediaUrls,postMediaValidate,deleteRecycleBinMedia,deleteRecycleBinMediaById,getRecycleBinMediaByIdOriginalParent,putRecycleBinMediaByIdRestore,getRecycleBinMediaChildren,getRecycleBinMediaRoot,getTreeMediaAncestors,getTreeMediaChildren,getTreeMediaRoot,getItemMemberGroup,getMemberGroup,postMemberGroup,getMemberGroupById,deleteMemberGroupById,putMemberGroupById,getTreeMemberGroupRoot,getItemMemberType,getItemMemberTypeSearch,postMemberType,getMemberTypeById,deleteMemberTypeById,putMemberTypeById,getMemberTypeByIdCompositionReferences,postMemberTypeByIdCopy,postMemberTypeAvailableCompositions,getMemberTypeConfiguration,getTreeMemberTypeRoot,getFilterMember,getItemMember,getItemMemberSearch,postMember,getMemberById,deleteMemberById,putMemberById,putMemberByIdValidate,getMemberConfiguration,postMemberValidate,postModelsBuilderBuild,getModelsBuilderDashboard,getModelsBuilderStatus,getObjectTypes,getOembedQuery,postPackageByNameRunMigration,getPackageConfiguration,getPackageCreated,postPackageCreated,getPackageCreatedById,deletePackageCreatedById,putPackageCreatedById,getPackageCreatedByIdDownload,getPackageMigrationStatus,getItemPartialView,postPartialView,getPartialViewByPath,deletePartialViewByPath,putPartialViewByPath,putPartialViewByPathRename,postPartialViewFolder,getPartialViewFolderByPath,deletePartialViewFolderByPath,getPartialViewSnippet,getPartialViewSnippetById,getTreePartialViewAncestors,getTreePartialViewChildren,getTreePartialViewRoot,deletePreview,postPreview,getProfilingStatus,putProfilingStatus,getPropertyTypeIsUsed,postPublishedCacheCollect,postPublishedCacheRebuild,postPublishedCacheReload,getPublishedCacheStatus,getRedirectManagement,getRedirectManagementById,deleteRedirectManagementById,getRedirectManagementStatus,postRedirectManagementStatus,getItemRelationType,getRelationType,getRelationTypeById,getRelationByRelationTypeId,getItemScript,postScript,getScriptByPath,deleteScriptByPath,putScriptByPath,putScriptByPathRename,postScriptFolder,getScriptFolderByPath,deleteScriptFolderByPath,getTreeScriptAncestors,getTreeScriptChildren,getTreeScriptRoot,getSearcher,getSearcherBySearcherNameQuery,getSecurityConfiguration,postSecurityForgotPassword,postSecurityForgotPasswordReset,postSecurityForgotPasswordVerify,getSegment,getServerConfiguration,getServerInformation,getServerStatus,getServerTroubleshooting,getServerUpgradeCheck,getItemStaticFile,getTreeStaticFileAncestors,getTreeStaticFileChildren,getTreeStaticFileRoot,getItemStylesheet,postStylesheet,getStylesheetByPath,deleteStylesheetByPath,putStylesheetByPath,putStylesheetByPathRename,postStylesheetFolder,getStylesheetFolderByPath,deleteStylesheetFolderByPath,getTreeStylesheetAncestors,getTreeStylesheetChildren,getTreeStylesheetRoot,getTag,getTelemetry,getTelemetryLevel,postTelemetryLevel,getItemTemplate,getItemTemplateSearch,postTemplate,getTemplateById,deleteTemplateById,putTemplateById,getTemplateConfiguration,postTemplateQueryExecute,getTemplateQuerySettings,getTreeTemplateAncestors,getTreeTemplateChildren,getTreeTemplateRoot,postTemporaryFile,getTemporaryFileById,deleteTemporaryFileById,getTemporaryFileConfiguration,postUpgradeAuthorize,getUpgradeSettings,postUserData,getUserData,putUserData,getUserDataById,getFilterUserGroup,getItemUserGroup,deleteUserGroup,postUserGroup,getUserGroup,getUserGroupById,deleteUserGroupById,putUserGroupById,deleteUserGroupByIdUsers,postUserGroupByIdUsers,getFilterUser,getItemUser,postUser,deleteUser,getUser,getUserById,deleteUserById,putUserById,getUserById2fa,deleteUserById2faByProviderName,getUserByIdCalculateStartNodes,postUserByIdChangePassword,postUserByIdClientCredentials,getUserByIdClientCredentials,deleteUserByIdClientCredentialsByClientId,postUserByIdResetPassword,deleteUserAvatarById,postUserAvatarById,getUserConfiguration,getUserCurrent,getUserCurrent2fa,deleteUserCurrent2faByProviderName,postUserCurrent2faByProviderName,getUserCurrent2faByProviderName,postUserCurrentAvatar,postUserCurrentChangePassword,getUserCurrentConfiguration,getUserCurrentLoginProviders,getUserCurrentPermissions,getUserCurrentPermissionsDocument,getUserCurrentPermissionsMedia,postUserDisable,postUserEnable,postUserInvite,postUserInviteCreatePassword,postUserInviteResend,postUserInviteVerify,postUserSetUserGroups,postUserUnlock,getItemWebhook,getWebhook,postWebhook,getWebhookById,deleteWebhookById,putWebhookById,getWebhookByIdLogs,getWebhookEvents,getWebhookLogs}};\nexport type GetCultureResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getCulture']>>>\nexport type PostDataTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDataType']>>>\nexport type GetDataTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDataTypeById']>>>\nexport type DeleteDataTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteDataTypeById']>>>\nexport type PutDataTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDataTypeById']>>>\nexport type PostDataTypeByIdCopyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDataTypeByIdCopy']>>>\nexport type GetDataTypeByIdIsUsedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDataTypeByIdIsUsed']>>>\nexport type PutDataTypeByIdMoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDataTypeByIdMove']>>>\nexport type GetDataTypeByIdReferencesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDataTypeByIdReferences']>>>\nexport type GetDataTypeConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDataTypeConfiguration']>>>\nexport type PostDataTypeFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDataTypeFolder']>>>\nexport type GetDataTypeFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDataTypeFolderById']>>>\nexport type DeleteDataTypeFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteDataTypeFolderById']>>>\nexport type PutDataTypeFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDataTypeFolderById']>>>\nexport type GetFilterDataTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getFilterDataType']>>>\nexport type GetItemDataTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemDataType']>>>\nexport type GetItemDataTypeSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemDataTypeSearch']>>>\nexport type GetTreeDataTypeAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDataTypeAncestors']>>>\nexport type GetTreeDataTypeChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDataTypeChildren']>>>\nexport type GetTreeDataTypeRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDataTypeRoot']>>>\nexport type GetDictionaryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDictionary']>>>\nexport type PostDictionaryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDictionary']>>>\nexport type GetDictionaryByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDictionaryById']>>>\nexport type DeleteDictionaryByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteDictionaryById']>>>\nexport type PutDictionaryByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDictionaryById']>>>\nexport type GetDictionaryByIdExportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDictionaryByIdExport']>>>\nexport type PutDictionaryByIdMoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDictionaryByIdMove']>>>\nexport type PostDictionaryImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDictionaryImport']>>>\nexport type GetItemDictionaryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemDictionary']>>>\nexport type GetTreeDictionaryAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDictionaryAncestors']>>>\nexport type GetTreeDictionaryChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDictionaryChildren']>>>\nexport type GetTreeDictionaryRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDictionaryRoot']>>>\nexport type PostDocumentBlueprintResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentBlueprint']>>>\nexport type GetDocumentBlueprintByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentBlueprintById']>>>\nexport type DeleteDocumentBlueprintByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteDocumentBlueprintById']>>>\nexport type PutDocumentBlueprintByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentBlueprintById']>>>\nexport type PutDocumentBlueprintByIdMoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentBlueprintByIdMove']>>>\nexport type PostDocumentBlueprintFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentBlueprintFolder']>>>\nexport type GetDocumentBlueprintFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentBlueprintFolderById']>>>\nexport type DeleteDocumentBlueprintFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteDocumentBlueprintFolderById']>>>\nexport type PutDocumentBlueprintFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentBlueprintFolderById']>>>\nexport type PostDocumentBlueprintFromDocumentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentBlueprintFromDocument']>>>\nexport type GetItemDocumentBlueprintResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemDocumentBlueprint']>>>\nexport type GetTreeDocumentBlueprintAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDocumentBlueprintAncestors']>>>\nexport type GetTreeDocumentBlueprintChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDocumentBlueprintChildren']>>>\nexport type GetTreeDocumentBlueprintRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDocumentBlueprintRoot']>>>\nexport type PostDocumentTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentType']>>>\nexport type GetDocumentTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentTypeById']>>>\nexport type DeleteDocumentTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteDocumentTypeById']>>>\nexport type PutDocumentTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentTypeById']>>>\nexport type GetDocumentTypeByIdAllowedChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentTypeByIdAllowedChildren']>>>\nexport type GetDocumentTypeByIdBlueprintResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentTypeByIdBlueprint']>>>\nexport type GetDocumentTypeByIdCompositionReferencesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentTypeByIdCompositionReferences']>>>\nexport type PostDocumentTypeByIdCopyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentTypeByIdCopy']>>>\nexport type GetDocumentTypeByIdExportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentTypeByIdExport']>>>\nexport type PutDocumentTypeByIdImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentTypeByIdImport']>>>\nexport type PutDocumentTypeByIdMoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentTypeByIdMove']>>>\nexport type GetDocumentTypeAllowedAtRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentTypeAllowedAtRoot']>>>\nexport type PostDocumentTypeAvailableCompositionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentTypeAvailableCompositions']>>>\nexport type GetDocumentTypeConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentTypeConfiguration']>>>\nexport type PostDocumentTypeFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentTypeFolder']>>>\nexport type GetDocumentTypeFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentTypeFolderById']>>>\nexport type DeleteDocumentTypeFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteDocumentTypeFolderById']>>>\nexport type PutDocumentTypeFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentTypeFolderById']>>>\nexport type PostDocumentTypeImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentTypeImport']>>>\nexport type GetItemDocumentTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemDocumentType']>>>\nexport type GetItemDocumentTypeSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemDocumentTypeSearch']>>>\nexport type GetTreeDocumentTypeAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDocumentTypeAncestors']>>>\nexport type GetTreeDocumentTypeChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDocumentTypeChildren']>>>\nexport type GetTreeDocumentTypeRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDocumentTypeRoot']>>>\nexport type GetDocumentVersionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentVersion']>>>\nexport type GetDocumentVersionByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentVersionById']>>>\nexport type PutDocumentVersionByIdPreventCleanupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentVersionByIdPreventCleanup']>>>\nexport type PostDocumentVersionByIdRollbackResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentVersionByIdRollback']>>>\nexport type GetCollectionDocumentByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getCollectionDocumentById']>>>\nexport type PostDocumentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocument']>>>\nexport type GetDocumentByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentById']>>>\nexport type DeleteDocumentByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteDocumentById']>>>\nexport type PutDocumentByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentById']>>>\nexport type GetDocumentByIdAuditLogResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentByIdAuditLog']>>>\nexport type PostDocumentByIdCopyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentByIdCopy']>>>\nexport type GetDocumentByIdDomainsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentByIdDomains']>>>\nexport type PutDocumentByIdDomainsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentByIdDomains']>>>\nexport type PutDocumentByIdMoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentByIdMove']>>>\nexport type PutDocumentByIdMoveToRecycleBinResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentByIdMoveToRecycleBin']>>>\nexport type GetDocumentByIdNotificationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentByIdNotifications']>>>\nexport type PutDocumentByIdNotificationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentByIdNotifications']>>>\nexport type PostDocumentByIdPublicAccessResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentByIdPublicAccess']>>>\nexport type DeleteDocumentByIdPublicAccessResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteDocumentByIdPublicAccess']>>>\nexport type GetDocumentByIdPublicAccessResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentByIdPublicAccess']>>>\nexport type PutDocumentByIdPublicAccessResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentByIdPublicAccess']>>>\nexport type PutDocumentByIdPublishResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentByIdPublish']>>>\nexport type PutDocumentByIdPublishWithDescendantsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentByIdPublishWithDescendants']>>>\nexport type GetDocumentByIdPublishedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentByIdPublished']>>>\nexport type GetDocumentByIdReferencedByResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentByIdReferencedBy']>>>\nexport type GetDocumentByIdReferencedDescendantsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentByIdReferencedDescendants']>>>\nexport type PutDocumentByIdUnpublishResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentByIdUnpublish']>>>\nexport type PutDocumentByIdValidateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentByIdValidate']>>>\nexport type PutUmbracoManagementApiV11DocumentByIdValidate11Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putUmbracoManagementApiV11DocumentByIdValidate11']>>>\nexport type GetDocumentAreReferencedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentAreReferenced']>>>\nexport type GetDocumentConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentConfiguration']>>>\nexport type PutDocumentSortResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putDocumentSort']>>>\nexport type GetDocumentUrlsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDocumentUrls']>>>\nexport type PostDocumentValidateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDocumentValidate']>>>\nexport type GetItemDocumentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemDocument']>>>\nexport type GetItemDocumentSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemDocumentSearch']>>>\nexport type DeleteRecycleBinDocumentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteRecycleBinDocument']>>>\nexport type DeleteRecycleBinDocumentByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteRecycleBinDocumentById']>>>\nexport type GetRecycleBinDocumentByIdOriginalParentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRecycleBinDocumentByIdOriginalParent']>>>\nexport type PutRecycleBinDocumentByIdRestoreResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putRecycleBinDocumentByIdRestore']>>>\nexport type GetRecycleBinDocumentChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRecycleBinDocumentChildren']>>>\nexport type GetRecycleBinDocumentRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRecycleBinDocumentRoot']>>>\nexport type GetTreeDocumentAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDocumentAncestors']>>>\nexport type GetTreeDocumentChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDocumentChildren']>>>\nexport type GetTreeDocumentRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeDocumentRoot']>>>\nexport type PostDynamicRootQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postDynamicRootQuery']>>>\nexport type GetDynamicRootStepsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getDynamicRootSteps']>>>\nexport type GetHealthCheckGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getHealthCheckGroup']>>>\nexport type GetHealthCheckGroupByNameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getHealthCheckGroupByName']>>>\nexport type PostHealthCheckGroupByNameCheckResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postHealthCheckGroupByNameCheck']>>>\nexport type PostHealthCheckExecuteActionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postHealthCheckExecuteAction']>>>\nexport type GetHelpResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getHelp']>>>\nexport type GetImagingResizeUrlsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getImagingResizeUrls']>>>\nexport type GetImportAnalyzeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getImportAnalyze']>>>\nexport type GetIndexerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getIndexer']>>>\nexport type GetIndexerByIndexNameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getIndexerByIndexName']>>>\nexport type PostIndexerByIndexNameRebuildResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postIndexerByIndexNameRebuild']>>>\nexport type GetInstallSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getInstallSettings']>>>\nexport type PostInstallSetupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postInstallSetup']>>>\nexport type PostInstallValidateDatabaseResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postInstallValidateDatabase']>>>\nexport type GetItemLanguageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemLanguage']>>>\nexport type GetItemLanguageDefaultResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemLanguageDefault']>>>\nexport type GetLanguageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getLanguage']>>>\nexport type PostLanguageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postLanguage']>>>\nexport type GetLanguageByIsoCodeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getLanguageByIsoCode']>>>\nexport type DeleteLanguageByIsoCodeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteLanguageByIsoCode']>>>\nexport type PutLanguageByIsoCodeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putLanguageByIsoCode']>>>\nexport type GetLogViewerLevelResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getLogViewerLevel']>>>\nexport type GetLogViewerLevelCountResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getLogViewerLevelCount']>>>\nexport type GetLogViewerLogResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getLogViewerLog']>>>\nexport type GetLogViewerMessageTemplateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getLogViewerMessageTemplate']>>>\nexport type GetLogViewerSavedSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getLogViewerSavedSearch']>>>\nexport type PostLogViewerSavedSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postLogViewerSavedSearch']>>>\nexport type GetLogViewerSavedSearchByNameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getLogViewerSavedSearchByName']>>>\nexport type DeleteLogViewerSavedSearchByNameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteLogViewerSavedSearchByName']>>>\nexport type GetLogViewerValidateLogsSizeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getLogViewerValidateLogsSize']>>>\nexport type GetManifestManifestResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getManifestManifest']>>>\nexport type GetManifestManifestPrivateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getManifestManifestPrivate']>>>\nexport type GetManifestManifestPublicResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getManifestManifestPublic']>>>\nexport type GetItemMediaTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMediaType']>>>\nexport type GetItemMediaTypeAllowedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMediaTypeAllowed']>>>\nexport type GetItemMediaTypeFoldersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMediaTypeFolders']>>>\nexport type GetItemMediaTypeSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMediaTypeSearch']>>>\nexport type PostMediaTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMediaType']>>>\nexport type GetMediaTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaTypeById']>>>\nexport type DeleteMediaTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteMediaTypeById']>>>\nexport type PutMediaTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMediaTypeById']>>>\nexport type GetMediaTypeByIdAllowedChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaTypeByIdAllowedChildren']>>>\nexport type GetMediaTypeByIdCompositionReferencesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaTypeByIdCompositionReferences']>>>\nexport type PostMediaTypeByIdCopyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMediaTypeByIdCopy']>>>\nexport type GetMediaTypeByIdExportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaTypeByIdExport']>>>\nexport type PutMediaTypeByIdImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMediaTypeByIdImport']>>>\nexport type PutMediaTypeByIdMoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMediaTypeByIdMove']>>>\nexport type GetMediaTypeAllowedAtRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaTypeAllowedAtRoot']>>>\nexport type PostMediaTypeAvailableCompositionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMediaTypeAvailableCompositions']>>>\nexport type GetMediaTypeConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaTypeConfiguration']>>>\nexport type PostMediaTypeFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMediaTypeFolder']>>>\nexport type GetMediaTypeFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaTypeFolderById']>>>\nexport type DeleteMediaTypeFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteMediaTypeFolderById']>>>\nexport type PutMediaTypeFolderByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMediaTypeFolderById']>>>\nexport type PostMediaTypeImportResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMediaTypeImport']>>>\nexport type GetTreeMediaTypeAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeMediaTypeAncestors']>>>\nexport type GetTreeMediaTypeChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeMediaTypeChildren']>>>\nexport type GetTreeMediaTypeRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeMediaTypeRoot']>>>\nexport type GetCollectionMediaResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getCollectionMedia']>>>\nexport type GetItemMediaResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMedia']>>>\nexport type GetItemMediaSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMediaSearch']>>>\nexport type PostMediaResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMedia']>>>\nexport type GetMediaByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaById']>>>\nexport type DeleteMediaByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteMediaById']>>>\nexport type PutMediaByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMediaById']>>>\nexport type GetMediaByIdAuditLogResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaByIdAuditLog']>>>\nexport type PutMediaByIdMoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMediaByIdMove']>>>\nexport type PutMediaByIdMoveToRecycleBinResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMediaByIdMoveToRecycleBin']>>>\nexport type GetMediaByIdReferencedByResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaByIdReferencedBy']>>>\nexport type GetMediaByIdReferencedDescendantsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaByIdReferencedDescendants']>>>\nexport type PutMediaByIdValidateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMediaByIdValidate']>>>\nexport type GetMediaAreReferencedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaAreReferenced']>>>\nexport type GetMediaConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaConfiguration']>>>\nexport type PutMediaSortResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMediaSort']>>>\nexport type GetMediaUrlsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMediaUrls']>>>\nexport type PostMediaValidateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMediaValidate']>>>\nexport type DeleteRecycleBinMediaResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteRecycleBinMedia']>>>\nexport type DeleteRecycleBinMediaByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteRecycleBinMediaById']>>>\nexport type GetRecycleBinMediaByIdOriginalParentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRecycleBinMediaByIdOriginalParent']>>>\nexport type PutRecycleBinMediaByIdRestoreResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putRecycleBinMediaByIdRestore']>>>\nexport type GetRecycleBinMediaChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRecycleBinMediaChildren']>>>\nexport type GetRecycleBinMediaRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRecycleBinMediaRoot']>>>\nexport type GetTreeMediaAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeMediaAncestors']>>>\nexport type GetTreeMediaChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeMediaChildren']>>>\nexport type GetTreeMediaRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeMediaRoot']>>>\nexport type GetItemMemberGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMemberGroup']>>>\nexport type GetMemberGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMemberGroup']>>>\nexport type PostMemberGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMemberGroup']>>>\nexport type GetMemberGroupByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMemberGroupById']>>>\nexport type DeleteMemberGroupByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteMemberGroupById']>>>\nexport type PutMemberGroupByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMemberGroupById']>>>\nexport type GetTreeMemberGroupRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeMemberGroupRoot']>>>\nexport type GetItemMemberTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMemberType']>>>\nexport type GetItemMemberTypeSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMemberTypeSearch']>>>\nexport type PostMemberTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMemberType']>>>\nexport type GetMemberTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMemberTypeById']>>>\nexport type DeleteMemberTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteMemberTypeById']>>>\nexport type PutMemberTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMemberTypeById']>>>\nexport type GetMemberTypeByIdCompositionReferencesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMemberTypeByIdCompositionReferences']>>>\nexport type PostMemberTypeByIdCopyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMemberTypeByIdCopy']>>>\nexport type PostMemberTypeAvailableCompositionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMemberTypeAvailableCompositions']>>>\nexport type GetMemberTypeConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMemberTypeConfiguration']>>>\nexport type GetTreeMemberTypeRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeMemberTypeRoot']>>>\nexport type GetFilterMemberResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getFilterMember']>>>\nexport type GetItemMemberResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMember']>>>\nexport type GetItemMemberSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemMemberSearch']>>>\nexport type PostMemberResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMember']>>>\nexport type GetMemberByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMemberById']>>>\nexport type DeleteMemberByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteMemberById']>>>\nexport type PutMemberByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMemberById']>>>\nexport type PutMemberByIdValidateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putMemberByIdValidate']>>>\nexport type GetMemberConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getMemberConfiguration']>>>\nexport type PostMemberValidateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postMemberValidate']>>>\nexport type PostModelsBuilderBuildResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postModelsBuilderBuild']>>>\nexport type GetModelsBuilderDashboardResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getModelsBuilderDashboard']>>>\nexport type GetModelsBuilderStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getModelsBuilderStatus']>>>\nexport type GetObjectTypesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getObjectTypes']>>>\nexport type GetOembedQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getOembedQuery']>>>\nexport type PostPackageByNameRunMigrationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postPackageByNameRunMigration']>>>\nexport type GetPackageConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPackageConfiguration']>>>\nexport type GetPackageCreatedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPackageCreated']>>>\nexport type PostPackageCreatedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postPackageCreated']>>>\nexport type GetPackageCreatedByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPackageCreatedById']>>>\nexport type DeletePackageCreatedByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deletePackageCreatedById']>>>\nexport type PutPackageCreatedByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putPackageCreatedById']>>>\nexport type GetPackageCreatedByIdDownloadResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPackageCreatedByIdDownload']>>>\nexport type GetPackageMigrationStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPackageMigrationStatus']>>>\nexport type GetItemPartialViewResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemPartialView']>>>\nexport type PostPartialViewResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postPartialView']>>>\nexport type GetPartialViewByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPartialViewByPath']>>>\nexport type DeletePartialViewByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deletePartialViewByPath']>>>\nexport type PutPartialViewByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putPartialViewByPath']>>>\nexport type PutPartialViewByPathRenameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putPartialViewByPathRename']>>>\nexport type PostPartialViewFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postPartialViewFolder']>>>\nexport type GetPartialViewFolderByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPartialViewFolderByPath']>>>\nexport type DeletePartialViewFolderByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deletePartialViewFolderByPath']>>>\nexport type GetPartialViewSnippetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPartialViewSnippet']>>>\nexport type GetPartialViewSnippetByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPartialViewSnippetById']>>>\nexport type GetTreePartialViewAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreePartialViewAncestors']>>>\nexport type GetTreePartialViewChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreePartialViewChildren']>>>\nexport type GetTreePartialViewRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreePartialViewRoot']>>>\nexport type DeletePreviewResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deletePreview']>>>\nexport type PostPreviewResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postPreview']>>>\nexport type GetProfilingStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getProfilingStatus']>>>\nexport type PutProfilingStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putProfilingStatus']>>>\nexport type GetPropertyTypeIsUsedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPropertyTypeIsUsed']>>>\nexport type PostPublishedCacheCollectResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postPublishedCacheCollect']>>>\nexport type PostPublishedCacheRebuildResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postPublishedCacheRebuild']>>>\nexport type PostPublishedCacheReloadResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postPublishedCacheReload']>>>\nexport type GetPublishedCacheStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getPublishedCacheStatus']>>>\nexport type GetRedirectManagementResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRedirectManagement']>>>\nexport type GetRedirectManagementByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRedirectManagementById']>>>\nexport type DeleteRedirectManagementByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteRedirectManagementById']>>>\nexport type GetRedirectManagementStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRedirectManagementStatus']>>>\nexport type PostRedirectManagementStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postRedirectManagementStatus']>>>\nexport type GetItemRelationTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemRelationType']>>>\nexport type GetRelationTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRelationType']>>>\nexport type GetRelationTypeByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRelationTypeById']>>>\nexport type GetRelationByRelationTypeIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getRelationByRelationTypeId']>>>\nexport type GetItemScriptResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemScript']>>>\nexport type PostScriptResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postScript']>>>\nexport type GetScriptByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getScriptByPath']>>>\nexport type DeleteScriptByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteScriptByPath']>>>\nexport type PutScriptByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putScriptByPath']>>>\nexport type PutScriptByPathRenameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putScriptByPathRename']>>>\nexport type PostScriptFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postScriptFolder']>>>\nexport type GetScriptFolderByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getScriptFolderByPath']>>>\nexport type DeleteScriptFolderByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteScriptFolderByPath']>>>\nexport type GetTreeScriptAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeScriptAncestors']>>>\nexport type GetTreeScriptChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeScriptChildren']>>>\nexport type GetTreeScriptRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeScriptRoot']>>>\nexport type GetSearcherResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getSearcher']>>>\nexport type GetSearcherBySearcherNameQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getSearcherBySearcherNameQuery']>>>\nexport type GetSecurityConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getSecurityConfiguration']>>>\nexport type PostSecurityForgotPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postSecurityForgotPassword']>>>\nexport type PostSecurityForgotPasswordResetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postSecurityForgotPasswordReset']>>>\nexport type PostSecurityForgotPasswordVerifyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postSecurityForgotPasswordVerify']>>>\nexport type GetSegmentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getSegment']>>>\nexport type GetServerConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getServerConfiguration']>>>\nexport type GetServerInformationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getServerInformation']>>>\nexport type GetServerStatusResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getServerStatus']>>>\nexport type GetServerTroubleshootingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getServerTroubleshooting']>>>\nexport type GetServerUpgradeCheckResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getServerUpgradeCheck']>>>\nexport type GetItemStaticFileResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemStaticFile']>>>\nexport type GetTreeStaticFileAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeStaticFileAncestors']>>>\nexport type GetTreeStaticFileChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeStaticFileChildren']>>>\nexport type GetTreeStaticFileRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeStaticFileRoot']>>>\nexport type GetItemStylesheetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemStylesheet']>>>\nexport type PostStylesheetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postStylesheet']>>>\nexport type GetStylesheetByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getStylesheetByPath']>>>\nexport type DeleteStylesheetByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteStylesheetByPath']>>>\nexport type PutStylesheetByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putStylesheetByPath']>>>\nexport type PutStylesheetByPathRenameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putStylesheetByPathRename']>>>\nexport type PostStylesheetFolderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postStylesheetFolder']>>>\nexport type GetStylesheetFolderByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getStylesheetFolderByPath']>>>\nexport type DeleteStylesheetFolderByPathResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteStylesheetFolderByPath']>>>\nexport type GetTreeStylesheetAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeStylesheetAncestors']>>>\nexport type GetTreeStylesheetChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeStylesheetChildren']>>>\nexport type GetTreeStylesheetRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeStylesheetRoot']>>>\nexport type GetTagResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTag']>>>\nexport type GetTelemetryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTelemetry']>>>\nexport type GetTelemetryLevelResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTelemetryLevel']>>>\nexport type PostTelemetryLevelResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postTelemetryLevel']>>>\nexport type GetItemTemplateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemTemplate']>>>\nexport type GetItemTemplateSearchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemTemplateSearch']>>>\nexport type PostTemplateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postTemplate']>>>\nexport type GetTemplateByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTemplateById']>>>\nexport type DeleteTemplateByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteTemplateById']>>>\nexport type PutTemplateByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putTemplateById']>>>\nexport type GetTemplateConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTemplateConfiguration']>>>\nexport type PostTemplateQueryExecuteResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postTemplateQueryExecute']>>>\nexport type GetTemplateQuerySettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTemplateQuerySettings']>>>\nexport type GetTreeTemplateAncestorsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeTemplateAncestors']>>>\nexport type GetTreeTemplateChildrenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeTemplateChildren']>>>\nexport type GetTreeTemplateRootResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTreeTemplateRoot']>>>\nexport type PostTemporaryFileResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postTemporaryFile']>>>\nexport type GetTemporaryFileByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTemporaryFileById']>>>\nexport type DeleteTemporaryFileByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteTemporaryFileById']>>>\nexport type GetTemporaryFileConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getTemporaryFileConfiguration']>>>\nexport type PostUpgradeAuthorizeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUpgradeAuthorize']>>>\nexport type GetUpgradeSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUpgradeSettings']>>>\nexport type PostUserDataResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserData']>>>\nexport type GetUserDataResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserData']>>>\nexport type PutUserDataResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putUserData']>>>\nexport type GetUserDataByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserDataById']>>>\nexport type GetFilterUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getFilterUserGroup']>>>\nexport type GetItemUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemUserGroup']>>>\nexport type DeleteUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteUserGroup']>>>\nexport type PostUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserGroup']>>>\nexport type GetUserGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserGroup']>>>\nexport type GetUserGroupByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserGroupById']>>>\nexport type DeleteUserGroupByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteUserGroupById']>>>\nexport type PutUserGroupByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putUserGroupById']>>>\nexport type DeleteUserGroupByIdUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteUserGroupByIdUsers']>>>\nexport type PostUserGroupByIdUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserGroupByIdUsers']>>>\nexport type GetFilterUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getFilterUser']>>>\nexport type GetItemUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemUser']>>>\nexport type PostUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUser']>>>\nexport type DeleteUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteUser']>>>\nexport type GetUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUser']>>>\nexport type GetUserByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserById']>>>\nexport type DeleteUserByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteUserById']>>>\nexport type PutUserByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putUserById']>>>\nexport type GetUserById2faResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserById2fa']>>>\nexport type DeleteUserById2faByProviderNameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteUserById2faByProviderName']>>>\nexport type GetUserByIdCalculateStartNodesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserByIdCalculateStartNodes']>>>\nexport type PostUserByIdChangePasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserByIdChangePassword']>>>\nexport type PostUserByIdClientCredentialsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserByIdClientCredentials']>>>\nexport type GetUserByIdClientCredentialsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserByIdClientCredentials']>>>\nexport type DeleteUserByIdClientCredentialsByClientIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteUserByIdClientCredentialsByClientId']>>>\nexport type PostUserByIdResetPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserByIdResetPassword']>>>\nexport type DeleteUserAvatarByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteUserAvatarById']>>>\nexport type PostUserAvatarByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserAvatarById']>>>\nexport type GetUserConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserConfiguration']>>>\nexport type GetUserCurrentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserCurrent']>>>\nexport type GetUserCurrent2faResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserCurrent2fa']>>>\nexport type DeleteUserCurrent2faByProviderNameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteUserCurrent2faByProviderName']>>>\nexport type PostUserCurrent2faByProviderNameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserCurrent2faByProviderName']>>>\nexport type GetUserCurrent2faByProviderNameResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserCurrent2faByProviderName']>>>\nexport type PostUserCurrentAvatarResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserCurrentAvatar']>>>\nexport type PostUserCurrentChangePasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserCurrentChangePassword']>>>\nexport type GetUserCurrentConfigurationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserCurrentConfiguration']>>>\nexport type GetUserCurrentLoginProvidersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserCurrentLoginProviders']>>>\nexport type GetUserCurrentPermissionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserCurrentPermissions']>>>\nexport type GetUserCurrentPermissionsDocumentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserCurrentPermissionsDocument']>>>\nexport type GetUserCurrentPermissionsMediaResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getUserCurrentPermissionsMedia']>>>\nexport type PostUserDisableResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserDisable']>>>\nexport type PostUserEnableResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserEnable']>>>\nexport type PostUserInviteResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserInvite']>>>\nexport type PostUserInviteCreatePasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserInviteCreatePassword']>>>\nexport type PostUserInviteResendResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserInviteResend']>>>\nexport type PostUserInviteVerifyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserInviteVerify']>>>\nexport type PostUserSetUserGroupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserSetUserGroups']>>>\nexport type PostUserUnlockResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postUserUnlock']>>>\nexport type GetItemWebhookResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getItemWebhook']>>>\nexport type GetWebhookResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getWebhook']>>>\nexport type PostWebhookResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['postWebhook']>>>\nexport type GetWebhookByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getWebhookById']>>>\nexport type DeleteWebhookByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['deleteWebhookById']>>>\nexport type PutWebhookByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['putWebhookById']>>>\nexport type GetWebhookByIdLogsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getWebhookByIdLogs']>>>\nexport type GetWebhookEventsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getWebhookEvents']>>>\nexport type GetWebhookLogsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getUmbracoManagementAPI>['getWebhookLogs']>>>\n","import { getUmbracoManagementAPI } from \"../api/umbraco/management/umbracoManagementAPI.js\";\n\nexport class UmbracoManagementClient {\n  private static instance: ReturnType<typeof getUmbracoManagementAPI> | null =\n    null;\n\n  private constructor() {}\n\n  public static getClient() {\n    if (this.instance === null) {\n      this.instance = getUmbracoManagementAPI();\n    }\n    return this.instance;\n  }\n}\n","import { ZodRawShape } from \"zod\";\nimport { ToolCallback } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { ToolDefinition } from \"../types/tool-definition.js\";\n\nexport const CreateUmbracoTool =\n  <Args extends undefined | ZodRawShape = any>(\n    name: string,\n    description: string,\n    schema: Args,\n    handler: ToolCallback<Args>\n  ): (() => ToolDefinition<Args>) =>\n  () => ({\n    name: name,\n    description: description,\n    schema: schema,\n    handler: handler,\n  });\n","/**\n * Generated by orval v7.8.0 🍺\n * Do not edit manually.\n * Umbraco Management API\n * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility\n * OpenAPI spec version: Latest\n */\nimport {\n  z as zod\n} from 'zod';\n\nclass FileLike {\n  constructor(\n    public name: string,\n    public size: number,\n    public type: string\n  ) {}\n}\n\n\n\nexport const getCultureQuerySkipDefault = 0;export const getCultureQueryTakeDefault = 100;\n\nexport const getCultureQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getCultureQueryTakeDefault)\n})\n\nexport const getCultureResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string().min(1),\n  \"englishName\": zod.string().min(1)\n}))\n})\n\n\nexport const postDataTypeBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"editorAlias\": zod.string().min(1),\n  \"editorUiAlias\": zod.string(),\n  \"values\": zod.array(zod.object({\n  \"alias\": zod.string(),\n  \"value\": zod.any().nullish()\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getDataTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDataTypeByIdResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"editorAlias\": zod.string().min(1),\n  \"editorUiAlias\": zod.string(),\n  \"values\": zod.array(zod.object({\n  \"alias\": zod.string(),\n  \"value\": zod.any().nullish()\n})),\n  \"id\": zod.string().uuid(),\n  \"isDeletable\": zod.boolean(),\n  \"canIgnoreStartNodes\": zod.boolean()\n})\n\n\nexport const deleteDataTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putDataTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDataTypeByIdBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"editorAlias\": zod.string().min(1),\n  \"editorUiAlias\": zod.string(),\n  \"values\": zod.array(zod.object({\n  \"alias\": zod.string(),\n  \"value\": zod.any().nullish()\n}))\n})\n\n\nexport const postDataTypeByIdCopyParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postDataTypeByIdCopyBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getDataTypeByIdIsUsedParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDataTypeByIdIsUsedResponse = zod.boolean()\n\n\nexport const putDataTypeByIdMoveParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDataTypeByIdMoveBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getDataTypeByIdReferencesParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDataTypeByIdReferencesResponseItem = zod.object({\n  \"contentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"type\": zod.string().nullable(),\n  \"name\": zod.string().nullable(),\n  \"icon\": zod.string().nullable()\n}),\n  \"properties\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"alias\": zod.string()\n}))\n})\nexport const getDataTypeByIdReferencesResponse = zod.array(getDataTypeByIdReferencesResponseItem)\n\n\nexport const getDataTypeConfigurationResponse = zod.object({\n  \"canBeChanged\": zod.enum(['True', 'False', 'FalseWithHelpText']),\n  \"documentListViewId\": zod.string().uuid(),\n  \"mediaListViewId\": zod.string().uuid()\n})\n\n\nexport const postDataTypeFolderBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getDataTypeFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDataTypeFolderByIdResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().uuid()\n})\n\n\nexport const deleteDataTypeFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putDataTypeFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDataTypeFolderByIdBody = zod.object({\n  \"name\": zod.string().min(1)\n})\n\n\nexport const getFilterDataTypeQuerySkipDefault = 0;export const getFilterDataTypeQueryTakeDefault = 100;export const getFilterDataTypeQueryNameDefault = \"\";\n\nexport const getFilterDataTypeQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getFilterDataTypeQueryTakeDefault),\n  \"name\": zod.string().optional(),\n  \"editorUiAlias\": zod.string().optional(),\n  \"editorAlias\": zod.string().optional()\n})\n\nexport const getFilterDataTypeResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"editorUiAlias\": zod.string().nullish(),\n  \"editorAlias\": zod.string(),\n  \"isDeletable\": zod.boolean()\n}))\n})\n\n\nexport const getItemDataTypeQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemDataTypeResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"editorUiAlias\": zod.string().nullish(),\n  \"editorAlias\": zod.string(),\n  \"isDeletable\": zod.boolean()\n})\nexport const getItemDataTypeResponse = zod.array(getItemDataTypeResponseItem)\n\n\nexport const getItemDataTypeSearchQuerySkipDefault = 0;export const getItemDataTypeSearchQueryTakeDefault = 100;\n\nexport const getItemDataTypeSearchQueryParams = zod.object({\n  \"query\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getItemDataTypeSearchQueryTakeDefault)\n})\n\nexport const getItemDataTypeSearchResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"editorUiAlias\": zod.string().nullish(),\n  \"editorAlias\": zod.string(),\n  \"isDeletable\": zod.boolean()\n})),\n  \"total\": zod.number()\n})\n\n\nexport const getTreeDataTypeAncestorsQueryParams = zod.object({\n  \"descendantId\": zod.string().uuid().optional()\n})\n\nexport const getTreeDataTypeAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"editorUiAlias\": zod.string().nullish(),\n  \"isDeletable\": zod.boolean()\n})\nexport const getTreeDataTypeAncestorsResponse = zod.array(getTreeDataTypeAncestorsResponseItem)\n\n\nexport const getTreeDataTypeChildrenQuerySkipDefault = 0;export const getTreeDataTypeChildrenQueryTakeDefault = 100;export const getTreeDataTypeChildrenQueryFoldersOnlyDefault = false;\n\nexport const getTreeDataTypeChildrenQueryParams = zod.object({\n  \"parentId\": zod.string().uuid().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeDataTypeChildrenQueryTakeDefault),\n  \"foldersOnly\": zod.coerce.boolean().optional()\n})\n\nexport const getTreeDataTypeChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"editorUiAlias\": zod.string().nullish(),\n  \"isDeletable\": zod.boolean()\n}))\n})\n\n\nexport const getTreeDataTypeRootQuerySkipDefault = 0;export const getTreeDataTypeRootQueryTakeDefault = 100;export const getTreeDataTypeRootQueryFoldersOnlyDefault = false;\n\nexport const getTreeDataTypeRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number(),\n  \"take\": zod.coerce.number().default(100),\n  \"foldersOnly\": zod.coerce.boolean()\n})\n\nexport const getTreeDataTypeRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"editorUiAlias\": zod.string().nullish(),\n  \"isDeletable\": zod.boolean()\n}))\n})\n\n\nexport const getDictionaryQuerySkipDefault = 0;export const getDictionaryQueryTakeDefault = 100;\n\nexport const getDictionaryQueryParams = zod.object({\n  \"filter\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getDictionaryQueryTakeDefault)\n})\n\nexport const getDictionaryResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string().nullish(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"translatedIsoCodes\": zod.array(zod.string())\n}))\n})\n\n\nexport const postDictionaryBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"translations\": zod.array(zod.object({\n  \"isoCode\": zod.string().min(1),\n  \"translation\": zod.string().min(1)\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getDictionaryByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDictionaryByIdResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"translations\": zod.array(zod.object({\n  \"isoCode\": zod.string().min(1),\n  \"translation\": zod.string().min(1)\n})),\n  \"id\": zod.string().uuid()\n})\n\n\nexport const deleteDictionaryByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putDictionaryByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDictionaryByIdBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"translations\": zod.array(zod.object({\n  \"isoCode\": zod.string().min(1),\n  \"translation\": zod.string().min(1)\n}))\n})\n\n\nexport const getDictionaryByIdExportParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDictionaryByIdExportQueryIncludeChildrenDefault = false;\n\nexport const getDictionaryByIdExportQueryParams = zod.object({\n  \"includeChildren\": zod.coerce.boolean().optional()\n})\n\nexport const getDictionaryByIdExportResponse = zod.instanceof(FileLike)\n\n\nexport const putDictionaryByIdMoveParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDictionaryByIdMoveBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const postDictionaryImportBody = zod.object({\n  \"temporaryFile\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getItemDictionaryQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemDictionaryResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string()\n})\nexport const getItemDictionaryResponse = zod.array(getItemDictionaryResponseItem)\n\n\nexport const getTreeDictionaryAncestorsQueryParams = zod.object({\n  \"descendantId\": zod.string().uuid().optional()\n})\n\nexport const getTreeDictionaryAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string()\n})\nexport const getTreeDictionaryAncestorsResponse = zod.array(getTreeDictionaryAncestorsResponseItem)\n\n\nexport const getTreeDictionaryChildrenQuerySkipDefault = 0;export const getTreeDictionaryChildrenQueryTakeDefault = 100;\n\nexport const getTreeDictionaryChildrenQueryParams = zod.object({\n  \"parentId\": zod.string().uuid().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeDictionaryChildrenQueryTakeDefault)\n})\n\nexport const getTreeDictionaryChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string()\n}))\n})\n\n\nexport const getTreeDictionaryRootQuerySkipDefault = 0;export const getTreeDictionaryRootQueryTakeDefault = 100;\n\nexport const getTreeDictionaryRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeDictionaryRootQueryTakeDefault)\n})\n\nexport const getTreeDictionaryRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string()\n}))\n})\n\n\nexport const postDocumentBlueprintBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid()\n})\n})\n\n\nexport const getDocumentBlueprintByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentBlueprintByIdResponse = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish(),\n  \"editorAlias\": zod.string().min(1)\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true}),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges']),\n  \"publishDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"scheduledPublishDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"scheduledUnpublishDate\": zod.string().datetime({\"local\":true}).nullish()\n})),\n  \"id\": zod.string().uuid(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n})\n\n\nexport const deleteDocumentBlueprintByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putDocumentBlueprintByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentBlueprintByIdBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n}))\n})\n\n\nexport const putDocumentBlueprintByIdMoveParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentBlueprintByIdMoveBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const postDocumentBlueprintFolderBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getDocumentBlueprintFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentBlueprintFolderByIdResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().uuid()\n})\n\n\nexport const deleteDocumentBlueprintFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putDocumentBlueprintFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentBlueprintFolderByIdBody = zod.object({\n  \"name\": zod.string().min(1)\n})\n\n\nexport const postDocumentBlueprintFromDocumentBody = zod.object({\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"id\": zod.string().uuid().nullish(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getItemDocumentBlueprintQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemDocumentBlueprintResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n})\nexport const getItemDocumentBlueprintResponse = zod.array(getItemDocumentBlueprintResponseItem)\n\n\nexport const getTreeDocumentBlueprintAncestorsQueryParams = zod.object({\n  \"descendantId\": zod.string().uuid().optional()\n})\n\nexport const getTreeDocumentBlueprintAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}).nullish()\n})\nexport const getTreeDocumentBlueprintAncestorsResponse = zod.array(getTreeDocumentBlueprintAncestorsResponseItem)\n\n\nexport const getTreeDocumentBlueprintChildrenQuerySkipDefault = 0;export const getTreeDocumentBlueprintChildrenQueryTakeDefault = 100;export const getTreeDocumentBlueprintChildrenQueryFoldersOnlyDefault = false;\n\nexport const getTreeDocumentBlueprintChildrenQueryParams = zod.object({\n  \"parentId\": zod.string().uuid().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeDocumentBlueprintChildrenQueryTakeDefault),\n  \"foldersOnly\": zod.coerce.boolean().optional()\n})\n\nexport const getTreeDocumentBlueprintChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}).nullish()\n}))\n})\n\n\nexport const getTreeDocumentBlueprintRootQuerySkipDefault = 0;export const getTreeDocumentBlueprintRootQueryTakeDefault = 100;export const getTreeDocumentBlueprintRootQueryFoldersOnlyDefault = false;\n\nexport const getTreeDocumentBlueprintRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeDocumentBlueprintRootQueryTakeDefault),\n  \"foldersOnly\": zod.coerce.boolean().optional()\n})\n\nexport const getTreeDocumentBlueprintRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}).nullish()\n}))\n})\n\n\nexport const postDocumentTypeBody = zod.object({\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().min(1),\n  \"allowedAsRoot\": zod.boolean(),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"isElement\": zod.boolean(),\n  \"properties\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"container\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sortOrder\": zod.number(),\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"dataType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"validation\": zod.object({\n  \"mandatory\": zod.boolean(),\n  \"mandatoryMessage\": zod.string().nullish(),\n  \"regEx\": zod.string().nullish(),\n  \"regExMessage\": zod.string().nullish()\n}),\n  \"appearance\": zod.object({\n  \"labelOnTop\": zod.boolean()\n})\n})),\n  \"containers\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().min(1),\n  \"sortOrder\": zod.number()\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"allowedTemplates\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"defaultTemplate\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"cleanup\": zod.object({\n  \"preventCleanup\": zod.boolean(),\n  \"keepAllVersionsNewerThanDays\": zod.number().nullish(),\n  \"keepLatestVersionPerDayForDays\": zod.number().nullish()\n}),\n  \"allowedDocumentTypes\": zod.array(zod.object({\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"sortOrder\": zod.number()\n})),\n  \"compositions\": zod.array(zod.object({\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"compositionType\": zod.enum(['Composition', 'Inheritance'])\n}))\n})\n\n\nexport const getDocumentTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentTypeByIdResponse = zod.object({\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().min(1),\n  \"allowedAsRoot\": zod.boolean(),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"isElement\": zod.boolean(),\n  \"properties\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"container\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sortOrder\": zod.number(),\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"dataType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"validation\": zod.object({\n  \"mandatory\": zod.boolean(),\n  \"mandatoryMessage\": zod.string().nullish(),\n  \"regEx\": zod.string().nullish(),\n  \"regExMessage\": zod.string().nullish()\n}),\n  \"appearance\": zod.object({\n  \"labelOnTop\": zod.boolean()\n})\n})),\n  \"containers\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().min(1),\n  \"sortOrder\": zod.number()\n})),\n  \"id\": zod.string().uuid(),\n  \"allowedTemplates\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"defaultTemplate\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"cleanup\": zod.object({\n  \"preventCleanup\": zod.boolean(),\n  \"keepAllVersionsNewerThanDays\": zod.number().nullish(),\n  \"keepLatestVersionPerDayForDays\": zod.number().nullish()\n}),\n  \"allowedDocumentTypes\": zod.array(zod.object({\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"sortOrder\": zod.number()\n})),\n  \"compositions\": zod.array(zod.object({\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"compositionType\": zod.enum(['Composition', 'Inheritance'])\n}))\n})\n\n\nexport const deleteDocumentTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putDocumentTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentTypeByIdBody = zod.object({\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().min(1),\n  \"allowedAsRoot\": zod.boolean(),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"isElement\": zod.boolean(),\n  \"properties\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"container\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sortOrder\": zod.number(),\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"dataType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"validation\": zod.object({\n  \"mandatory\": zod.boolean(),\n  \"mandatoryMessage\": zod.string().nullish(),\n  \"regEx\": zod.string().nullish(),\n  \"regExMessage\": zod.string().nullish()\n}),\n  \"appearance\": zod.object({\n  \"labelOnTop\": zod.boolean()\n})\n})),\n  \"containers\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().min(1),\n  \"sortOrder\": zod.number()\n})),\n  \"allowedTemplates\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"defaultTemplate\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"cleanup\": zod.object({\n  \"preventCleanup\": zod.boolean(),\n  \"keepAllVersionsNewerThanDays\": zod.number().nullish(),\n  \"keepLatestVersionPerDayForDays\": zod.number().nullish()\n}),\n  \"allowedDocumentTypes\": zod.array(zod.object({\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"sortOrder\": zod.number()\n})),\n  \"compositions\": zod.array(zod.object({\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"compositionType\": zod.enum(['Composition', 'Inheritance'])\n}))\n})\n\n\nexport const getDocumentTypeByIdAllowedChildrenParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentTypeByIdAllowedChildrenQuerySkipDefault = 0;export const getDocumentTypeByIdAllowedChildrenQueryTakeDefault = 100;\n\nexport const getDocumentTypeByIdAllowedChildrenQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getDocumentTypeByIdAllowedChildrenQueryTakeDefault)\n})\n\nexport const getDocumentTypeByIdAllowedChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().nullish()\n}))\n})\n\n\nexport const getDocumentTypeByIdBlueprintParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentTypeByIdBlueprintQuerySkipDefault = 0;export const getDocumentTypeByIdBlueprintQueryTakeDefault = 100;\n\nexport const getDocumentTypeByIdBlueprintQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getDocumentTypeByIdBlueprintQueryTakeDefault)\n})\n\nexport const getDocumentTypeByIdBlueprintResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string()\n}))\n})\n\n\nexport const getDocumentTypeByIdCompositionReferencesParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentTypeByIdCompositionReferencesResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string()\n})\nexport const getDocumentTypeByIdCompositionReferencesResponse = zod.array(getDocumentTypeByIdCompositionReferencesResponseItem)\n\n\nexport const postDocumentTypeByIdCopyParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postDocumentTypeByIdCopyBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getDocumentTypeByIdExportParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentTypeByIdExportResponse = zod.instanceof(FileLike)\n\n\nexport const putDocumentTypeByIdImportParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentTypeByIdImportBody = zod.object({\n  \"file\": zod.object({\n  \"id\": zod.string().uuid()\n})\n})\n\n\nexport const putDocumentTypeByIdMoveParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentTypeByIdMoveBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getDocumentTypeAllowedAtRootQuerySkipDefault = 0;export const getDocumentTypeAllowedAtRootQueryTakeDefault = 100;\n\nexport const getDocumentTypeAllowedAtRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getDocumentTypeAllowedAtRootQueryTakeDefault)\n})\n\nexport const getDocumentTypeAllowedAtRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().nullish()\n}))\n})\n\n\nexport const postDocumentTypeAvailableCompositionsBody = zod.object({\n  \"id\": zod.string().uuid().nullish(),\n  \"currentPropertyAliases\": zod.array(zod.string()),\n  \"currentCompositeIds\": zod.array(zod.string().uuid()),\n  \"isElement\": zod.boolean()\n})\n\nexport const postDocumentTypeAvailableCompositionsResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string(),\n  \"folderPath\": zod.array(zod.string()),\n  \"isCompatible\": zod.boolean()\n})\nexport const postDocumentTypeAvailableCompositionsResponse = zod.array(postDocumentTypeAvailableCompositionsResponseItem)\n\n\nexport const getDocumentTypeConfigurationResponse = zod.object({\n  \"dataTypesCanBeChanged\": zod.enum(['True', 'False', 'FalseWithHelpText']),\n  \"disableTemplates\": zod.boolean(),\n  \"useSegments\": zod.boolean(),\n  \"reservedFieldNames\": zod.array(zod.string())\n})\n\n\nexport const postDocumentTypeFolderBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getDocumentTypeFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentTypeFolderByIdResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().uuid()\n})\n\n\nexport const deleteDocumentTypeFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putDocumentTypeFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentTypeFolderByIdBody = zod.object({\n  \"name\": zod.string().min(1)\n})\n\n\nexport const postDocumentTypeImportBody = zod.object({\n  \"file\": zod.object({\n  \"id\": zod.string().uuid()\n})\n})\n\n\nexport const getItemDocumentTypeQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemDocumentTypeResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"isElement\": zod.boolean(),\n  \"icon\": zod.string().nullish(),\n  \"description\": zod.string().nullish()\n})\nexport const getItemDocumentTypeResponse = zod.array(getItemDocumentTypeResponseItem)\n\n\nexport const getItemDocumentTypeSearchQuerySkipDefault = 0;export const getItemDocumentTypeSearchQueryTakeDefault = 100;\n\nexport const getItemDocumentTypeSearchQueryParams = zod.object({\n  \"query\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getItemDocumentTypeSearchQueryTakeDefault)\n})\n\nexport const getItemDocumentTypeSearchResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"isElement\": zod.boolean(),\n  \"icon\": zod.string().nullish(),\n  \"description\": zod.string().nullish()\n})),\n  \"total\": zod.number()\n})\n\n\nexport const getTreeDocumentTypeAncestorsQueryParams = zod.object({\n  \"descendantId\": zod.string().uuid().optional()\n})\n\nexport const getTreeDocumentTypeAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"isElement\": zod.boolean(),\n  \"icon\": zod.string()\n})\nexport const getTreeDocumentTypeAncestorsResponse = zod.array(getTreeDocumentTypeAncestorsResponseItem)\n\n\nexport const getTreeDocumentTypeChildrenQuerySkipDefault = 0;export const getTreeDocumentTypeChildrenQueryTakeDefault = 100;export const getTreeDocumentTypeChildrenQueryFoldersOnlyDefault = false;\n\nexport const getTreeDocumentTypeChildrenQueryParams = zod.object({\n  \"parentId\": zod.string().uuid().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeDocumentTypeChildrenQueryTakeDefault),\n  \"foldersOnly\": zod.coerce.boolean().optional()\n})\n\nexport const getTreeDocumentTypeChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"isElement\": zod.boolean(),\n  \"icon\": zod.string()\n}))\n})\n\n\nexport const getTreeDocumentTypeRootQuerySkipDefault = 0;export const getTreeDocumentTypeRootQueryTakeDefault = 100;export const getTreeDocumentTypeRootQueryFoldersOnlyDefault = false;\n\nexport const getTreeDocumentTypeRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeDocumentTypeRootQueryTakeDefault),\n  \"foldersOnly\": zod.coerce.boolean().optional()\n})\n\nexport const getTreeDocumentTypeRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"isElement\": zod.boolean(),\n  \"icon\": zod.string()\n}))\n})\n\n\nexport const getDocumentVersionQuerySkipDefault = 0;export const getDocumentVersionQueryTakeDefault = 100;\n\nexport const getDocumentVersionQueryParams = zod.object({\n  \"documentId\": zod.string().uuid(),\n  \"culture\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getDocumentVersionQueryTakeDefault)\n})\n\nexport const getDocumentVersionResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"user\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"versionDate\": zod.string().datetime({\"local\":true}),\n  \"isCurrentPublishedVersion\": zod.boolean(),\n  \"isCurrentDraftVersion\": zod.boolean(),\n  \"preventCleanup\": zod.boolean()\n}))\n})\n\n\nexport const getDocumentVersionByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentVersionByIdResponse = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish(),\n  \"editorAlias\": zod.string().min(1)\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true}),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges']),\n  \"publishDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"scheduledPublishDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"scheduledUnpublishDate\": zod.string().datetime({\"local\":true}).nullish()\n})),\n  \"id\": zod.string().uuid(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const putDocumentVersionByIdPreventCleanupParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentVersionByIdPreventCleanupQueryParams = zod.object({\n  \"preventCleanup\": zod.coerce.boolean().optional()\n})\n\n\nexport const postDocumentVersionByIdRollbackParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postDocumentVersionByIdRollbackQueryParams = zod.object({\n  \"culture\": zod.string().optional()\n})\n\n\nexport const getCollectionDocumentByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getCollectionDocumentByIdQueryOrderByDefault = \"updateDate\";export const getCollectionDocumentByIdQuerySkipDefault = 0;export const getCollectionDocumentByIdQueryTakeDefault = 100;\n\nexport const getCollectionDocumentByIdQueryParams = zod.object({\n  \"dataTypeId\": zod.string().uuid().optional(),\n  \"orderBy\": zod.string().default(getCollectionDocumentByIdQueryOrderByDefault),\n  \"orderCulture\": zod.string().optional(),\n  \"orderDirection\": zod.enum(['Ascending', 'Descending']).optional(),\n  \"filter\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getCollectionDocumentByIdQueryTakeDefault)\n})\n\nexport const getCollectionDocumentByIdResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish(),\n  \"editorAlias\": zod.string().min(1)\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true}),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges']),\n  \"publishDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"scheduledPublishDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"scheduledUnpublishDate\": zod.string().datetime({\"local\":true}).nullish()\n})),\n  \"id\": zod.string().uuid(),\n  \"creator\": zod.string().nullish(),\n  \"sortOrder\": zod.number(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"alias\": zod.string(),\n  \"icon\": zod.string()\n}),\n  \"isTrashed\": zod.boolean(),\n  \"isProtected\": zod.boolean(),\n  \"updater\": zod.string().nullish()\n}))\n})\n\n\nexport const postDocumentBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"template\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullable()\n})\n\n\nexport const getDocumentByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentByIdResponse = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish(),\n  \"editorAlias\": zod.string().min(1)\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true}),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges']),\n  \"publishDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"scheduledPublishDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"scheduledUnpublishDate\": zod.string().datetime({\"local\":true}).nullish()\n})),\n  \"id\": zod.string().uuid(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"urls\": zod.array(zod.object({\n  \"culture\": zod.string().nullable(),\n  \"url\": zod.string()\n})),\n  \"template\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"isTrashed\": zod.boolean()\n})\n\n\nexport const deleteDocumentByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putDocumentByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentByIdBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"template\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getDocumentByIdAuditLogParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentByIdAuditLogQuerySkipDefault = 0;export const getDocumentByIdAuditLogQueryTakeDefault = 100;\n\nexport const getDocumentByIdAuditLogQueryParams = zod.object({\n  \"orderDirection\": zod.enum(['Ascending', 'Descending']).optional(),\n  \"sinceDate\": zod.string().datetime({\"local\":true}).optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getDocumentByIdAuditLogQueryTakeDefault)\n})\n\nexport const getDocumentByIdAuditLogResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"user\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"timestamp\": zod.string().datetime({\"local\":true}),\n  \"logType\": zod.enum(['New', 'Save', 'SaveVariant', 'Open', 'Delete', 'Publish', 'PublishVariant', 'SendToPublish', 'SendToPublishVariant', 'Unpublish', 'UnpublishVariant', 'Move', 'Copy', 'AssignDomain', 'PublicAccess', 'Sort', 'Notify', 'System', 'RollBack', 'PackagerInstall', 'PackagerUninstall', 'Custom', 'ContentVersionPreventCleanup', 'ContentVersionEnableCleanup']),\n  \"comment\": zod.string().nullish(),\n  \"parameters\": zod.string().nullish()\n}))\n})\n\n\nexport const postDocumentByIdCopyParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postDocumentByIdCopyBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"relateToOriginal\": zod.boolean(),\n  \"includeDescendants\": zod.boolean()\n})\n\n\nexport const getDocumentByIdDomainsParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentByIdDomainsResponse = zod.object({\n  \"defaultIsoCode\": zod.string().nullish(),\n  \"domains\": zod.array(zod.object({\n  \"domainName\": zod.string(),\n  \"isoCode\": zod.string()\n}))\n})\n\n\nexport const putDocumentByIdDomainsParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentByIdDomainsBody = zod.object({\n  \"defaultIsoCode\": zod.string().nullish(),\n  \"domains\": zod.array(zod.object({\n  \"domainName\": zod.string(),\n  \"isoCode\": zod.string()\n}))\n})\n\n\nexport const putDocumentByIdMoveParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentByIdMoveBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const putDocumentByIdMoveToRecycleBinParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const getDocumentByIdNotificationsParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentByIdNotificationsResponseItem = zod.object({\n  \"actionId\": zod.string(),\n  \"alias\": zod.string(),\n  \"subscribed\": zod.boolean()\n})\nexport const getDocumentByIdNotificationsResponse = zod.array(getDocumentByIdNotificationsResponseItem)\n\n\nexport const putDocumentByIdNotificationsParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentByIdNotificationsBody = zod.object({\n  \"subscribedActionIds\": zod.array(zod.string())\n})\n\n\nexport const postDocumentByIdPublicAccessParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postDocumentByIdPublicAccessBody = zod.object({\n  \"loginDocument\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"errorDocument\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"memberUserNames\": zod.array(zod.string()),\n  \"memberGroupNames\": zod.array(zod.string())\n})\n\n\nexport const deleteDocumentByIdPublicAccessParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const getDocumentByIdPublicAccessParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentByIdPublicAccessResponse = zod.object({\n  \"loginDocument\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"errorDocument\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"members\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"memberType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish()\n})),\n  \"kind\": zod.enum(['Default', 'Api'])\n})),\n  \"groups\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string()\n}))\n})\n\n\nexport const putDocumentByIdPublicAccessParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentByIdPublicAccessBody = zod.object({\n  \"loginDocument\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"errorDocument\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"memberUserNames\": zod.array(zod.string()),\n  \"memberGroupNames\": zod.array(zod.string())\n})\n\n\nexport const putDocumentByIdPublishParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentByIdPublishBody = zod.object({\n  \"publishSchedules\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"schedule\": zod.object({\n  \"publishTime\": zod.string().datetime({\"local\":true}).nullish(),\n  \"unpublishTime\": zod.string().datetime({\"local\":true}).nullish()\n}).nullish()\n}))\n})\n\n\nexport const putDocumentByIdPublishWithDescendantsParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentByIdPublishWithDescendantsBody = zod.object({\n  \"includeUnpublishedDescendants\": zod.boolean(),\n  \"cultures\": zod.array(zod.string())\n})\n\n\nexport const getDocumentByIdPublishedParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentByIdPublishedResponse = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish(),\n  \"editorAlias\": zod.string().min(1)\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true}),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges']),\n  \"publishDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"scheduledPublishDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"scheduledUnpublishDate\": zod.string().datetime({\"local\":true}).nullish()\n})),\n  \"id\": zod.string().uuid(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"urls\": zod.array(zod.object({\n  \"culture\": zod.string().nullable(),\n  \"url\": zod.string()\n})),\n  \"template\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"isTrashed\": zod.boolean()\n})\n\n\nexport const getDocumentByIdReferencedByParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentByIdReferencedByQuerySkipDefault = 0;export const getDocumentByIdReferencedByQueryTakeDefault = 20;\n\nexport const getDocumentByIdReferencedByQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getDocumentByIdReferencedByQueryTakeDefault)\n})\n\nexport const getDocumentByIdReferencedByResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"$type\": zod.enum(['DefaultReferenceResponseModel']),\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().nullish(),\n  \"icon\": zod.string().nullish()\n}).or(zod.object({\n  \"$type\": zod.enum(['DocumentReferenceResponseModel']),\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string().nullish(),\n  \"published\": zod.boolean().nullish(),\n  \"documentType\": zod.object({\n  \"icon\": zod.string().nullish(),\n  \"alias\": zod.string().nullish(),\n  \"name\": zod.string().nullish()\n})\n})).or(zod.object({\n  \"$type\": zod.enum(['MediaReferenceResponseModel']),\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string().nullish(),\n  \"mediaType\": zod.object({\n  \"icon\": zod.string().nullish(),\n  \"alias\": zod.string().nullish(),\n  \"name\": zod.string().nullish()\n})\n})))\n})\n\n\nexport const getDocumentByIdReferencedDescendantsParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getDocumentByIdReferencedDescendantsQuerySkipDefault = 0;export const getDocumentByIdReferencedDescendantsQueryTakeDefault = 20;\n\nexport const getDocumentByIdReferencedDescendantsQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getDocumentByIdReferencedDescendantsQueryTakeDefault)\n})\n\nexport const getDocumentByIdReferencedDescendantsResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const putDocumentByIdUnpublishParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentByIdUnpublishBody = zod.object({\n  \"cultures\": zod.array(zod.string()).nullish()\n})\n\n\n/**\n * @deprecated\n */\nexport const putDocumentByIdValidateParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putDocumentByIdValidateBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"template\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const putUmbracoManagementApiV11DocumentByIdValidate11Params = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putUmbracoManagementApiV11DocumentByIdValidate11Body = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"template\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"cultures\": zod.array(zod.string()).nullish()\n})\n\n\nexport const getDocumentAreReferencedQuerySkipDefault = 0;export const getDocumentAreReferencedQueryTakeDefault = 20;\n\nexport const getDocumentAreReferencedQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getDocumentAreReferencedQueryTakeDefault)\n})\n\nexport const getDocumentAreReferencedResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const getDocumentConfigurationResponse = zod.object({\n  \"disableDeleteWhenReferenced\": zod.boolean(),\n  \"disableUnpublishWhenReferenced\": zod.boolean(),\n  \"allowEditInvariantFromNonDefault\": zod.boolean(),\n  \"allowNonExistingSegmentsCreation\": zod.boolean(),\n  \"reservedFieldNames\": zod.array(zod.string())\n})\n\n\nexport const putDocumentSortBody = zod.object({\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sorting\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"sortOrder\": zod.number()\n}))\n})\n\n\nexport const getDocumentUrlsQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getDocumentUrlsResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"urlInfos\": zod.array(zod.object({\n  \"culture\": zod.string().nullable(),\n  \"url\": zod.string()\n}))\n})\nexport const getDocumentUrlsResponse = zod.array(getDocumentUrlsResponseItem)\n\n\nexport const postDocumentValidateBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"template\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullable()\n})\n\n\nexport const getItemDocumentQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemDocumentResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"isTrashed\": zod.boolean(),\n  \"isProtected\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"hasChildren\": zod.boolean(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish(),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])\n}))\n})\nexport const getItemDocumentResponse = zod.array(getItemDocumentResponseItem)\n\n\nexport const getItemDocumentSearchQuerySkipDefault = 0;export const getItemDocumentSearchQueryTakeDefault = 100;\n\nexport const getItemDocumentSearchQueryParams = zod.object({\n  \"query\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getItemDocumentSearchQueryTakeDefault),\n  \"parentId\": zod.string().uuid().optional(),\n  \"allowedDocumentTypes\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemDocumentSearchResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"isTrashed\": zod.boolean(),\n  \"isProtected\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"hasChildren\": zod.boolean(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish(),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])\n}))\n})),\n  \"total\": zod.number()\n})\n\n\nexport const deleteRecycleBinDocumentByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const getRecycleBinDocumentByIdOriginalParentParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getRecycleBinDocumentByIdOriginalParentResponse = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putRecycleBinDocumentByIdRestoreParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putRecycleBinDocumentByIdRestoreBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getRecycleBinDocumentChildrenQuerySkipDefault = 0;export const getRecycleBinDocumentChildrenQueryTakeDefault = 100;\n\nexport const getRecycleBinDocumentChildrenQueryParams = zod.object({\n  \"parentId\": zod.string().uuid().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getRecycleBinDocumentChildrenQueryTakeDefault)\n})\n\nexport const getRecycleBinDocumentChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"hasChildren\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish(),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])\n}))\n}))\n})\n\n\nexport const getRecycleBinDocumentRootQuerySkipDefault = 0;export const getRecycleBinDocumentRootQueryTakeDefault = 100;\n\nexport const getRecycleBinDocumentRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getRecycleBinDocumentRootQueryTakeDefault)\n})\n\nexport const getRecycleBinDocumentRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"hasChildren\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish(),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])\n}))\n}))\n})\n\n\nexport const getTreeDocumentAncestorsQueryParams = zod.object({\n  \"descendantId\": zod.string().uuid().optional()\n})\n\nexport const getTreeDocumentAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"noAccess\": zod.boolean(),\n  \"isTrashed\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"isProtected\": zod.boolean(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish(),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])\n}))\n})\nexport const getTreeDocumentAncestorsResponse = zod.array(getTreeDocumentAncestorsResponseItem)\n\n\nexport const getTreeDocumentChildrenQuerySkipDefault = 0;export const getTreeDocumentChildrenQueryTakeDefault = 100;\n\nexport const getTreeDocumentChildrenQueryParams = zod.object({\n  \"parentId\": zod.string().uuid().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeDocumentChildrenQueryTakeDefault),\n  \"dataTypeId\": zod.string().uuid().optional()\n})\n\nexport const getTreeDocumentChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"noAccess\": zod.boolean(),\n  \"isTrashed\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"isProtected\": zod.boolean(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish(),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])\n}))\n}))\n})\n\n\nexport const getTreeDocumentRootQuerySkipDefault = 0;export const getTreeDocumentRootQueryTakeDefault = 100;\n\nexport const getTreeDocumentRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeDocumentRootQueryTakeDefault),\n  \"dataTypeId\": zod.string().uuid().optional()\n})\n\nexport const getTreeDocumentRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"noAccess\": zod.boolean(),\n  \"isTrashed\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"isProtected\": zod.boolean(),\n  \"documentType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish(),\n  \"state\": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])\n}))\n}))\n})\n\n\nexport const postDynamicRootQueryBody = zod.object({\n  \"context\": zod.object({\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish()\n}),\n  \"query\": zod.object({\n  \"origin\": zod.object({\n  \"alias\": zod.string(),\n  \"id\": zod.string().uuid().nullish()\n}),\n  \"steps\": zod.array(zod.object({\n  \"alias\": zod.string(),\n  \"documentTypeIds\": zod.array(zod.string().uuid())\n}))\n})\n})\n\nexport const postDynamicRootQueryResponse = zod.object({\n  \"roots\": zod.array(zod.string().uuid())\n})\n\n\nexport const getDynamicRootStepsResponseItem = zod.string()\nexport const getDynamicRootStepsResponse = zod.array(getDynamicRootStepsResponseItem)\n\n\nexport const getHealthCheckGroupQuerySkipDefault = 0;export const getHealthCheckGroupQueryTakeDefault = 100;\n\nexport const getHealthCheckGroupQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getHealthCheckGroupQueryTakeDefault)\n})\n\nexport const getHealthCheckGroupResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string()\n}))\n})\n\n\nexport const getHealthCheckGroupByNameParams = zod.object({\n  \"name\": zod.string()\n})\n\nexport const getHealthCheckGroupByNameResponse = zod.object({\n  \"name\": zod.string(),\n  \"checks\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"description\": zod.string().nullish()\n}))\n})\n\n\nexport const postHealthCheckGroupByNameCheckParams = zod.object({\n  \"name\": zod.string()\n})\n\nexport const postHealthCheckGroupByNameCheckResponse = zod.object({\n  \"checks\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"results\": zod.array(zod.object({\n  \"message\": zod.string(),\n  \"resultType\": zod.enum(['Success', 'Warning', 'Error', 'Info']),\n  \"actions\": zod.array(zod.object({\n  \"healthCheck\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"alias\": zod.string().nullish(),\n  \"name\": zod.string().nullish(),\n  \"description\": zod.string().nullish(),\n  \"valueRequired\": zod.boolean(),\n  \"providedValue\": zod.string().nullish(),\n  \"providedValueValidation\": zod.string().nullish(),\n  \"providedValueValidationRegex\": zod.string().nullish(),\n  \"actionParameters\": zod.record(zod.string(), zod.any()).nullish()\n})).nullish(),\n  \"readMoreLink\": zod.string().nullish()\n})).nullish()\n}))\n})\n\n\nexport const postHealthCheckExecuteActionBody = zod.object({\n  \"healthCheck\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"alias\": zod.string().nullish(),\n  \"name\": zod.string().nullish(),\n  \"description\": zod.string().nullish(),\n  \"valueRequired\": zod.boolean(),\n  \"providedValue\": zod.string().nullish(),\n  \"providedValueValidation\": zod.string().nullish(),\n  \"providedValueValidationRegex\": zod.string().nullish(),\n  \"actionParameters\": zod.record(zod.string(), zod.any()).nullish()\n})\n\nexport const postHealthCheckExecuteActionResponse = zod.object({\n  \"message\": zod.string(),\n  \"resultType\": zod.enum(['Success', 'Warning', 'Error', 'Info']),\n  \"actions\": zod.array(zod.object({\n  \"healthCheck\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"alias\": zod.string().nullish(),\n  \"name\": zod.string().nullish(),\n  \"description\": zod.string().nullish(),\n  \"valueRequired\": zod.boolean(),\n  \"providedValue\": zod.string().nullish(),\n  \"providedValueValidation\": zod.string().nullish(),\n  \"providedValueValidationRegex\": zod.string().nullish(),\n  \"actionParameters\": zod.record(zod.string(), zod.any()).nullish()\n})).nullish(),\n  \"readMoreLink\": zod.string().nullish()\n})\n\n\nexport const getHelpQuerySkipDefault = 0;export const getHelpQueryTakeDefault = 100;export const getHelpQueryBaseUrlDefault = \"https://our.umbraco.com\";\n\nexport const getHelpQueryParams = zod.object({\n  \"section\": zod.string().optional(),\n  \"tree\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getHelpQueryTakeDefault),\n  \"baseUrl\": zod.string().default(getHelpQueryBaseUrlDefault)\n})\n\nexport const getHelpResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string().nullish(),\n  \"description\": zod.string().nullish(),\n  \"url\": zod.string().nullish(),\n  \"type\": zod.string().nullish()\n}))\n})\n\n\nexport const getImagingResizeUrlsQueryHeightDefault = 200;export const getImagingResizeUrlsQueryWidthDefault = 200;\n\nexport const getImagingResizeUrlsQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional(),\n  \"height\": zod.coerce.number().default(getImagingResizeUrlsQueryHeightDefault),\n  \"width\": zod.coerce.number().default(getImagingResizeUrlsQueryWidthDefault),\n  \"mode\": zod.enum(['Crop', 'Max', 'Stretch', 'Pad', 'BoxPad', 'Min']).optional()\n})\n\nexport const getImagingResizeUrlsResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"urlInfos\": zod.array(zod.object({\n  \"culture\": zod.string().nullable(),\n  \"url\": zod.string()\n}))\n})\nexport const getImagingResizeUrlsResponse = zod.array(getImagingResizeUrlsResponseItem)\n\n\nexport const getImportAnalyzeQueryParams = zod.object({\n  \"temporaryFileId\": zod.string().uuid().optional()\n})\n\nexport const getImportAnalyzeResponse = zod.object({\n  \"entityType\": zod.string(),\n  \"alias\": zod.string().nullish(),\n  \"key\": zod.string().uuid().nullish()\n})\n\n\nexport const getIndexerQuerySkipDefault = 0;export const getIndexerQueryTakeDefault = 100;\n\nexport const getIndexerQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getIndexerQueryTakeDefault)\n})\n\nexport const getIndexerResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string().min(1),\n  \"healthStatus\": zod.object({\n  \"status\": zod.enum(['Healthy', 'Unhealthy', 'Rebuilding', 'Corrupt']),\n  \"message\": zod.string().nullish()\n}),\n  \"canRebuild\": zod.boolean(),\n  \"searcherName\": zod.string(),\n  \"documentCount\": zod.number(),\n  \"fieldCount\": zod.number(),\n  \"providerProperties\": zod.record(zod.string(), zod.any().nullable()).nullish()\n}))\n})\n\n\nexport const getIndexerByIndexNameParams = zod.object({\n  \"indexName\": zod.string()\n})\n\nexport const getIndexerByIndexNameResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"healthStatus\": zod.object({\n  \"status\": zod.enum(['Healthy', 'Unhealthy', 'Rebuilding', 'Corrupt']),\n  \"message\": zod.string().nullish()\n}),\n  \"canRebuild\": zod.boolean(),\n  \"searcherName\": zod.string(),\n  \"documentCount\": zod.number(),\n  \"fieldCount\": zod.number(),\n  \"providerProperties\": zod.record(zod.string(), zod.any().nullable()).nullish()\n})\n\n\nexport const postIndexerByIndexNameRebuildParams = zod.object({\n  \"indexName\": zod.string()\n})\n\n\nexport const getInstallSettingsResponse = zod.object({\n  \"user\": zod.object({\n  \"minCharLength\": zod.number(),\n  \"minNonAlphaNumericLength\": zod.number(),\n  \"consentLevels\": zod.array(zod.object({\n  \"level\": zod.enum(['Minimal', 'Basic', 'Detailed']),\n  \"description\": zod.string().min(1)\n}))\n}),\n  \"databases\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"sortOrder\": zod.number(),\n  \"displayName\": zod.string().min(1),\n  \"defaultDatabaseName\": zod.string().min(1),\n  \"providerName\": zod.string().min(1),\n  \"isConfigured\": zod.boolean(),\n  \"requiresServer\": zod.boolean(),\n  \"serverPlaceholder\": zod.string().min(1),\n  \"requiresCredentials\": zod.boolean(),\n  \"supportsIntegratedAuthentication\": zod.boolean(),\n  \"requiresConnectionTest\": zod.boolean()\n}))\n})\n\n\nexport const postInstallSetupBodyUserNameMin = 0;\n\nexport const postInstallSetupBodyUserNameMax = 255;\n\n\nexport const postInstallSetupBody = zod.object({\n  \"user\": zod.object({\n  \"name\": zod.string().min(postInstallSetupBodyUserNameMin).max(postInstallSetupBodyUserNameMax),\n  \"email\": zod.string().email().min(1),\n  \"password\": zod.string().min(1),\n  \"subscribeToNewsletter\": zod.boolean()\n}),\n  \"database\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"providerName\": zod.string().min(1),\n  \"server\": zod.string().nullish(),\n  \"name\": zod.string().nullish(),\n  \"username\": zod.string().nullish(),\n  \"password\": zod.string().nullish(),\n  \"useIntegratedAuthentication\": zod.boolean(),\n  \"connectionString\": zod.string().nullish(),\n  \"trustServerCertificate\": zod.boolean()\n}),\n  \"telemetryLevel\": zod.enum(['Minimal', 'Basic', 'Detailed'])\n})\n\n\nexport const postInstallValidateDatabaseBody = zod.object({\n  \"id\": zod.string().uuid(),\n  \"providerName\": zod.string().min(1),\n  \"server\": zod.string().nullish(),\n  \"name\": zod.string().nullish(),\n  \"username\": zod.string().nullish(),\n  \"password\": zod.string().nullish(),\n  \"useIntegratedAuthentication\": zod.boolean(),\n  \"connectionString\": zod.string().nullish(),\n  \"trustServerCertificate\": zod.boolean()\n})\n\n\nexport const getItemLanguageQueryParams = zod.object({\n  \"isoCode\": zod.array(zod.string()).optional()\n})\n\nexport const getItemLanguageResponseItem = zod.object({\n  \"name\": zod.string().min(1),\n  \"isoCode\": zod.string().min(1)\n})\nexport const getItemLanguageResponse = zod.array(getItemLanguageResponseItem)\n\n\nexport const getItemLanguageDefaultResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"isoCode\": zod.string().min(1)\n})\n\n\nexport const getLanguageQuerySkipDefault = 0;export const getLanguageQueryTakeDefault = 100;\n\nexport const getLanguageQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getLanguageQueryTakeDefault)\n})\n\nexport const getLanguageResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string().min(1),\n  \"isDefault\": zod.boolean(),\n  \"isMandatory\": zod.boolean(),\n  \"fallbackIsoCode\": zod.string().nullish(),\n  \"isoCode\": zod.string().min(1)\n}))\n})\n\n\nexport const postLanguageBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"isDefault\": zod.boolean(),\n  \"isMandatory\": zod.boolean(),\n  \"fallbackIsoCode\": zod.string().nullish(),\n  \"isoCode\": zod.string().min(1)\n})\n\n\nexport const getLanguageByIsoCodeParams = zod.object({\n  \"isoCode\": zod.string()\n})\n\nexport const getLanguageByIsoCodeResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"isDefault\": zod.boolean(),\n  \"isMandatory\": zod.boolean(),\n  \"fallbackIsoCode\": zod.string().nullish(),\n  \"isoCode\": zod.string().min(1)\n})\n\n\nexport const deleteLanguageByIsoCodeParams = zod.object({\n  \"isoCode\": zod.string()\n})\n\n\nexport const putLanguageByIsoCodeParams = zod.object({\n  \"isoCode\": zod.string()\n})\n\nexport const putLanguageByIsoCodeBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"isDefault\": zod.boolean(),\n  \"isMandatory\": zod.boolean(),\n  \"fallbackIsoCode\": zod.string().nullish()\n})\n\n\nexport const getLogViewerLevelQuerySkipDefault = 0;export const getLogViewerLevelQueryTakeDefault = 100;\n\nexport const getLogViewerLevelQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getLogViewerLevelQueryTakeDefault)\n})\n\nexport const getLogViewerLevelResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"level\": zod.enum(['Verbose', 'Debug', 'Information', 'Warning', 'Error', 'Fatal'])\n}))\n})\n\n\nexport const getLogViewerLevelCountQueryParams = zod.object({\n  \"startDate\": zod.string().datetime({\"local\":true}).optional(),\n  \"endDate\": zod.string().datetime({\"local\":true}).optional()\n})\n\nexport const getLogViewerLevelCountResponse = zod.object({\n  \"information\": zod.number(),\n  \"debug\": zod.number(),\n  \"warning\": zod.number(),\n  \"error\": zod.number(),\n  \"fatal\": zod.number()\n})\n\n\nexport const getLogViewerLogQuerySkipDefault = 0;export const getLogViewerLogQueryTakeDefault = 100;\n\nexport const getLogViewerLogQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getLogViewerLogQueryTakeDefault),\n  \"orderDirection\": zod.enum(['Ascending', 'Descending']).optional(),\n  \"filterExpression\": zod.string().optional(),\n  \"logLevel\": zod.array(zod.enum(['Verbose', 'Debug', 'Information', 'Warning', 'Error', 'Fatal'])).optional(),\n  \"startDate\": zod.string().datetime({\"local\":true}).optional(),\n  \"endDate\": zod.string().datetime({\"local\":true}).optional()\n})\n\nexport const getLogViewerLogResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"timestamp\": zod.string().datetime({\"local\":true}),\n  \"level\": zod.enum(['Verbose', 'Debug', 'Information', 'Warning', 'Error', 'Fatal']),\n  \"messageTemplate\": zod.string().nullish(),\n  \"renderedMessage\": zod.string().nullish(),\n  \"properties\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"value\": zod.string().nullish()\n})),\n  \"exception\": zod.string().nullish()\n}))\n})\n\n\nexport const getLogViewerMessageTemplateQuerySkipDefault = 0;export const getLogViewerMessageTemplateQueryTakeDefault = 100;\n\nexport const getLogViewerMessageTemplateQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getLogViewerMessageTemplateQueryTakeDefault),\n  \"startDate\": zod.string().datetime({\"local\":true}).optional(),\n  \"endDate\": zod.string().datetime({\"local\":true}).optional()\n})\n\nexport const getLogViewerMessageTemplateResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"messageTemplate\": zod.string().nullish(),\n  \"count\": zod.number()\n}))\n})\n\n\nexport const getLogViewerSavedSearchQuerySkipDefault = 0;export const getLogViewerSavedSearchQueryTakeDefault = 100;\n\nexport const getLogViewerSavedSearchQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getLogViewerSavedSearchQueryTakeDefault)\n})\n\nexport const getLogViewerSavedSearchResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"query\": zod.string()\n}))\n})\n\n\nexport const postLogViewerSavedSearchBody = zod.object({\n  \"name\": zod.string(),\n  \"query\": zod.string()\n})\n\n\nexport const getLogViewerSavedSearchByNameParams = zod.object({\n  \"name\": zod.string()\n})\n\nexport const getLogViewerSavedSearchByNameResponse = zod.object({\n  \"name\": zod.string(),\n  \"query\": zod.string()\n})\n\n\nexport const deleteLogViewerSavedSearchByNameParams = zod.object({\n  \"name\": zod.string()\n})\n\n\nexport const getLogViewerValidateLogsSizeQueryParams = zod.object({\n  \"startDate\": zod.string().datetime({\"local\":true}).optional(),\n  \"endDate\": zod.string().datetime({\"local\":true}).optional()\n})\n\n\nexport const getManifestManifestResponseItem = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().nullish(),\n  \"version\": zod.string().nullish(),\n  \"extensions\": zod.array(zod.any())\n})\nexport const getManifestManifestResponse = zod.array(getManifestManifestResponseItem)\n\n\nexport const getManifestManifestPrivateResponseItem = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().nullish(),\n  \"version\": zod.string().nullish(),\n  \"extensions\": zod.array(zod.any())\n})\nexport const getManifestManifestPrivateResponse = zod.array(getManifestManifestPrivateResponseItem)\n\n\nexport const getManifestManifestPublicResponseItem = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().nullish(),\n  \"version\": zod.string().nullish(),\n  \"extensions\": zod.array(zod.any())\n})\nexport const getManifestManifestPublicResponse = zod.array(getManifestManifestPublicResponseItem)\n\n\nexport const getItemMediaTypeQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemMediaTypeResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string().nullish()\n})\nexport const getItemMediaTypeResponse = zod.array(getItemMediaTypeResponseItem)\n\n\nexport const getItemMediaTypeAllowedQuerySkipDefault = 0;export const getItemMediaTypeAllowedQueryTakeDefault = 100;\n\nexport const getItemMediaTypeAllowedQueryParams = zod.object({\n  \"fileExtension\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getItemMediaTypeAllowedQueryTakeDefault)\n})\n\nexport const getItemMediaTypeAllowedResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string().nullish()\n})),\n  \"total\": zod.number()\n})\n\n\nexport const getItemMediaTypeFoldersQuerySkipDefault = 0;export const getItemMediaTypeFoldersQueryTakeDefault = 100;\n\nexport const getItemMediaTypeFoldersQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getItemMediaTypeFoldersQueryTakeDefault)\n})\n\nexport const getItemMediaTypeFoldersResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string().nullish()\n})),\n  \"total\": zod.number()\n})\n\n\nexport const getItemMediaTypeSearchQuerySkipDefault = 0;export const getItemMediaTypeSearchQueryTakeDefault = 100;\n\nexport const getItemMediaTypeSearchQueryParams = zod.object({\n  \"query\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getItemMediaTypeSearchQueryTakeDefault)\n})\n\nexport const getItemMediaTypeSearchResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string().nullish()\n})),\n  \"total\": zod.number()\n})\n\n\nexport const postMediaTypeBody = zod.object({\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().min(1),\n  \"allowedAsRoot\": zod.boolean(),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"isElement\": zod.boolean(),\n  \"properties\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"container\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sortOrder\": zod.number(),\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"dataType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"validation\": zod.object({\n  \"mandatory\": zod.boolean(),\n  \"mandatoryMessage\": zod.string().nullish(),\n  \"regEx\": zod.string().nullish(),\n  \"regExMessage\": zod.string().nullish()\n}),\n  \"appearance\": zod.object({\n  \"labelOnTop\": zod.boolean()\n})\n})),\n  \"containers\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().min(1),\n  \"sortOrder\": zod.number()\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"allowedMediaTypes\": zod.array(zod.object({\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"sortOrder\": zod.number()\n})),\n  \"compositions\": zod.array(zod.object({\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"compositionType\": zod.enum(['Composition', 'Inheritance'])\n})),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getMediaTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMediaTypeByIdResponse = zod.object({\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().min(1),\n  \"allowedAsRoot\": zod.boolean(),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"isElement\": zod.boolean(),\n  \"properties\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"container\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sortOrder\": zod.number(),\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"dataType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"validation\": zod.object({\n  \"mandatory\": zod.boolean(),\n  \"mandatoryMessage\": zod.string().nullish(),\n  \"regEx\": zod.string().nullish(),\n  \"regExMessage\": zod.string().nullish()\n}),\n  \"appearance\": zod.object({\n  \"labelOnTop\": zod.boolean()\n})\n})),\n  \"containers\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().min(1),\n  \"sortOrder\": zod.number()\n})),\n  \"id\": zod.string().uuid(),\n  \"allowedMediaTypes\": zod.array(zod.object({\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"sortOrder\": zod.number()\n})),\n  \"compositions\": zod.array(zod.object({\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"compositionType\": zod.enum(['Composition', 'Inheritance'])\n})),\n  \"isDeletable\": zod.boolean(),\n  \"aliasCanBeChanged\": zod.boolean()\n})\n\n\nexport const deleteMediaTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putMediaTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMediaTypeByIdBody = zod.object({\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().min(1),\n  \"allowedAsRoot\": zod.boolean(),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"isElement\": zod.boolean(),\n  \"properties\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"container\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sortOrder\": zod.number(),\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"dataType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"validation\": zod.object({\n  \"mandatory\": zod.boolean(),\n  \"mandatoryMessage\": zod.string().nullish(),\n  \"regEx\": zod.string().nullish(),\n  \"regExMessage\": zod.string().nullish()\n}),\n  \"appearance\": zod.object({\n  \"labelOnTop\": zod.boolean()\n})\n})),\n  \"containers\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().min(1),\n  \"sortOrder\": zod.number()\n})),\n  \"allowedMediaTypes\": zod.array(zod.object({\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"sortOrder\": zod.number()\n})),\n  \"compositions\": zod.array(zod.object({\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"compositionType\": zod.enum(['Composition', 'Inheritance'])\n}))\n})\n\n\nexport const getMediaTypeByIdAllowedChildrenParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMediaTypeByIdAllowedChildrenQuerySkipDefault = 0;export const getMediaTypeByIdAllowedChildrenQueryTakeDefault = 100;\n\nexport const getMediaTypeByIdAllowedChildrenQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getMediaTypeByIdAllowedChildrenQueryTakeDefault)\n})\n\nexport const getMediaTypeByIdAllowedChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().nullish()\n}))\n})\n\n\nexport const getMediaTypeByIdCompositionReferencesParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMediaTypeByIdCompositionReferencesResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string()\n})\nexport const getMediaTypeByIdCompositionReferencesResponse = zod.array(getMediaTypeByIdCompositionReferencesResponseItem)\n\n\nexport const postMediaTypeByIdCopyParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postMediaTypeByIdCopyBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getMediaTypeByIdExportParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMediaTypeByIdExportResponse = zod.instanceof(FileLike)\n\n\nexport const putMediaTypeByIdImportParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMediaTypeByIdImportBody = zod.object({\n  \"file\": zod.object({\n  \"id\": zod.string().uuid()\n})\n})\n\n\nexport const putMediaTypeByIdMoveParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMediaTypeByIdMoveBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getMediaTypeAllowedAtRootQuerySkipDefault = 0;export const getMediaTypeAllowedAtRootQueryTakeDefault = 100;\n\nexport const getMediaTypeAllowedAtRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getMediaTypeAllowedAtRootQueryTakeDefault)\n})\n\nexport const getMediaTypeAllowedAtRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().nullish()\n}))\n})\n\n\nexport const postMediaTypeAvailableCompositionsBody = zod.object({\n  \"id\": zod.string().uuid().nullish(),\n  \"currentPropertyAliases\": zod.array(zod.string()),\n  \"currentCompositeIds\": zod.array(zod.string().uuid())\n})\n\nexport const postMediaTypeAvailableCompositionsResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string(),\n  \"folderPath\": zod.array(zod.string()),\n  \"isCompatible\": zod.boolean()\n})\nexport const postMediaTypeAvailableCompositionsResponse = zod.array(postMediaTypeAvailableCompositionsResponseItem)\n\n\nexport const getMediaTypeConfigurationResponse = zod.object({\n  \"reservedFieldNames\": zod.array(zod.string())\n})\n\n\nexport const postMediaTypeFolderBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getMediaTypeFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMediaTypeFolderByIdResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"id\": zod.string().uuid()\n})\n\n\nexport const deleteMediaTypeFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putMediaTypeFolderByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMediaTypeFolderByIdBody = zod.object({\n  \"name\": zod.string().min(1)\n})\n\n\nexport const postMediaTypeImportBody = zod.object({\n  \"file\": zod.object({\n  \"id\": zod.string().uuid()\n})\n})\n\n\nexport const getTreeMediaTypeAncestorsQueryParams = zod.object({\n  \"descendantId\": zod.string().uuid().optional()\n})\n\nexport const getTreeMediaTypeAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"icon\": zod.string(),\n  \"isDeletable\": zod.boolean()\n})\nexport const getTreeMediaTypeAncestorsResponse = zod.array(getTreeMediaTypeAncestorsResponseItem)\n\n\nexport const getTreeMediaTypeChildrenQuerySkipDefault = 0;export const getTreeMediaTypeChildrenQueryTakeDefault = 100;export const getTreeMediaTypeChildrenQueryFoldersOnlyDefault = false;\n\nexport const getTreeMediaTypeChildrenQueryParams = zod.object({\n  \"parentId\": zod.string().uuid().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeMediaTypeChildrenQueryTakeDefault),\n  \"foldersOnly\": zod.coerce.boolean().optional()\n})\n\nexport const getTreeMediaTypeChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"icon\": zod.string(),\n  \"isDeletable\": zod.boolean()\n}))\n})\n\n\nexport const getTreeMediaTypeRootQuerySkipDefault = 0;export const getTreeMediaTypeRootQueryTakeDefault = 100;export const getTreeMediaTypeRootQueryFoldersOnlyDefault = false;\n\nexport const getTreeMediaTypeRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeMediaTypeRootQueryTakeDefault),\n  \"foldersOnly\": zod.coerce.boolean().optional()\n})\n\nexport const getTreeMediaTypeRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"isFolder\": zod.boolean(),\n  \"icon\": zod.string(),\n  \"isDeletable\": zod.boolean()\n}))\n})\n\n\nexport const getCollectionMediaQueryOrderByDefault = \"updateDate\";export const getCollectionMediaQuerySkipDefault = 0;export const getCollectionMediaQueryTakeDefault = 100;\n\nexport const getCollectionMediaQueryParams = zod.object({\n  \"id\": zod.string().uuid().optional(),\n  \"dataTypeId\": zod.string().uuid().optional(),\n  \"orderBy\": zod.string().default(getCollectionMediaQueryOrderByDefault),\n  \"orderDirection\": zod.enum(['Ascending', 'Descending']).optional(),\n  \"filter\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getCollectionMediaQueryTakeDefault)\n})\n\nexport const getCollectionMediaResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish(),\n  \"editorAlias\": zod.string().min(1)\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true})\n})),\n  \"id\": zod.string().uuid(),\n  \"creator\": zod.string().nullish(),\n  \"sortOrder\": zod.number(),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"alias\": zod.string(),\n  \"icon\": zod.string()\n})\n}))\n})\n\n\nexport const getItemMediaQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemMediaResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"isTrashed\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"hasChildren\": zod.boolean(),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish()\n}))\n})\nexport const getItemMediaResponse = zod.array(getItemMediaResponseItem)\n\n\nexport const getItemMediaSearchQuerySkipDefault = 0;export const getItemMediaSearchQueryTakeDefault = 100;\n\nexport const getItemMediaSearchQueryParams = zod.object({\n  \"query\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getItemMediaSearchQueryTakeDefault),\n  \"parentId\": zod.string().uuid().optional(),\n  \"allowedMediaTypes\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemMediaSearchResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"isTrashed\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"hasChildren\": zod.boolean(),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish()\n}))\n})),\n  \"total\": zod.number()\n})\n\n\nexport const postMediaBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid()\n})\n})\n\n\nexport const getMediaByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMediaByIdResponse = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish(),\n  \"editorAlias\": zod.string().min(1)\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true})\n})),\n  \"id\": zod.string().uuid(),\n  \"urls\": zod.array(zod.object({\n  \"culture\": zod.string().nullable(),\n  \"url\": zod.string()\n})),\n  \"isTrashed\": zod.boolean(),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n})\n\n\nexport const deleteMediaByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putMediaByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMediaByIdBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n}))\n})\n\n\nexport const getMediaByIdAuditLogParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMediaByIdAuditLogQuerySkipDefault = 0;export const getMediaByIdAuditLogQueryTakeDefault = 100;\n\nexport const getMediaByIdAuditLogQueryParams = zod.object({\n  \"orderDirection\": zod.enum(['Ascending', 'Descending']).optional(),\n  \"sinceDate\": zod.string().datetime({\"local\":true}).optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getMediaByIdAuditLogQueryTakeDefault)\n})\n\nexport const getMediaByIdAuditLogResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"user\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"timestamp\": zod.string().datetime({\"local\":true}),\n  \"logType\": zod.enum(['New', 'Save', 'SaveVariant', 'Open', 'Delete', 'Publish', 'PublishVariant', 'SendToPublish', 'SendToPublishVariant', 'Unpublish', 'UnpublishVariant', 'Move', 'Copy', 'AssignDomain', 'PublicAccess', 'Sort', 'Notify', 'System', 'RollBack', 'PackagerInstall', 'PackagerUninstall', 'Custom', 'ContentVersionPreventCleanup', 'ContentVersionEnableCleanup']),\n  \"comment\": zod.string().nullish(),\n  \"parameters\": zod.string().nullish()\n}))\n})\n\n\nexport const putMediaByIdMoveParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMediaByIdMoveBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const putMediaByIdMoveToRecycleBinParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const getMediaByIdReferencedByParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMediaByIdReferencedByQuerySkipDefault = 0;export const getMediaByIdReferencedByQueryTakeDefault = 20;\n\nexport const getMediaByIdReferencedByQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getMediaByIdReferencedByQueryTakeDefault)\n})\n\nexport const getMediaByIdReferencedByResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"$type\": zod.enum(['DefaultReferenceResponseModel']),\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().nullish(),\n  \"icon\": zod.string().nullish()\n}).or(zod.object({\n  \"$type\": zod.enum(['DocumentReferenceResponseModel']),\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string().nullish(),\n  \"published\": zod.boolean().nullish(),\n  \"documentType\": zod.object({\n  \"icon\": zod.string().nullish(),\n  \"alias\": zod.string().nullish(),\n  \"name\": zod.string().nullish()\n})\n})).or(zod.object({\n  \"$type\": zod.enum(['MediaReferenceResponseModel']),\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string().nullish(),\n  \"mediaType\": zod.object({\n  \"icon\": zod.string().nullish(),\n  \"alias\": zod.string().nullish(),\n  \"name\": zod.string().nullish()\n})\n})))\n})\n\n\nexport const getMediaByIdReferencedDescendantsParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMediaByIdReferencedDescendantsQuerySkipDefault = 0;export const getMediaByIdReferencedDescendantsQueryTakeDefault = 20;\n\nexport const getMediaByIdReferencedDescendantsQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getMediaByIdReferencedDescendantsQueryTakeDefault)\n})\n\nexport const getMediaByIdReferencedDescendantsResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const putMediaByIdValidateParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMediaByIdValidateBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n}))\n})\n\n\nexport const getMediaAreReferencedQuerySkipDefault = 0;export const getMediaAreReferencedQueryTakeDefault = 20;\n\nexport const getMediaAreReferencedQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getMediaAreReferencedQueryTakeDefault)\n})\n\nexport const getMediaAreReferencedResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const getMediaConfigurationResponse = zod.object({\n  \"disableDeleteWhenReferenced\": zod.boolean(),\n  \"disableUnpublishWhenReferenced\": zod.boolean(),\n  \"reservedFieldNames\": zod.array(zod.string())\n})\n\n\nexport const putMediaSortBody = zod.object({\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sorting\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"sortOrder\": zod.number()\n}))\n})\n\n\nexport const getMediaUrlsQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getMediaUrlsResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"urlInfos\": zod.array(zod.object({\n  \"culture\": zod.string().nullable(),\n  \"url\": zod.string()\n}))\n})\nexport const getMediaUrlsResponse = zod.array(getMediaUrlsResponseItem)\n\n\nexport const postMediaValidateBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid()\n})\n})\n\n\nexport const deleteRecycleBinMediaByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const getRecycleBinMediaByIdOriginalParentParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getRecycleBinMediaByIdOriginalParentResponse = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putRecycleBinMediaByIdRestoreParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putRecycleBinMediaByIdRestoreBody = zod.object({\n  \"target\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getRecycleBinMediaChildrenQuerySkipDefault = 0;export const getRecycleBinMediaChildrenQueryTakeDefault = 100;\n\nexport const getRecycleBinMediaChildrenQueryParams = zod.object({\n  \"parentId\": zod.string().uuid().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getRecycleBinMediaChildrenQueryTakeDefault)\n})\n\nexport const getRecycleBinMediaChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"hasChildren\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish()\n}))\n}))\n})\n\n\nexport const getRecycleBinMediaRootQuerySkipDefault = 0;export const getRecycleBinMediaRootQueryTakeDefault = 100;\n\nexport const getRecycleBinMediaRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getRecycleBinMediaRootQueryTakeDefault)\n})\n\nexport const getRecycleBinMediaRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"hasChildren\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish()\n}))\n}))\n})\n\n\nexport const getTreeMediaAncestorsQueryParams = zod.object({\n  \"descendantId\": zod.string().uuid().optional()\n})\n\nexport const getTreeMediaAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"noAccess\": zod.boolean(),\n  \"isTrashed\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish()\n}))\n})\nexport const getTreeMediaAncestorsResponse = zod.array(getTreeMediaAncestorsResponseItem)\n\n\nexport const getTreeMediaChildrenQuerySkipDefault = 0;export const getTreeMediaChildrenQueryTakeDefault = 100;\n\nexport const getTreeMediaChildrenQueryParams = zod.object({\n  \"parentId\": zod.string().uuid().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeMediaChildrenQueryTakeDefault),\n  \"dataTypeId\": zod.string().uuid().optional()\n})\n\nexport const getTreeMediaChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"noAccess\": zod.boolean(),\n  \"isTrashed\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish()\n}))\n}))\n})\n\n\nexport const getTreeMediaRootQuerySkipDefault = 0;export const getTreeMediaRootQueryTakeDefault = 100;\n\nexport const getTreeMediaRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeMediaRootQueryTakeDefault),\n  \"dataTypeId\": zod.string().uuid().optional()\n})\n\nexport const getTreeMediaRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"noAccess\": zod.boolean(),\n  \"isTrashed\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"mediaType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish()\n}))\n}))\n})\n\n\nexport const getItemMemberGroupQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemMemberGroupResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string()\n})\nexport const getItemMemberGroupResponse = zod.array(getItemMemberGroupResponseItem)\n\n\nexport const getMemberGroupQuerySkipDefault = 0;export const getMemberGroupQueryTakeDefault = 100;\n\nexport const getMemberGroupQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getMemberGroupQueryTakeDefault)\n})\n\nexport const getMemberGroupResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const postMemberGroupBody = zod.object({\n  \"name\": zod.string(),\n  \"id\": zod.string().uuid().nullish()\n})\n\n\nexport const getMemberGroupByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMemberGroupByIdResponse = zod.object({\n  \"name\": zod.string(),\n  \"id\": zod.string().uuid()\n})\n\n\nexport const deleteMemberGroupByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putMemberGroupByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMemberGroupByIdBody = zod.object({\n  \"name\": zod.string()\n})\n\n\nexport const getTreeMemberGroupRootQuerySkipDefault = 0;export const getTreeMemberGroupRootQueryTakeDefault = 100;\n\nexport const getTreeMemberGroupRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeMemberGroupRootQueryTakeDefault)\n})\n\nexport const getTreeMemberGroupRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string()\n}))\n})\n\n\nexport const getItemMemberTypeQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemMemberTypeResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string().nullish()\n})\nexport const getItemMemberTypeResponse = zod.array(getItemMemberTypeResponseItem)\n\n\nexport const getItemMemberTypeSearchQuerySkipDefault = 0;export const getItemMemberTypeSearchQueryTakeDefault = 100;\n\nexport const getItemMemberTypeSearchQueryParams = zod.object({\n  \"query\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getItemMemberTypeSearchQueryTakeDefault)\n})\n\nexport const getItemMemberTypeSearchResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string().nullish()\n})),\n  \"total\": zod.number()\n})\n\n\nexport const postMemberTypeBody = zod.object({\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().min(1),\n  \"allowedAsRoot\": zod.boolean(),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"isElement\": zod.boolean(),\n  \"properties\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"container\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sortOrder\": zod.number(),\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"dataType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"validation\": zod.object({\n  \"mandatory\": zod.boolean(),\n  \"mandatoryMessage\": zod.string().nullish(),\n  \"regEx\": zod.string().nullish(),\n  \"regExMessage\": zod.string().nullish()\n}),\n  \"appearance\": zod.object({\n  \"labelOnTop\": zod.boolean()\n}),\n  \"isSensitive\": zod.boolean(),\n  \"visibility\": zod.object({\n  \"memberCanView\": zod.boolean(),\n  \"memberCanEdit\": zod.boolean()\n})\n})),\n  \"containers\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().min(1),\n  \"sortOrder\": zod.number()\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"compositions\": zod.array(zod.object({\n  \"memberType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"compositionType\": zod.enum(['Composition', 'Inheritance'])\n}))\n})\n\n\nexport const getMemberTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMemberTypeByIdResponse = zod.object({\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().min(1),\n  \"allowedAsRoot\": zod.boolean(),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"isElement\": zod.boolean(),\n  \"properties\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"container\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sortOrder\": zod.number(),\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"dataType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"validation\": zod.object({\n  \"mandatory\": zod.boolean(),\n  \"mandatoryMessage\": zod.string().nullish(),\n  \"regEx\": zod.string().nullish(),\n  \"regExMessage\": zod.string().nullish()\n}),\n  \"appearance\": zod.object({\n  \"labelOnTop\": zod.boolean()\n}),\n  \"isSensitive\": zod.boolean(),\n  \"visibility\": zod.object({\n  \"memberCanView\": zod.boolean(),\n  \"memberCanEdit\": zod.boolean()\n})\n})),\n  \"containers\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().min(1),\n  \"sortOrder\": zod.number()\n})),\n  \"id\": zod.string().uuid(),\n  \"compositions\": zod.array(zod.object({\n  \"memberType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"compositionType\": zod.enum(['Composition', 'Inheritance'])\n}))\n})\n\n\nexport const deleteMemberTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putMemberTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMemberTypeByIdBody = zod.object({\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"icon\": zod.string().min(1),\n  \"allowedAsRoot\": zod.boolean(),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"isElement\": zod.boolean(),\n  \"properties\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"container\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"sortOrder\": zod.number(),\n  \"alias\": zod.string().min(1),\n  \"name\": zod.string().min(1),\n  \"description\": zod.string().nullish(),\n  \"dataType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"variesByCulture\": zod.boolean(),\n  \"variesBySegment\": zod.boolean(),\n  \"validation\": zod.object({\n  \"mandatory\": zod.boolean(),\n  \"mandatoryMessage\": zod.string().nullish(),\n  \"regEx\": zod.string().nullish(),\n  \"regExMessage\": zod.string().nullish()\n}),\n  \"appearance\": zod.object({\n  \"labelOnTop\": zod.boolean()\n}),\n  \"isSensitive\": zod.boolean(),\n  \"visibility\": zod.object({\n  \"memberCanView\": zod.boolean(),\n  \"memberCanEdit\": zod.boolean()\n})\n})),\n  \"containers\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string().nullish(),\n  \"type\": zod.string().min(1),\n  \"sortOrder\": zod.number()\n})),\n  \"compositions\": zod.array(zod.object({\n  \"memberType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"compositionType\": zod.enum(['Composition', 'Inheritance'])\n}))\n})\n\n\nexport const getMemberTypeByIdCompositionReferencesParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMemberTypeByIdCompositionReferencesResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string()\n})\nexport const getMemberTypeByIdCompositionReferencesResponse = zod.array(getMemberTypeByIdCompositionReferencesResponseItem)\n\n\nexport const postMemberTypeByIdCopyParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const postMemberTypeAvailableCompositionsBody = zod.object({\n  \"id\": zod.string().uuid().nullish(),\n  \"currentPropertyAliases\": zod.array(zod.string()),\n  \"currentCompositeIds\": zod.array(zod.string().uuid())\n})\n\nexport const postMemberTypeAvailableCompositionsResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string(),\n  \"folderPath\": zod.array(zod.string()),\n  \"isCompatible\": zod.boolean()\n})\nexport const postMemberTypeAvailableCompositionsResponse = zod.array(postMemberTypeAvailableCompositionsResponseItem)\n\n\nexport const getMemberTypeConfigurationResponse = zod.object({\n  \"reservedFieldNames\": zod.array(zod.string())\n})\n\n\nexport const getTreeMemberTypeRootQuerySkipDefault = 0;export const getTreeMemberTypeRootQueryTakeDefault = 100;\n\nexport const getTreeMemberTypeRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeMemberTypeRootQueryTakeDefault)\n})\n\nexport const getTreeMemberTypeRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string(),\n  \"icon\": zod.string()\n}))\n})\n\n\nexport const getFilterMemberQueryOrderByDefault = \"username\";export const getFilterMemberQuerySkipDefault = 0;export const getFilterMemberQueryTakeDefault = 100;\n\nexport const getFilterMemberQueryParams = zod.object({\n  \"memberTypeId\": zod.string().uuid().optional(),\n  \"memberGroupName\": zod.string().optional(),\n  \"isApproved\": zod.coerce.boolean().optional(),\n  \"isLockedOut\": zod.coerce.boolean().optional(),\n  \"orderBy\": zod.string().default(getFilterMemberQueryOrderByDefault),\n  \"orderDirection\": zod.enum(['Ascending', 'Descending']).optional(),\n  \"filter\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getFilterMemberQueryTakeDefault)\n})\n\nexport const getFilterMemberResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish(),\n  \"editorAlias\": zod.string().min(1)\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true})\n})),\n  \"id\": zod.string().uuid(),\n  \"email\": zod.string(),\n  \"username\": zod.string(),\n  \"memberType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"isApproved\": zod.boolean(),\n  \"isLockedOut\": zod.boolean(),\n  \"isTwoFactorEnabled\": zod.boolean(),\n  \"failedPasswordAttempts\": zod.number(),\n  \"lastLoginDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"lastLockoutDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"lastPasswordChangeDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"groups\": zod.array(zod.string().uuid()),\n  \"kind\": zod.enum(['Default', 'Api'])\n}))\n})\n\n\nexport const getItemMemberQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemMemberResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"memberType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish()\n})),\n  \"kind\": zod.enum(['Default', 'Api'])\n})\nexport const getItemMemberResponse = zod.array(getItemMemberResponseItem)\n\n\nexport const getItemMemberSearchQuerySkipDefault = 0;export const getItemMemberSearchQueryTakeDefault = 100;\n\nexport const getItemMemberSearchQueryParams = zod.object({\n  \"query\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getItemMemberSearchQueryTakeDefault),\n  \"allowedMemberTypes\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemMemberSearchResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"memberType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"variants\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"culture\": zod.string().nullish()\n})),\n  \"kind\": zod.enum(['Default', 'Api'])\n})),\n  \"total\": zod.number()\n})\n\n\nexport const postMemberBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"email\": zod.string(),\n  \"username\": zod.string(),\n  \"password\": zod.string(),\n  \"memberType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"groups\": zod.array(zod.string().uuid()).nullish(),\n  \"isApproved\": zod.boolean()\n})\n\n\nexport const getMemberByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getMemberByIdResponse = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish(),\n  \"editorAlias\": zod.string().min(1)\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true})\n})),\n  \"id\": zod.string().uuid(),\n  \"email\": zod.string(),\n  \"username\": zod.string(),\n  \"memberType\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"icon\": zod.string(),\n  \"collection\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n}),\n  \"isApproved\": zod.boolean(),\n  \"isLockedOut\": zod.boolean(),\n  \"isTwoFactorEnabled\": zod.boolean(),\n  \"failedPasswordAttempts\": zod.number(),\n  \"lastLoginDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"lastLockoutDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"lastPasswordChangeDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"groups\": zod.array(zod.string().uuid()),\n  \"kind\": zod.enum(['Default', 'Api'])\n})\n\n\nexport const deleteMemberByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putMemberByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMemberByIdBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"email\": zod.string(),\n  \"username\": zod.string(),\n  \"oldPassword\": zod.string().nullish(),\n  \"newPassword\": zod.string().nullish(),\n  \"groups\": zod.array(zod.string().uuid()).nullish(),\n  \"isApproved\": zod.boolean(),\n  \"isLockedOut\": zod.boolean(),\n  \"isTwoFactorEnabled\": zod.boolean()\n})\n\n\nexport const putMemberByIdValidateParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putMemberByIdValidateBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"email\": zod.string(),\n  \"username\": zod.string(),\n  \"oldPassword\": zod.string().nullish(),\n  \"newPassword\": zod.string().nullish(),\n  \"groups\": zod.array(zod.string().uuid()).nullish(),\n  \"isApproved\": zod.boolean(),\n  \"isLockedOut\": zod.boolean(),\n  \"isTwoFactorEnabled\": zod.boolean()\n})\n\n\nexport const getMemberConfigurationResponse = zod.object({\n  \"reservedFieldNames\": zod.array(zod.string())\n})\n\n\nexport const postMemberValidateBody = zod.object({\n  \"values\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"alias\": zod.string().min(1),\n  \"value\": zod.any().nullish()\n})),\n  \"variants\": zod.array(zod.object({\n  \"culture\": zod.string().nullish(),\n  \"segment\": zod.string().nullish(),\n  \"name\": zod.string().min(1)\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"email\": zod.string(),\n  \"username\": zod.string(),\n  \"password\": zod.string(),\n  \"memberType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"groups\": zod.array(zod.string().uuid()).nullish(),\n  \"isApproved\": zod.boolean()\n})\n\n\nexport const getModelsBuilderDashboardResponse = zod.object({\n  \"mode\": zod.enum(['Nothing', 'InMemoryAuto', 'SourceCodeManual', 'SourceCodeAuto']),\n  \"canGenerate\": zod.boolean(),\n  \"outOfDateModels\": zod.boolean(),\n  \"lastError\": zod.string().nullish(),\n  \"version\": zod.string().nullish(),\n  \"modelsNamespace\": zod.string().nullish(),\n  \"trackingOutOfDateModels\": zod.boolean()\n})\n\n\nexport const getModelsBuilderStatusResponse = zod.object({\n  \"status\": zod.enum(['OutOfDate', 'Current', 'Unknown'])\n})\n\n\nexport const getObjectTypesQuerySkipDefault = 0;export const getObjectTypesQueryTakeDefault = 100;\n\nexport const getObjectTypesQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getObjectTypesQueryTakeDefault)\n})\n\nexport const getObjectTypesResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string().nullish(),\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const getOembedQueryQueryParams = zod.object({\n  \"url\": zod.string().url().optional(),\n  \"maxWidth\": zod.coerce.number().optional(),\n  \"maxHeight\": zod.coerce.number().optional()\n})\n\nexport const getOembedQueryResponse = zod.object({\n  \"markup\": zod.string()\n})\n\n\nexport const postPackageByNameRunMigrationParams = zod.object({\n  \"name\": zod.string()\n})\n\n\nexport const getPackageConfigurationResponse = zod.object({\n  \"marketplaceUrl\": zod.string()\n})\n\n\nexport const getPackageCreatedQuerySkipDefault = 0;export const getPackageCreatedQueryTakeDefault = 100;\n\nexport const getPackageCreatedQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getPackageCreatedQueryTakeDefault)\n})\n\nexport const getPackageCreatedResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"contentNodeId\": zod.string().nullish(),\n  \"contentLoadChildNodes\": zod.boolean(),\n  \"mediaIds\": zod.array(zod.string().uuid()),\n  \"mediaLoadChildNodes\": zod.boolean(),\n  \"documentTypes\": zod.array(zod.string()),\n  \"mediaTypes\": zod.array(zod.string()),\n  \"dataTypes\": zod.array(zod.string()),\n  \"templates\": zod.array(zod.string()),\n  \"partialViews\": zod.array(zod.string()),\n  \"stylesheets\": zod.array(zod.string()),\n  \"scripts\": zod.array(zod.string()),\n  \"languages\": zod.array(zod.string()),\n  \"dictionaryItems\": zod.array(zod.string()),\n  \"id\": zod.string().uuid(),\n  \"packagePath\": zod.string()\n}))\n})\n\n\nexport const postPackageCreatedBody = zod.object({\n  \"name\": zod.string(),\n  \"contentNodeId\": zod.string().nullish(),\n  \"contentLoadChildNodes\": zod.boolean(),\n  \"mediaIds\": zod.array(zod.string().uuid()),\n  \"mediaLoadChildNodes\": zod.boolean(),\n  \"documentTypes\": zod.array(zod.string()),\n  \"mediaTypes\": zod.array(zod.string()),\n  \"dataTypes\": zod.array(zod.string()),\n  \"templates\": zod.array(zod.string()),\n  \"partialViews\": zod.array(zod.string()),\n  \"stylesheets\": zod.array(zod.string()),\n  \"scripts\": zod.array(zod.string()),\n  \"languages\": zod.array(zod.string()),\n  \"dictionaryItems\": zod.array(zod.string()),\n  \"id\": zod.string().uuid().nullish()\n})\n\n\nexport const getPackageCreatedByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getPackageCreatedByIdResponse = zod.object({\n  \"name\": zod.string(),\n  \"contentNodeId\": zod.string().nullish(),\n  \"contentLoadChildNodes\": zod.boolean(),\n  \"mediaIds\": zod.array(zod.string().uuid()),\n  \"mediaLoadChildNodes\": zod.boolean(),\n  \"documentTypes\": zod.array(zod.string()),\n  \"mediaTypes\": zod.array(zod.string()),\n  \"dataTypes\": zod.array(zod.string()),\n  \"templates\": zod.array(zod.string()),\n  \"partialViews\": zod.array(zod.string()),\n  \"stylesheets\": zod.array(zod.string()),\n  \"scripts\": zod.array(zod.string()),\n  \"languages\": zod.array(zod.string()),\n  \"dictionaryItems\": zod.array(zod.string()),\n  \"id\": zod.string().uuid(),\n  \"packagePath\": zod.string()\n})\n\n\nexport const deletePackageCreatedByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putPackageCreatedByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putPackageCreatedByIdBody = zod.object({\n  \"name\": zod.string(),\n  \"contentNodeId\": zod.string().nullish(),\n  \"contentLoadChildNodes\": zod.boolean(),\n  \"mediaIds\": zod.array(zod.string().uuid()),\n  \"mediaLoadChildNodes\": zod.boolean(),\n  \"documentTypes\": zod.array(zod.string()),\n  \"mediaTypes\": zod.array(zod.string()),\n  \"dataTypes\": zod.array(zod.string()),\n  \"templates\": zod.array(zod.string()),\n  \"partialViews\": zod.array(zod.string()),\n  \"stylesheets\": zod.array(zod.string()),\n  \"scripts\": zod.array(zod.string()),\n  \"languages\": zod.array(zod.string()),\n  \"dictionaryItems\": zod.array(zod.string()),\n  \"packagePath\": zod.string()\n})\n\n\nexport const getPackageCreatedByIdDownloadParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getPackageCreatedByIdDownloadResponse = zod.instanceof(FileLike)\n\n\nexport const getPackageMigrationStatusQuerySkipDefault = 0;export const getPackageMigrationStatusQueryTakeDefault = 100;\n\nexport const getPackageMigrationStatusQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getPackageMigrationStatusQueryTakeDefault)\n})\n\nexport const getPackageMigrationStatusResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"packageName\": zod.string(),\n  \"hasPendingMigrations\": zod.boolean()\n}))\n})\n\n\nexport const getItemPartialViewQueryParams = zod.object({\n  \"path\": zod.array(zod.string()).optional()\n})\n\nexport const getItemPartialViewResponseItem = zod.object({\n  \"path\": zod.string(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n})\nexport const getItemPartialViewResponse = zod.array(getItemPartialViewResponseItem)\n\n\nexport const postPartialViewBody = zod.object({\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"content\": zod.string()\n})\n\n\nexport const getPartialViewByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const getPartialViewByPathResponse = zod.object({\n  \"path\": zod.string(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"content\": zod.string()\n})\n\n\nexport const deletePartialViewByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\n\nexport const putPartialViewByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const putPartialViewByPathBody = zod.object({\n  \"content\": zod.string()\n})\n\n\nexport const putPartialViewByPathRenameParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const putPartialViewByPathRenameBody = zod.object({\n  \"name\": zod.string()\n})\n\n\nexport const postPartialViewFolderBody = zod.object({\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish()\n})\n\n\nexport const getPartialViewFolderByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const getPartialViewFolderByPathResponse = zod.object({\n  \"path\": zod.string(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish()\n})\n\n\nexport const deletePartialViewFolderByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\n\nexport const getPartialViewSnippetQuerySkipDefault = 0;export const getPartialViewSnippetQueryTakeDefault = 100;\n\nexport const getPartialViewSnippetQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getPartialViewSnippetQueryTakeDefault)\n})\n\nexport const getPartialViewSnippetResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string(),\n  \"name\": zod.string()\n}))\n})\n\n\nexport const getPartialViewSnippetByIdParams = zod.object({\n  \"id\": zod.string()\n})\n\nexport const getPartialViewSnippetByIdResponse = zod.object({\n  \"id\": zod.string(),\n  \"name\": zod.string(),\n  \"content\": zod.string()\n})\n\n\nexport const getTreePartialViewAncestorsQueryParams = zod.object({\n  \"descendantPath\": zod.string().optional()\n})\n\nexport const getTreePartialViewAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n})\nexport const getTreePartialViewAncestorsResponse = zod.array(getTreePartialViewAncestorsResponseItem)\n\n\nexport const getTreePartialViewChildrenQuerySkipDefault = 0;export const getTreePartialViewChildrenQueryTakeDefault = 100;\n\nexport const getTreePartialViewChildrenQueryParams = zod.object({\n  \"parentPath\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreePartialViewChildrenQueryTakeDefault)\n})\n\nexport const getTreePartialViewChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n}))\n})\n\n\nexport const getTreePartialViewRootQuerySkipDefault = 0;export const getTreePartialViewRootQueryTakeDefault = 100;\n\nexport const getTreePartialViewRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreePartialViewRootQueryTakeDefault)\n})\n\nexport const getTreePartialViewRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n}))\n})\n\n\nexport const getProfilingStatusResponse = zod.object({\n  \"enabled\": zod.boolean()\n})\n\n\nexport const putProfilingStatusBody = zod.object({\n  \"enabled\": zod.boolean()\n})\n\n\nexport const getPropertyTypeIsUsedQueryParams = zod.object({\n  \"contentTypeId\": zod.string().uuid().optional(),\n  \"propertyAlias\": zod.string().optional()\n})\n\nexport const getPropertyTypeIsUsedResponse = zod.boolean()\n\n\nexport const getRedirectManagementQuerySkipDefault = 0;export const getRedirectManagementQueryTakeDefault = 100;\n\nexport const getRedirectManagementQueryParams = zod.object({\n  \"filter\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getRedirectManagementQueryTakeDefault)\n})\n\nexport const getRedirectManagementResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"originalUrl\": zod.string(),\n  \"destinationUrl\": zod.string(),\n  \"created\": zod.string().datetime({\"local\":true}),\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"culture\": zod.string().nullish()\n}))\n})\n\n\nexport const getRedirectManagementByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getRedirectManagementByIdQuerySkipDefault = 0;export const getRedirectManagementByIdQueryTakeDefault = 100;\n\nexport const getRedirectManagementByIdQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getRedirectManagementByIdQueryTakeDefault)\n})\n\nexport const getRedirectManagementByIdResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"originalUrl\": zod.string(),\n  \"destinationUrl\": zod.string(),\n  \"created\": zod.string().datetime({\"local\":true}),\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"culture\": zod.string().nullish()\n}))\n})\n\n\nexport const deleteRedirectManagementByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const getRedirectManagementStatusResponse = zod.object({\n  \"status\": zod.enum(['Enabled', 'Disabled']),\n  \"userIsAdmin\": zod.boolean()\n})\n\n\nexport const postRedirectManagementStatusQueryParams = zod.object({\n  \"status\": zod.enum(['Enabled', 'Disabled']).optional()\n})\n\n\nexport const getItemRelationTypeQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemRelationTypeResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"isDeletable\": zod.boolean()\n})\nexport const getItemRelationTypeResponse = zod.array(getItemRelationTypeResponseItem)\n\n\nexport const getRelationTypeQuerySkipDefault = 0;export const getRelationTypeQueryTakeDefault = 100;\n\nexport const getRelationTypeQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getRelationTypeQueryTakeDefault)\n})\n\nexport const getRelationTypeResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string().min(1),\n  \"isBidirectional\": zod.boolean(),\n  \"isDependency\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"alias\": zod.string().nullish(),\n  \"parentObject\": zod.object({\n  \"name\": zod.string().nullish(),\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"childObject\": zod.object({\n  \"name\": zod.string().nullish(),\n  \"id\": zod.string().uuid()\n}).nullish()\n}))\n})\n\n\nexport const getRelationTypeByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getRelationTypeByIdResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"isBidirectional\": zod.boolean(),\n  \"isDependency\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"alias\": zod.string().nullish(),\n  \"parentObject\": zod.object({\n  \"name\": zod.string().nullish(),\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"childObject\": zod.object({\n  \"name\": zod.string().nullish(),\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const getRelationByRelationTypeIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getRelationByRelationTypeIdQuerySkipDefault = 0;export const getRelationByRelationTypeIdQueryTakeDefault = 100;\n\nexport const getRelationByRelationTypeIdQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getRelationByRelationTypeIdQueryTakeDefault)\n})\n\nexport const getRelationByRelationTypeIdResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"relationType\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string().nullish()\n}),\n  \"child\": zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string().nullish()\n}),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"comment\": zod.string().nullish()\n}))\n})\n\n\nexport const getItemScriptQueryParams = zod.object({\n  \"path\": zod.array(zod.string()).optional()\n})\n\nexport const getItemScriptResponseItem = zod.object({\n  \"path\": zod.string(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n})\nexport const getItemScriptResponse = zod.array(getItemScriptResponseItem)\n\n\nexport const postScriptBody = zod.object({\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"content\": zod.string()\n})\n\n\nexport const getScriptByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const getScriptByPathResponse = zod.object({\n  \"path\": zod.string(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"content\": zod.string()\n})\n\n\nexport const deleteScriptByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\n\nexport const putScriptByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const putScriptByPathBody = zod.object({\n  \"content\": zod.string()\n})\n\n\nexport const putScriptByPathRenameParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const putScriptByPathRenameBody = zod.object({\n  \"name\": zod.string()\n})\n\n\nexport const postScriptFolderBody = zod.object({\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish()\n})\n\n\nexport const getScriptFolderByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const getScriptFolderByPathResponse = zod.object({\n  \"path\": zod.string(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish()\n})\n\n\nexport const deleteScriptFolderByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\n\nexport const getTreeScriptAncestorsQueryParams = zod.object({\n  \"descendantPath\": zod.string().optional()\n})\n\nexport const getTreeScriptAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n})\nexport const getTreeScriptAncestorsResponse = zod.array(getTreeScriptAncestorsResponseItem)\n\n\nexport const getTreeScriptChildrenQuerySkipDefault = 0;export const getTreeScriptChildrenQueryTakeDefault = 100;\n\nexport const getTreeScriptChildrenQueryParams = zod.object({\n  \"parentPath\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeScriptChildrenQueryTakeDefault)\n})\n\nexport const getTreeScriptChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n}))\n})\n\n\nexport const getTreeScriptRootQuerySkipDefault = 0;export const getTreeScriptRootQueryTakeDefault = 100;\n\nexport const getTreeScriptRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeScriptRootQueryTakeDefault)\n})\n\nexport const getTreeScriptRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n}))\n})\n\n\nexport const getSearcherQuerySkipDefault = 0;export const getSearcherQueryTakeDefault = 100;\n\nexport const getSearcherQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getSearcherQueryTakeDefault)\n})\n\nexport const getSearcherResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string().min(1)\n}))\n})\n\n\nexport const getSearcherBySearcherNameQueryParams = zod.object({\n  \"searcherName\": zod.string()\n})\n\nexport const getSearcherBySearcherNameQueryQuerySkipDefault = 0;export const getSearcherBySearcherNameQueryQueryTakeDefault = 100;\n\nexport const getSearcherBySearcherNameQueryQueryParams = zod.object({\n  \"term\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getSearcherBySearcherNameQueryQueryTakeDefault)\n})\n\nexport const getSearcherBySearcherNameQueryResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().min(1),\n  \"score\": zod.number(),\n  \"fieldCount\": zod.number(),\n  \"fields\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"values\": zod.array(zod.string())\n}))\n}))\n})\n\n\nexport const getSecurityConfigurationResponse = zod.object({\n  \"passwordConfiguration\": zod.object({\n  \"minimumPasswordLength\": zod.number(),\n  \"requireNonLetterOrDigit\": zod.boolean(),\n  \"requireDigit\": zod.boolean(),\n  \"requireLowercase\": zod.boolean(),\n  \"requireUppercase\": zod.boolean()\n})\n})\n\n\nexport const postSecurityForgotPasswordBody = zod.object({\n  \"email\": zod.string().min(1)\n})\n\n\nexport const postSecurityForgotPasswordResetBody = zod.object({\n  \"user\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"resetCode\": zod.string(),\n  \"password\": zod.string().min(1)\n})\n\n\nexport const postSecurityForgotPasswordVerifyBody = zod.object({\n  \"user\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"resetCode\": zod.string()\n})\n\nexport const postSecurityForgotPasswordVerifyResponse = zod.object({\n  \"passwordConfiguration\": zod.object({\n  \"minimumPasswordLength\": zod.number(),\n  \"requireNonLetterOrDigit\": zod.boolean(),\n  \"requireDigit\": zod.boolean(),\n  \"requireLowercase\": zod.boolean(),\n  \"requireUppercase\": zod.boolean()\n})\n})\n\n\nexport const getSegmentQuerySkipDefault = 0;export const getSegmentQueryTakeDefault = 100;\n\nexport const getSegmentQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getSegmentQueryTakeDefault)\n})\n\nexport const getSegmentResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"alias\": zod.string()\n}))\n})\n\n\nexport const getServerConfigurationResponse = zod.object({\n  \"allowPasswordReset\": zod.boolean(),\n  \"versionCheckPeriod\": zod.number(),\n  \"allowLocalLogin\": zod.boolean()\n})\n\n\nexport const getServerInformationResponse = zod.object({\n  \"version\": zod.string(),\n  \"assemblyVersion\": zod.string(),\n  \"baseUtcOffset\": zod.string(),\n  \"runtimeMode\": zod.enum(['BackofficeDevelopment', 'Development', 'Production'])\n})\n\n\nexport const getServerStatusResponse = zod.object({\n  \"serverStatus\": zod.enum(['Unknown', 'Boot', 'Install', 'Upgrade', 'Run', 'BootFailed'])\n})\n\n\nexport const getServerTroubleshootingResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"data\": zod.string()\n}))\n})\n\n\nexport const getServerUpgradeCheckResponse = zod.object({\n  \"type\": zod.string(),\n  \"comment\": zod.string(),\n  \"url\": zod.string()\n})\n\n\nexport const getItemStaticFileQueryParams = zod.object({\n  \"path\": zod.array(zod.string()).optional()\n})\n\nexport const getItemStaticFileResponseItem = zod.object({\n  \"path\": zod.string(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n})\nexport const getItemStaticFileResponse = zod.array(getItemStaticFileResponseItem)\n\n\nexport const getTreeStaticFileAncestorsQueryParams = zod.object({\n  \"descendantPath\": zod.string().optional()\n})\n\nexport const getTreeStaticFileAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n})\nexport const getTreeStaticFileAncestorsResponse = zod.array(getTreeStaticFileAncestorsResponseItem)\n\n\nexport const getTreeStaticFileChildrenQuerySkipDefault = 0;export const getTreeStaticFileChildrenQueryTakeDefault = 100;\n\nexport const getTreeStaticFileChildrenQueryParams = zod.object({\n  \"parentPath\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeStaticFileChildrenQueryTakeDefault)\n})\n\nexport const getTreeStaticFileChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n}))\n})\n\n\nexport const getTreeStaticFileRootQuerySkipDefault = 0;export const getTreeStaticFileRootQueryTakeDefault = 100;\n\nexport const getTreeStaticFileRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeStaticFileRootQueryTakeDefault)\n})\n\nexport const getTreeStaticFileRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n}))\n})\n\n\nexport const getItemStylesheetQueryParams = zod.object({\n  \"path\": zod.array(zod.string()).optional()\n})\n\nexport const getItemStylesheetResponseItem = zod.object({\n  \"path\": zod.string(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n})\nexport const getItemStylesheetResponse = zod.array(getItemStylesheetResponseItem)\n\n\nexport const postStylesheetBody = zod.object({\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"content\": zod.string()\n})\n\n\nexport const getStylesheetByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const getStylesheetByPathResponse = zod.object({\n  \"path\": zod.string(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"content\": zod.string()\n})\n\n\nexport const deleteStylesheetByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\n\nexport const putStylesheetByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const putStylesheetByPathBody = zod.object({\n  \"content\": zod.string()\n})\n\n\nexport const putStylesheetByPathRenameParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const putStylesheetByPathRenameBody = zod.object({\n  \"name\": zod.string()\n})\n\n\nexport const postStylesheetFolderBody = zod.object({\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish()\n})\n\n\nexport const getStylesheetFolderByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\nexport const getStylesheetFolderByPathResponse = zod.object({\n  \"path\": zod.string(),\n  \"name\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish()\n})\n\n\nexport const deleteStylesheetFolderByPathParams = zod.object({\n  \"path\": zod.string()\n})\n\n\nexport const getTreeStylesheetAncestorsQueryParams = zod.object({\n  \"descendantPath\": zod.string().optional()\n})\n\nexport const getTreeStylesheetAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n})\nexport const getTreeStylesheetAncestorsResponse = zod.array(getTreeStylesheetAncestorsResponseItem)\n\n\nexport const getTreeStylesheetChildrenQuerySkipDefault = 0;export const getTreeStylesheetChildrenQueryTakeDefault = 100;\n\nexport const getTreeStylesheetChildrenQueryParams = zod.object({\n  \"parentPath\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeStylesheetChildrenQueryTakeDefault)\n})\n\nexport const getTreeStylesheetChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n}))\n})\n\n\nexport const getTreeStylesheetRootQuerySkipDefault = 0;export const getTreeStylesheetRootQueryTakeDefault = 100;\n\nexport const getTreeStylesheetRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeStylesheetRootQueryTakeDefault)\n})\n\nexport const getTreeStylesheetRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"name\": zod.string(),\n  \"path\": zod.string(),\n  \"parent\": zod.object({\n  \"path\": zod.string()\n}).nullish(),\n  \"isFolder\": zod.boolean()\n}))\n})\n\n\nexport const getTagQuerySkipDefault = 0;export const getTagQueryTakeDefault = 100;\n\nexport const getTagQueryParams = zod.object({\n  \"query\": zod.string().optional(),\n  \"tagGroup\": zod.string().optional(),\n  \"culture\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTagQueryTakeDefault)\n})\n\nexport const getTagResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"text\": zod.string().nullish(),\n  \"group\": zod.string().nullish(),\n  \"nodeCount\": zod.number()\n}))\n})\n\n\nexport const getTelemetryQuerySkipDefault = 0;export const getTelemetryQueryTakeDefault = 100;\n\nexport const getTelemetryQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTelemetryQueryTakeDefault)\n})\n\nexport const getTelemetryResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"telemetryLevel\": zod.enum(['Minimal', 'Basic', 'Detailed'])\n}))\n})\n\n\nexport const getTelemetryLevelResponse = zod.object({\n  \"telemetryLevel\": zod.enum(['Minimal', 'Basic', 'Detailed'])\n})\n\n\nexport const postTelemetryLevelBody = zod.object({\n  \"telemetryLevel\": zod.enum(['Minimal', 'Basic', 'Detailed'])\n})\n\n\nexport const getItemTemplateQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemTemplateResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"alias\": zod.string()\n})\nexport const getItemTemplateResponse = zod.array(getItemTemplateResponseItem)\n\n\nexport const getItemTemplateSearchQuerySkipDefault = 0;export const getItemTemplateSearchQueryTakeDefault = 100;\n\nexport const getItemTemplateSearchQueryParams = zod.object({\n  \"query\": zod.string().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getItemTemplateSearchQueryTakeDefault)\n})\n\nexport const getItemTemplateSearchResponse = zod.object({\n  \"items\": zod.array(zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"alias\": zod.string()\n})),\n  \"total\": zod.number()\n})\n\n\nexport const postTemplateBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"alias\": zod.string().min(1),\n  \"content\": zod.string().nullish(),\n  \"id\": zod.string().uuid().nullish()\n})\n\n\nexport const getTemplateByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getTemplateByIdResponse = zod.object({\n  \"name\": zod.string().min(1),\n  \"alias\": zod.string().min(1),\n  \"content\": zod.string().nullish(),\n  \"id\": zod.string().uuid(),\n  \"masterTemplate\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish()\n})\n\n\nexport const deleteTemplateByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putTemplateByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putTemplateByIdBody = zod.object({\n  \"name\": zod.string().min(1),\n  \"alias\": zod.string().min(1),\n  \"content\": zod.string().nullish()\n})\n\n\nexport const getTemplateConfigurationResponse = zod.object({\n  \"disabled\": zod.boolean()\n})\n\n\nexport const postTemplateQueryExecuteBody = zod.object({\n  \"rootDocument\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentTypeAlias\": zod.string().nullish(),\n  \"filters\": zod.array(zod.object({\n  \"propertyAlias\": zod.string().min(1),\n  \"constraintValue\": zod.string().min(1),\n  \"operator\": zod.enum(['Equals', 'NotEquals', 'Contains', 'NotContains', 'LessThan', 'LessThanEqualTo', 'GreaterThan', 'GreaterThanEqualTo'])\n})).nullish(),\n  \"sort\": zod.object({\n  \"propertyAlias\": zod.string(),\n  \"direction\": zod.string().nullish()\n}).nullish(),\n  \"take\": zod.number()\n})\n\nexport const postTemplateQueryExecuteResponse = zod.object({\n  \"queryExpression\": zod.string(),\n  \"sampleResults\": zod.array(zod.object({\n  \"icon\": zod.string(),\n  \"name\": zod.string()\n})),\n  \"resultCount\": zod.number(),\n  \"executionTime\": zod.number()\n})\n\n\nexport const getTemplateQuerySettingsResponse = zod.object({\n  \"documentTypeAliases\": zod.array(zod.string()),\n  \"properties\": zod.array(zod.object({\n  \"alias\": zod.string(),\n  \"type\": zod.enum(['String', 'DateTime', 'Integer'])\n})),\n  \"operators\": zod.array(zod.object({\n  \"operator\": zod.enum(['Equals', 'NotEquals', 'Contains', 'NotContains', 'LessThan', 'LessThanEqualTo', 'GreaterThan', 'GreaterThanEqualTo']),\n  \"applicableTypes\": zod.array(zod.enum(['String', 'DateTime', 'Integer']))\n}))\n})\n\n\nexport const getTreeTemplateAncestorsQueryParams = zod.object({\n  \"descendantId\": zod.string().uuid().optional()\n})\n\nexport const getTreeTemplateAncestorsResponseItem = zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string()\n})\nexport const getTreeTemplateAncestorsResponse = zod.array(getTreeTemplateAncestorsResponseItem)\n\n\nexport const getTreeTemplateChildrenQuerySkipDefault = 0;export const getTreeTemplateChildrenQueryTakeDefault = 100;\n\nexport const getTreeTemplateChildrenQueryParams = zod.object({\n  \"parentId\": zod.string().uuid().optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeTemplateChildrenQueryTakeDefault)\n})\n\nexport const getTreeTemplateChildrenResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string()\n}))\n})\n\n\nexport const getTreeTemplateRootQuerySkipDefault = 0;export const getTreeTemplateRootQueryTakeDefault = 100;\n\nexport const getTreeTemplateRootQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getTreeTemplateRootQueryTakeDefault)\n})\n\nexport const getTreeTemplateRootResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"hasChildren\": zod.boolean(),\n  \"id\": zod.string().uuid(),\n  \"parent\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"name\": zod.string()\n}))\n})\n\n\nexport const postTemporaryFileBody = zod.object({\n  \"Id\": zod.string().uuid(),\n  \"File\": zod.instanceof(FileLike)\n})\n\n\nexport const getTemporaryFileByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getTemporaryFileByIdResponse = zod.object({\n  \"id\": zod.string().uuid(),\n  \"availableUntil\": zod.string().datetime({\"local\":true}).nullish(),\n  \"fileName\": zod.string().min(1)\n})\n\n\nexport const deleteTemporaryFileByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const getTemporaryFileConfigurationResponse = zod.object({\n  \"imageFileTypes\": zod.array(zod.string()),\n  \"disallowedUploadedFilesExtensions\": zod.array(zod.string()),\n  \"allowedUploadedFileExtensions\": zod.array(zod.string()),\n  \"maxFileSize\": zod.number().nullish()\n})\n\n\nexport const getUpgradeSettingsResponse = zod.object({\n  \"currentState\": zod.string().min(1),\n  \"newState\": zod.string().min(1),\n  \"newVersion\": zod.string().min(1),\n  \"oldVersion\": zod.string().min(1),\n  \"reportUrl\": zod.string()\n})\n\n\nexport const postUserDataBody = zod.object({\n  \"group\": zod.string(),\n  \"identifier\": zod.string(),\n  \"value\": zod.string(),\n  \"key\": zod.string().uuid().nullish()\n})\n\n\nexport const getUserDataQuerySkipDefault = 0;export const getUserDataQueryTakeDefault = 100;\n\nexport const getUserDataQueryParams = zod.object({\n  \"groups\": zod.array(zod.string()).optional(),\n  \"identifiers\": zod.array(zod.string()).optional(),\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getUserDataQueryTakeDefault)\n})\n\nexport const getUserDataResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"group\": zod.string(),\n  \"identifier\": zod.string(),\n  \"value\": zod.string(),\n  \"key\": zod.string().uuid()\n}))\n})\n\n\nexport const putUserDataBody = zod.object({\n  \"group\": zod.string(),\n  \"identifier\": zod.string(),\n  \"value\": zod.string(),\n  \"key\": zod.string().uuid()\n})\n\n\nexport const getUserDataByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getUserDataByIdResponse = zod.object({\n  \"group\": zod.string(),\n  \"identifier\": zod.string(),\n  \"value\": zod.string()\n})\n\n\nexport const getFilterUserGroupQuerySkipDefault = 0;export const getFilterUserGroupQueryTakeDefault = 100;export const getFilterUserGroupQueryFilterDefault = \"\";\n\nexport const getFilterUserGroupQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getFilterUserGroupQueryTakeDefault),\n  \"filter\": zod.string().optional()\n})\n\nexport const getFilterUserGroupResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"alias\": zod.string(),\n  \"icon\": zod.string().nullish(),\n  \"sections\": zod.array(zod.string()),\n  \"languages\": zod.array(zod.string()),\n  \"hasAccessToAllLanguages\": zod.boolean(),\n  \"documentStartNode\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentRootAccess\": zod.boolean(),\n  \"mediaStartNode\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"mediaRootAccess\": zod.boolean(),\n  \"fallbackPermissions\": zod.array(zod.string()),\n  \"permissions\": zod.array(zod.object({\n  \"$type\": zod.enum(['DocumentPermissionPresentationModel']),\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"verbs\": zod.array(zod.string())\n}).or(zod.object({\n  \"$type\": zod.enum(['UnknownTypePermissionPresentationModel']),\n  \"verbs\": zod.array(zod.string()),\n  \"context\": zod.string()\n}))),\n  \"id\": zod.string().uuid(),\n  \"isDeletable\": zod.boolean(),\n  \"aliasCanBeChanged\": zod.boolean()\n}))\n})\n\n\nexport const getItemUserGroupQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemUserGroupResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"icon\": zod.string().nullish(),\n  \"alias\": zod.string().nullish()\n})\nexport const getItemUserGroupResponse = zod.array(getItemUserGroupResponseItem)\n\n\nexport const deleteUserGroupBody = zod.object({\n  \"userGroupIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const postUserGroupBody = zod.object({\n  \"name\": zod.string(),\n  \"alias\": zod.string(),\n  \"icon\": zod.string().nullish(),\n  \"sections\": zod.array(zod.string()),\n  \"languages\": zod.array(zod.string()),\n  \"hasAccessToAllLanguages\": zod.boolean(),\n  \"documentStartNode\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentRootAccess\": zod.boolean(),\n  \"mediaStartNode\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"mediaRootAccess\": zod.boolean(),\n  \"fallbackPermissions\": zod.array(zod.string()),\n  \"permissions\": zod.array(zod.object({\n  \"$type\": zod.enum(['DocumentPermissionPresentationModel']),\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"verbs\": zod.array(zod.string())\n}).or(zod.object({\n  \"$type\": zod.enum(['UnknownTypePermissionPresentationModel']),\n  \"verbs\": zod.array(zod.string()),\n  \"context\": zod.string()\n}))),\n  \"id\": zod.string().uuid().nullish()\n})\n\n\nexport const getUserGroupQuerySkipDefault = 0;export const getUserGroupQueryTakeDefault = 100;\n\nexport const getUserGroupQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getUserGroupQueryTakeDefault)\n})\n\nexport const getUserGroupResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"name\": zod.string(),\n  \"alias\": zod.string(),\n  \"icon\": zod.string().nullish(),\n  \"sections\": zod.array(zod.string()),\n  \"languages\": zod.array(zod.string()),\n  \"hasAccessToAllLanguages\": zod.boolean(),\n  \"documentStartNode\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentRootAccess\": zod.boolean(),\n  \"mediaStartNode\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"mediaRootAccess\": zod.boolean(),\n  \"fallbackPermissions\": zod.array(zod.string()),\n  \"permissions\": zod.array(zod.object({\n  \"$type\": zod.enum(['DocumentPermissionPresentationModel']),\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"verbs\": zod.array(zod.string())\n}).or(zod.object({\n  \"$type\": zod.enum(['UnknownTypePermissionPresentationModel']),\n  \"verbs\": zod.array(zod.string()),\n  \"context\": zod.string()\n}))),\n  \"id\": zod.string().uuid(),\n  \"isDeletable\": zod.boolean(),\n  \"aliasCanBeChanged\": zod.boolean()\n}))\n})\n\n\nexport const getUserGroupByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getUserGroupByIdResponse = zod.object({\n  \"name\": zod.string(),\n  \"alias\": zod.string(),\n  \"icon\": zod.string().nullish(),\n  \"sections\": zod.array(zod.string()),\n  \"languages\": zod.array(zod.string()),\n  \"hasAccessToAllLanguages\": zod.boolean(),\n  \"documentStartNode\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentRootAccess\": zod.boolean(),\n  \"mediaStartNode\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"mediaRootAccess\": zod.boolean(),\n  \"fallbackPermissions\": zod.array(zod.string()),\n  \"permissions\": zod.array(zod.object({\n  \"$type\": zod.enum(['DocumentPermissionPresentationModel']),\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"verbs\": zod.array(zod.string())\n}).or(zod.object({\n  \"$type\": zod.enum(['UnknownTypePermissionPresentationModel']),\n  \"verbs\": zod.array(zod.string()),\n  \"context\": zod.string()\n}))),\n  \"id\": zod.string().uuid(),\n  \"isDeletable\": zod.boolean(),\n  \"aliasCanBeChanged\": zod.boolean()\n})\n\n\nexport const deleteUserGroupByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putUserGroupByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putUserGroupByIdBody = zod.object({\n  \"name\": zod.string(),\n  \"alias\": zod.string(),\n  \"icon\": zod.string().nullish(),\n  \"sections\": zod.array(zod.string()),\n  \"languages\": zod.array(zod.string()),\n  \"hasAccessToAllLanguages\": zod.boolean(),\n  \"documentStartNode\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"documentRootAccess\": zod.boolean(),\n  \"mediaStartNode\": zod.object({\n  \"id\": zod.string().uuid()\n}).nullish(),\n  \"mediaRootAccess\": zod.boolean(),\n  \"fallbackPermissions\": zod.array(zod.string()),\n  \"permissions\": zod.array(zod.object({\n  \"$type\": zod.enum(['DocumentPermissionPresentationModel']),\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"verbs\": zod.array(zod.string())\n}).or(zod.object({\n  \"$type\": zod.enum(['UnknownTypePermissionPresentationModel']),\n  \"verbs\": zod.array(zod.string()),\n  \"context\": zod.string()\n})))\n})\n\n\nexport const deleteUserGroupByIdUsersParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const deleteUserGroupByIdUsersBodyItem = zod.object({\n  \"id\": zod.string().uuid()\n})\nexport const deleteUserGroupByIdUsersBody = zod.array(deleteUserGroupByIdUsersBodyItem)\n\n\nexport const postUserGroupByIdUsersParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postUserGroupByIdUsersBodyItem = zod.object({\n  \"id\": zod.string().uuid()\n})\nexport const postUserGroupByIdUsersBody = zod.array(postUserGroupByIdUsersBodyItem)\n\n\nexport const getFilterUserQuerySkipDefault = 0;export const getFilterUserQueryTakeDefault = 100;export const getFilterUserQueryFilterDefault = \"\";\n\nexport const getFilterUserQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getFilterUserQueryTakeDefault),\n  \"orderBy\": zod.enum(['UserName', 'Language', 'Name', 'Email', 'Id', 'CreateDate', 'UpdateDate', 'IsApproved', 'IsLockedOut', 'LastLoginDate']).optional(),\n  \"orderDirection\": zod.enum(['Ascending', 'Descending']).optional(),\n  \"userGroupIds\": zod.array(zod.string().uuid()).optional(),\n  \"userStates\": zod.array(zod.enum(['Active', 'Disabled', 'LockedOut', 'Invited', 'Inactive', 'All'])).optional(),\n  \"filter\": zod.string().optional()\n})\n\nexport const getFilterUserResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"email\": zod.string(),\n  \"userName\": zod.string(),\n  \"name\": zod.string(),\n  \"userGroupIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"id\": zod.string().uuid(),\n  \"languageIsoCode\": zod.string().nullish(),\n  \"documentStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasDocumentRootAccess\": zod.boolean(),\n  \"mediaStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasMediaRootAccess\": zod.boolean(),\n  \"avatarUrls\": zod.array(zod.string()),\n  \"state\": zod.enum(['Active', 'Disabled', 'LockedOut', 'Invited', 'Inactive', 'All']),\n  \"failedLoginAttempts\": zod.number(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true}),\n  \"lastLoginDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"lastLockoutDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"lastPasswordChangeDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"isAdmin\": zod.boolean(),\n  \"kind\": zod.enum(['Default', 'Api'])\n}))\n})\n\n\nexport const getItemUserQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemUserResponseItem = zod.object({\n  \"id\": zod.string().uuid(),\n  \"name\": zod.string(),\n  \"avatarUrls\": zod.array(zod.string()),\n  \"kind\": zod.enum(['Default', 'Api'])\n})\nexport const getItemUserResponse = zod.array(getItemUserResponseItem)\n\n\nexport const postUserBody = zod.object({\n  \"email\": zod.string(),\n  \"userName\": zod.string(),\n  \"name\": zod.string(),\n  \"userGroupIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"kind\": zod.enum(['Default', 'Api'])\n})\n\n\nexport const deleteUserBody = zod.object({\n  \"userIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const getUserQuerySkipDefault = 0;export const getUserQueryTakeDefault = 100;\n\nexport const getUserQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getUserQueryTakeDefault)\n})\n\nexport const getUserResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"email\": zod.string(),\n  \"userName\": zod.string(),\n  \"name\": zod.string(),\n  \"userGroupIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"id\": zod.string().uuid(),\n  \"languageIsoCode\": zod.string().nullish(),\n  \"documentStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasDocumentRootAccess\": zod.boolean(),\n  \"mediaStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasMediaRootAccess\": zod.boolean(),\n  \"avatarUrls\": zod.array(zod.string()),\n  \"state\": zod.enum(['Active', 'Disabled', 'LockedOut', 'Invited', 'Inactive', 'All']),\n  \"failedLoginAttempts\": zod.number(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true}),\n  \"lastLoginDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"lastLockoutDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"lastPasswordChangeDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"isAdmin\": zod.boolean(),\n  \"kind\": zod.enum(['Default', 'Api'])\n}))\n})\n\n\nexport const getUserByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getUserByIdResponse = zod.object({\n  \"email\": zod.string(),\n  \"userName\": zod.string(),\n  \"name\": zod.string(),\n  \"userGroupIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"id\": zod.string().uuid(),\n  \"languageIsoCode\": zod.string().nullish(),\n  \"documentStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasDocumentRootAccess\": zod.boolean(),\n  \"mediaStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasMediaRootAccess\": zod.boolean(),\n  \"avatarUrls\": zod.array(zod.string()),\n  \"state\": zod.enum(['Active', 'Disabled', 'LockedOut', 'Invited', 'Inactive', 'All']),\n  \"failedLoginAttempts\": zod.number(),\n  \"createDate\": zod.string().datetime({\"local\":true}),\n  \"updateDate\": zod.string().datetime({\"local\":true}),\n  \"lastLoginDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"lastLockoutDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"lastPasswordChangeDate\": zod.string().datetime({\"local\":true}).nullish(),\n  \"isAdmin\": zod.boolean(),\n  \"kind\": zod.enum(['Default', 'Api'])\n})\n\n\nexport const deleteUserByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putUserByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putUserByIdBody = zod.object({\n  \"email\": zod.string(),\n  \"userName\": zod.string(),\n  \"name\": zod.string(),\n  \"userGroupIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"languageIsoCode\": zod.string(),\n  \"documentStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasDocumentRootAccess\": zod.boolean(),\n  \"mediaStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasMediaRootAccess\": zod.boolean()\n})\n\n\nexport const getUserById2faParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getUserById2faResponseItem = zod.object({\n  \"providerName\": zod.string(),\n  \"isEnabledOnUser\": zod.boolean()\n})\nexport const getUserById2faResponse = zod.array(getUserById2faResponseItem)\n\n\nexport const deleteUserById2faByProviderNameParams = zod.object({\n  \"id\": zod.string().uuid(),\n  \"providerName\": zod.string()\n})\n\n\nexport const getUserByIdCalculateStartNodesParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getUserByIdCalculateStartNodesResponse = zod.object({\n  \"id\": zod.string().uuid(),\n  \"documentStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasDocumentRootAccess\": zod.boolean(),\n  \"mediaStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasMediaRootAccess\": zod.boolean()\n})\n\n\nexport const postUserByIdChangePasswordParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postUserByIdChangePasswordBody = zod.object({\n  \"newPassword\": zod.string()\n})\n\n\nexport const postUserByIdClientCredentialsParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postUserByIdClientCredentialsBody = zod.object({\n  \"clientId\": zod.string(),\n  \"clientSecret\": zod.string()\n})\n\n\nexport const getUserByIdClientCredentialsParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getUserByIdClientCredentialsResponseItem = zod.string()\nexport const getUserByIdClientCredentialsResponse = zod.array(getUserByIdClientCredentialsResponseItem)\n\n\nexport const deleteUserByIdClientCredentialsByClientIdParams = zod.object({\n  \"id\": zod.string().uuid(),\n  \"clientId\": zod.string()\n})\n\n\nexport const postUserByIdResetPasswordParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postUserByIdResetPasswordResponse = zod.object({\n  \"resetPassword\": zod.string().nullish()\n})\n\n\nexport const deleteUserAvatarByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const postUserAvatarByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const postUserAvatarByIdBody = zod.object({\n  \"file\": zod.object({\n  \"id\": zod.string().uuid()\n})\n})\n\n\nexport const getUserConfigurationResponse = zod.object({\n  \"canInviteUsers\": zod.boolean(),\n  \"usernameIsEmail\": zod.boolean(),\n  \"passwordConfiguration\": zod.object({\n  \"minimumPasswordLength\": zod.number(),\n  \"requireNonLetterOrDigit\": zod.boolean(),\n  \"requireDigit\": zod.boolean(),\n  \"requireLowercase\": zod.boolean(),\n  \"requireUppercase\": zod.boolean()\n}),\n  \"allowChangePassword\": zod.boolean(),\n  \"allowTwoFactor\": zod.boolean()\n})\n\n\nexport const getUserCurrentResponse = zod.object({\n  \"email\": zod.string(),\n  \"userName\": zod.string(),\n  \"name\": zod.string(),\n  \"userGroupIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"id\": zod.string().uuid(),\n  \"languageIsoCode\": zod.string().nullable(),\n  \"documentStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasDocumentRootAccess\": zod.boolean(),\n  \"mediaStartNodeIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"hasMediaRootAccess\": zod.boolean(),\n  \"avatarUrls\": zod.array(zod.string()),\n  \"languages\": zod.array(zod.string()),\n  \"hasAccessToAllLanguages\": zod.boolean(),\n  \"hasAccessToSensitiveData\": zod.boolean(),\n  \"fallbackPermissions\": zod.array(zod.string()),\n  \"permissions\": zod.array(zod.object({\n  \"$type\": zod.enum(['DocumentPermissionPresentationModel']),\n  \"document\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"verbs\": zod.array(zod.string())\n}).or(zod.object({\n  \"$type\": zod.enum(['UnknownTypePermissionPresentationModel']),\n  \"verbs\": zod.array(zod.string()),\n  \"context\": zod.string()\n}))),\n  \"allowedSections\": zod.array(zod.string()),\n  \"isAdmin\": zod.boolean()\n})\n\n\nexport const getUserCurrent2faResponseItem = zod.object({\n  \"providerName\": zod.string(),\n  \"isEnabledOnUser\": zod.boolean()\n})\nexport const getUserCurrent2faResponse = zod.array(getUserCurrent2faResponseItem)\n\n\nexport const deleteUserCurrent2faByProviderNameParams = zod.object({\n  \"providerName\": zod.string()\n})\n\nexport const deleteUserCurrent2faByProviderNameQueryParams = zod.object({\n  \"code\": zod.string().optional()\n})\n\n\nexport const postUserCurrent2faByProviderNameParams = zod.object({\n  \"providerName\": zod.string()\n})\n\nexport const postUserCurrent2faByProviderNameBody = zod.object({\n  \"code\": zod.string(),\n  \"secret\": zod.string()\n})\n\nexport const postUserCurrent2faByProviderNameResponse = zod.object({\n\n})\n\n\nexport const getUserCurrent2faByProviderNameParams = zod.object({\n  \"providerName\": zod.string()\n})\n\nexport const getUserCurrent2faByProviderNameResponse = zod.object({\n\n})\n\n\nexport const postUserCurrentAvatarBody = zod.object({\n  \"file\": zod.object({\n  \"id\": zod.string().uuid()\n})\n})\n\n\nexport const postUserCurrentChangePasswordBody = zod.object({\n  \"newPassword\": zod.string(),\n  \"oldPassword\": zod.string().nullish()\n})\n\n\nexport const getUserCurrentConfigurationResponse = zod.object({\n  \"keepUserLoggedIn\": zod.boolean(),\n  \"usernameIsEmail\": zod.boolean(),\n  \"passwordConfiguration\": zod.object({\n  \"minimumPasswordLength\": zod.number(),\n  \"requireNonLetterOrDigit\": zod.boolean(),\n  \"requireDigit\": zod.boolean(),\n  \"requireLowercase\": zod.boolean(),\n  \"requireUppercase\": zod.boolean()\n}),\n  \"allowChangePassword\": zod.boolean(),\n  \"allowTwoFactor\": zod.boolean()\n})\n\n\nexport const getUserCurrentLoginProvidersResponseItem = zod.object({\n  \"providerSchemeName\": zod.string(),\n  \"providerKey\": zod.string().nullish(),\n  \"isLinkedOnUser\": zod.boolean(),\n  \"hasManualLinkingEnabled\": zod.boolean()\n})\nexport const getUserCurrentLoginProvidersResponse = zod.array(getUserCurrentLoginProvidersResponseItem)\n\n\nexport const getUserCurrentPermissionsQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getUserCurrentPermissionsResponse = zod.object({\n  \"permissions\": zod.array(zod.object({\n  \"nodeKey\": zod.string().uuid(),\n  \"permissions\": zod.array(zod.string())\n}))\n})\n\n\nexport const getUserCurrentPermissionsDocumentQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getUserCurrentPermissionsDocumentResponseItem = zod.object({\n  \"permissions\": zod.array(zod.object({\n  \"nodeKey\": zod.string().uuid(),\n  \"permissions\": zod.array(zod.string())\n}))\n})\nexport const getUserCurrentPermissionsDocumentResponse = zod.array(getUserCurrentPermissionsDocumentResponseItem)\n\n\nexport const getUserCurrentPermissionsMediaQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getUserCurrentPermissionsMediaResponse = zod.object({\n  \"permissions\": zod.array(zod.object({\n  \"nodeKey\": zod.string().uuid(),\n  \"permissions\": zod.array(zod.string())\n}))\n})\n\n\nexport const postUserDisableBody = zod.object({\n  \"userIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const postUserEnableBody = zod.object({\n  \"userIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const postUserInviteBody = zod.object({\n  \"email\": zod.string(),\n  \"userName\": zod.string(),\n  \"name\": zod.string(),\n  \"userGroupIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"id\": zod.string().uuid().nullish(),\n  \"message\": zod.string().nullish()\n})\n\n\nexport const postUserInviteCreatePasswordBody = zod.object({\n  \"user\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"token\": zod.string().min(1),\n  \"password\": zod.string()\n})\n\n\nexport const postUserInviteResendBody = zod.object({\n  \"user\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"message\": zod.string().nullish()\n})\n\n\nexport const postUserInviteVerifyBody = zod.object({\n  \"user\": zod.object({\n  \"id\": zod.string().uuid()\n}),\n  \"token\": zod.string().min(1)\n})\n\nexport const postUserInviteVerifyResponse = zod.object({\n  \"passwordConfiguration\": zod.object({\n  \"minimumPasswordLength\": zod.number(),\n  \"requireNonLetterOrDigit\": zod.boolean(),\n  \"requireDigit\": zod.boolean(),\n  \"requireLowercase\": zod.boolean(),\n  \"requireUppercase\": zod.boolean()\n})\n})\n\n\nexport const postUserSetUserGroupsBody = zod.object({\n  \"userIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n})),\n  \"userGroupIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const postUserUnlockBody = zod.object({\n  \"userIds\": zod.array(zod.object({\n  \"id\": zod.string().uuid()\n}))\n})\n\n\nexport const getItemWebhookQueryParams = zod.object({\n  \"id\": zod.array(zod.string().uuid()).optional()\n})\n\nexport const getItemWebhookResponseItem = zod.object({\n  \"enabled\": zod.boolean(),\n  \"name\": zod.string(),\n  \"events\": zod.string(),\n  \"url\": zod.string(),\n  \"types\": zod.string()\n})\nexport const getItemWebhookResponse = zod.array(getItemWebhookResponseItem)\n\n\nexport const getWebhookQuerySkipDefault = 0;export const getWebhookQueryTakeDefault = 100;\n\nexport const getWebhookQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getWebhookQueryTakeDefault)\n})\n\nexport const getWebhookResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"enabled\": zod.boolean(),\n  \"name\": zod.string().nullish(),\n  \"description\": zod.string().nullish(),\n  \"url\": zod.string().min(1),\n  \"contentTypeKeys\": zod.array(zod.string().uuid()),\n  \"headers\": zod.record(zod.string(), zod.string()),\n  \"id\": zod.string().uuid(),\n  \"events\": zod.array(zod.object({\n  \"eventName\": zod.string(),\n  \"eventType\": zod.string(),\n  \"alias\": zod.string()\n}))\n}))\n})\n\n\nexport const postWebhookBody = zod.object({\n  \"enabled\": zod.boolean(),\n  \"name\": zod.string().nullish(),\n  \"description\": zod.string().nullish(),\n  \"url\": zod.string().min(1),\n  \"contentTypeKeys\": zod.array(zod.string().uuid()),\n  \"headers\": zod.record(zod.string(), zod.string()),\n  \"id\": zod.string().uuid().nullish(),\n  \"events\": zod.array(zod.string())\n})\n\n\nexport const getWebhookByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getWebhookByIdResponse = zod.object({\n  \"enabled\": zod.boolean(),\n  \"name\": zod.string().nullish(),\n  \"description\": zod.string().nullish(),\n  \"url\": zod.string().min(1),\n  \"contentTypeKeys\": zod.array(zod.string().uuid()),\n  \"headers\": zod.record(zod.string(), zod.string()),\n  \"id\": zod.string().uuid(),\n  \"events\": zod.array(zod.object({\n  \"eventName\": zod.string(),\n  \"eventType\": zod.string(),\n  \"alias\": zod.string()\n}))\n})\n\n\nexport const deleteWebhookByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\n\nexport const putWebhookByIdParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const putWebhookByIdBody = zod.object({\n  \"enabled\": zod.boolean(),\n  \"name\": zod.string().nullish(),\n  \"description\": zod.string().nullish(),\n  \"url\": zod.string().min(1),\n  \"contentTypeKeys\": zod.array(zod.string().uuid()),\n  \"headers\": zod.record(zod.string(), zod.string()),\n  \"events\": zod.array(zod.string())\n})\n\n\nexport const getWebhookByIdLogsParams = zod.object({\n  \"id\": zod.string().uuid()\n})\n\nexport const getWebhookByIdLogsQuerySkipDefault = 0;export const getWebhookByIdLogsQueryTakeDefault = 100;\n\nexport const getWebhookByIdLogsQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getWebhookByIdLogsQueryTakeDefault)\n})\n\nexport const getWebhookByIdLogsResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"key\": zod.string().uuid(),\n  \"webhookKey\": zod.string().uuid(),\n  \"statusCode\": zod.string(),\n  \"isSuccessStatusCode\": zod.boolean(),\n  \"date\": zod.string().datetime({\"local\":true}),\n  \"eventAlias\": zod.string(),\n  \"url\": zod.string(),\n  \"retryCount\": zod.number(),\n  \"requestHeaders\": zod.string(),\n  \"requestBody\": zod.string(),\n  \"responseHeaders\": zod.string(),\n  \"responseBody\": zod.string(),\n  \"exceptionOccured\": zod.boolean()\n}))\n})\n\n\nexport const getWebhookEventsQuerySkipDefault = 0;export const getWebhookEventsQueryTakeDefault = 100;\n\nexport const getWebhookEventsQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getWebhookEventsQueryTakeDefault)\n})\n\nexport const getWebhookEventsResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"eventName\": zod.string(),\n  \"eventType\": zod.string(),\n  \"alias\": zod.string()\n}))\n})\n\n\nexport const getWebhookLogsQuerySkipDefault = 0;export const getWebhookLogsQueryTakeDefault = 100;\n\nexport const getWebhookLogsQueryParams = zod.object({\n  \"skip\": zod.coerce.number().optional(),\n  \"take\": zod.coerce.number().default(getWebhookLogsQueryTakeDefault)\n})\n\nexport const getWebhookLogsResponse = zod.object({\n  \"total\": zod.number(),\n  \"items\": zod.array(zod.object({\n  \"key\": zod.string().uuid(),\n  \"webhookKey\": zod.string().uuid(),\n  \"statusCode\": zod.string(),\n  \"isSuccessStatusCode\": zod.boolean(),\n  \"date\": zod.string().datetime({\"local\":true}),\n  \"eventAlias\": zod.string(),\n  \"url\": zod.string(),\n  \"retryCount\": zod.number(),\n  \"requestHeaders\": zod.string(),\n  \"requestBody\": zod.string(),\n  \"responseHeaders\": zod.string(),\n  \"responseBody\": zod.string(),\n  \"exceptionOccured\": zod.boolean()\n}))\n})\n\n\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { GetCultureParams } from \"@/umb-management-api/schemas/index.js\";\nimport { getCultureQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetCulturesTool = CreateUmbracoTool(\n  \"get-culture\",\n  \"Retrieves a paginated list of cultures that Umbraco can be configured to use\",\n  getCultureQueryParams.shape,\n  async (params: GetCultureParams) => {\n    const client = UmbracoManagementClient.getClient();\n    var response = await client.getCulture(params);\n    return {\n      content: [\n        {\n          type: \"text\" as const,\n          text: JSON.stringify(response),\n        },\n      ],\n    };\n  }\n);\n\nexport default GetCulturesTool;\n","import GetCulturesTool from \"./get-cultures.js\";\n\nexport const CultureTools = [GetCulturesTool];\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { CreateDataTypeRequestModel } from \"@/umb-management-api/schemas/index.js\";\nimport { postDataTypeBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst CreateDataTypeTool = CreateUmbracoTool(\n  \"create-data-type\",\n  \"Creates a new data type\",\n  postDataTypeBody.shape,\n  async (model: CreateDataTypeRequestModel) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.postDataType(model);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default CreateDataTypeTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { deleteDataTypeByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst DeleteDataTypeTool = CreateUmbracoTool(\n  \"delete-data-type\",\n  \"Deletes a data type by Id\",\n  deleteDataTypeByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.deleteDataTypeById(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default DeleteDataTypeTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { GetFilterDataTypeParams } from \"@/umb-management-api/schemas/index.js\";\nimport { getFilterDataTypeQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst FindDataTypeTool = CreateUmbracoTool(\n  \"find-data-type\",\n  \"Finds a data type by Id or Name\",\n  getFilterDataTypeQueryParams.shape,\n  async (model: GetFilterDataTypeParams) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getFilterDataType(model);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default FindDataTypeTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDataTypeByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDataTypeTool = CreateUmbracoTool(\n  \"get-data-type\",\n  \"Gets a data type by Id\",\n  getDataTypeByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getDataTypeById(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ]\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDataTypeTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { UpdateDataTypeRequestModel } from \"@/umb-management-api/schemas/index.js\";\nimport {\n  putDataTypeByIdBody,\n  putDataTypeByIdParams,\n} from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nimport { z } from \"zod\";\n\nconst UpdateDataTypeTool = CreateUmbracoTool(\n  \"update-data-type\",\n  \"Updates a data type by Id\",\n  {\n    id: putDataTypeByIdParams.shape.id,\n    data: z.object(putDataTypeByIdBody.shape),\n  },\n  async (model: { id: string; data: UpdateDataTypeRequestModel }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.putDataTypeById(model.id, model.data);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default UpdateDataTypeTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { CopyDataTypeRequestModel } from \"@/umb-management-api/schemas/index.js\";\nimport {\n  postDataTypeByIdCopyParams,\n  postDataTypeByIdCopyBody,\n} from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { z } from \"zod\";\n\nconst CopyDataTypeTool = CreateUmbracoTool(\n  \"copy-data-type\",\n  \"Copy a data type by Id\",\n  {\n    id: postDataTypeByIdCopyParams.shape.id,\n    body: z.object(postDataTypeByIdCopyBody.shape),\n  },\n  async ({ id, body }: { id: string; body: CopyDataTypeRequestModel }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.postDataTypeByIdCopy(id, body);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error copying data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default CopyDataTypeTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDataTypeByIdIsUsedParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst IsUsedDataTypeTool = CreateUmbracoTool(\n  \"is-used-data-type\",\n  \"Checks if a data type is used within Umbraco\",\n  getDataTypeByIdIsUsedParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getDataTypeByIdIsUsed(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default IsUsedDataTypeTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { MoveDataTypeRequestModel } from \"@/umb-management-api/schemas/index.js\";\nimport {\n  putDataTypeByIdMoveParams,\n  putDataTypeByIdMoveBody,\n} from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nimport { z } from \"zod\";\n\nconst MoveDataTypeTool = CreateUmbracoTool(\n  \"move-data-type\",\n  \"Updates a data type by Id\",\n  {\n    id: putDataTypeByIdMoveParams.shape.id,\n    data: z.object(putDataTypeByIdMoveBody.shape),\n  },\n  async (model: { id: string; data: MoveDataTypeRequestModel }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.putDataTypeByIdMove(model.id, model.data);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default MoveDataTypeTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDataTypeByIdReferencesParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetReferencesDataTypeTool = CreateUmbracoTool(\n  \"get-references-data-type\",\n  \"Gets a data type by Id\",\n  getDataTypeByIdReferencesParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getDataTypeByIdReferences(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetReferencesDataTypeTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { CreateFolderRequestModel } from \"@/umb-management-api/schemas/index.js\";\nimport { postDataTypeFolderBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst CreateDataTypeFolderTool = CreateUmbracoTool(\n  \"create-data-type-folder\",\n  \"Creates a new data type folder\",\n  postDataTypeFolderBody.shape,\n  async (model: CreateFolderRequestModel) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.postDataTypeFolder(model);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default CreateDataTypeFolderTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { deleteDataTypeFolderByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst DeleteDataTypeFolderTool = CreateUmbracoTool(\n  \"delete-data-type-folder\",\n  \"Deletes a data type folder by Id\",\n  deleteDataTypeFolderByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.deleteDataTypeFolderById(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default DeleteDataTypeFolderTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDataTypeFolderByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDataTypeFolderTool = CreateUmbracoTool(\n  \"get-data-type-folder\",\n  \"Gets a data type folder by Id\",\n  getDataTypeFolderByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getDataTypeFolderById(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDataTypeFolderTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { GetItemDataTypeSearchParams } from \"@/umb-management-api/schemas/index.js\";\nimport { getItemDataTypeSearchQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDataTypeSearchTool = CreateUmbracoTool(\n  \"get-data-type-search\",\n  \"Searches the data type tree for a data type by name. It does NOT allow for searching for data type folders.\",\n  getItemDataTypeSearchQueryParams.shape,\n  async (params: GetItemDataTypeSearchParams) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getItemDataTypeSearch(params);\n      return {\n        content: [\n          { \n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error searching data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n \nexport default GetDataTypeSearchTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { putDataTypeFolderByIdParams, putDataTypeFolderByIdBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { z } from \"zod\";\n\nconst UpdateDataTypeFolderTool = CreateUmbracoTool(\n  \"update-data-type-folder\",\n  \"Updates a data type folder by Id\",\n  {\n    id: putDataTypeFolderByIdParams.shape.id,\n    data: z.object(putDataTypeFolderByIdBody.shape)\n  },\n  async (model: { id: string; data: { name: string } }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.putDataTypeFolderById(model.id, model.data);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error updating data type folder:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default UpdateDataTypeFolderTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { GetTreeDataTypeRootParams } from \"@/umb-management-api/schemas/index.js\";\nimport { getTreeDataTypeRootQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDataTypeRootTool = CreateUmbracoTool(\n  \"get-data-type-root\",\n  \"Gets the root level of the data type and data type folders in the tree.\",\n  getTreeDataTypeRootQueryParams.shape,\n  async (params: GetTreeDataTypeRootParams) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getTreeDataTypeRoot(params);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting data type root:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDataTypeRootTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getTreeDataTypeChildrenQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDataTypeChildrenTool = CreateUmbracoTool(\n  \"get-data-type-children\",\n  \"Gets the children data types or data type folders by the parent id\",\n  getTreeDataTypeChildrenQueryParams.shape,\n  async (params) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getTreeDataTypeChildren(params);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting data type children:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDataTypeChildrenTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getTreeDataTypeAncestorsQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDataTypeAncestorsTool = CreateUmbracoTool(\n  \"get-data-type-ancestors\",\n  \"Gets the ancestors of a data type by Id\",\n  getTreeDataTypeAncestorsQueryParams.shape,\n  async (params) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getTreeDataTypeAncestors(params);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting data type ancestors:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDataTypeAncestorsTool; ","import CreateDataTypeTool from \"./post/create-data-type.js\";\nimport DeleteDataTypeTool from \"./delete/delete-data-type.js\";\nimport FindDataTypeTool from \"./get/find-data-type.js\";\nimport GetDataTypeTool from \"./get/get-data-type.js\";\nimport UpdateDataTypeTool from \"./put/update-data-type.js\";\nimport CopyDataTypeTool from \"./post/copy-data-type.js\";\nimport IsUsedDataTypeTool from \"./get/is-used-data-type.js\";\nimport MoveDataTypeTool from \"./put/move-data-type.js\";\nimport GetReferencesDataTypeTool from \"./get/get-references-data-type.js\";\nimport CreateDataTypeFolderTool from \"./folders/post/create-folder.js\";\nimport DeleteDataTypeFolderTool from \"./folders/delete/delete-folder.js\";\nimport GetDataTypeFolderTool from \"./folders/get/get-folder.js\";\nimport GetDataTypeSearchTool from \"./items/get/get-search.js\";\nimport UpdateDataTypeFolderTool from \"./folders/put/update-folder.js\";\nimport GetDataTypeRootTool from \"./items/get/get-root.js\";\nimport GetDataTypeChildrenTool from \"./items/get/get-children.js\";\nimport GetDataTypeAncestorsTool from \"./items/get/get-ancestors.js\";\n\nexport const DataTypeTools = [\n  GetDataTypeRootTool,\n  GetDataTypeSearchTool,\n  CreateDataTypeTool,\n  DeleteDataTypeTool,\n  FindDataTypeTool,\n  GetDataTypeTool,\n  UpdateDataTypeTool,\n  CopyDataTypeTool,\n  IsUsedDataTypeTool,\n  MoveDataTypeTool,\n  GetReferencesDataTypeTool,\n  CreateDataTypeFolderTool,\n  DeleteDataTypeFolderTool,\n  GetDataTypeFolderTool,\n  UpdateDataTypeFolderTool,\n  GetDataTypeChildrenTool,\n  GetDataTypeAncestorsTool,\n];\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { deleteDictionaryByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst DeleteDictionaryItemTool = CreateUmbracoTool(\n  \"delete-dictionary-item\",\n  \"Deletes a dictionary item by Id\",\n  deleteDictionaryByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.deleteDictionaryById(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating dictionary item:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default DeleteDictionaryItemTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { GetDictionaryParams } from \"@/umb-management-api/schemas/index.js\";\nimport { getDictionaryQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst FindDictionaryItemTool = CreateUmbracoTool(\n  \"find-dictionary\",\n  \"Finds a dictionary by Id or name\",\n  getDictionaryQueryParams.shape,\n  async (model: GetDictionaryParams) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getDictionary(model);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting dictionary item:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default FindDictionaryItemTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDictionaryByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDictionaryItemTool = CreateUmbracoTool(\n  \"get-dictionary\",\n  \"Gets a dictionary by Id\",\n  getDictionaryByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getDictionaryById(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting dictionary:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDictionaryItemTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { CreateDictionaryItemRequestModel } from \"@/umb-management-api/schemas/index.js\";\nimport { postDictionaryBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst CreateDictionaryItemTool = CreateUmbracoTool(\n  \"create-dictionary\",\n  \"Creates a new dictionary item\",\n  postDictionaryBody.shape,\n  async (model: CreateDictionaryItemRequestModel) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.postDictionary(model);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default CreateDictionaryItemTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { UpdateDictionaryItemRequestModel } from \"@/umb-management-api/schemas/index.js\";\nimport {\n  putDictionaryByIdBody,\n  putDictionaryByIdParams,\n} from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nimport { z } from \"zod\";\n\nconst UpdateDictionaryItemTool = CreateUmbracoTool(\n  \"update-dictionary-item\",\n  \"Updates a dictionary item by Id\",\n  {\n    id: putDictionaryByIdParams.shape.id,\n    data: z.object(putDictionaryByIdBody.shape),\n  },\n  async (model: { id: string; data: UpdateDictionaryItemRequestModel }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.putDictionaryById(model.id, model.data);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating data type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default UpdateDictionaryItemTool;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { MoveDictionaryRequestModel } from \"@/umb-management-api/schemas/moveDictionaryRequestModel.js\";\nimport { putDictionaryByIdMoveParams, putDictionaryByIdMoveBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { z } from \"zod\";\n\nconst MoveDictionaryItemTool = CreateUmbracoTool(\n  \"move-dictionary-item\",\n  \"Moves a dictionary item by Id\",\n  {\n    id: putDictionaryByIdMoveParams.shape.id,\n    data: z.object(putDictionaryByIdMoveBody.shape)\n  },\n  async (model: { id: string; data: MoveDictionaryRequestModel}) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.putDictionaryByIdMove(model.id, model.data);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error moving dictionary item:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default MoveDictionaryItemTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getTreeDictionaryRootQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDictionaryRootTool = CreateUmbracoTool(\n  \"get-dictionary-root\",\n  \"Gets the root level of the dictionary tree\",\n  getTreeDictionaryRootQueryParams.shape,\n  async (params) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getTreeDictionaryRoot(params);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting dictionary root:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDictionaryRootTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getTreeDictionaryChildrenQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDictionaryChildrenTool = CreateUmbracoTool(\n  \"get-dictionary-children\",\n  \"Gets the children of a dictionary item by Id\",\n  getTreeDictionaryChildrenQueryParams.shape,\n  async (params) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getTreeDictionaryChildren(params);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting dictionary children:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDictionaryChildrenTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getTreeDictionaryAncestorsQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDictionaryAncestorsTool = CreateUmbracoTool(\n  \"get-dictionary-ancestors\",\n  \"Gets the ancestors of a dictionary item by Id\",\n  getTreeDictionaryAncestorsQueryParams.shape,\n  async (params) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getTreeDictionaryAncestors(params);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting dictionary ancestors:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDictionaryAncestorsTool; ","import DeleteDictionaryItemTool from \"./delete/delete-dictionary-item.js\";\nimport FindDictionaryItemTool from \"./get/find-dictionary-item.js\";\nimport GetDictionaryItemTool from \"./get/get-dictionary-item.js\";\nimport CreateDictionaryItemTool from \"./post/create-dictionary-item.js\";\nimport UpdateDictionaryItemTool from \"./put/update-dictionary-item.js\";\nimport MoveDictionaryItemTool from \"./put/move-dictionary-item.js\";\nimport GetDictionaryRootTool from \"./items/get/get-root.js\";\nimport GetDictionaryChildrenTool from \"./items/get/get-children.js\";\nimport GetDictionaryAncestorsTool from \"./items/get/get-ancestors.js\";\n\nexport const DictionaryTools = [\n  GetDictionaryItemTool,\n  FindDictionaryItemTool,\n  CreateDictionaryItemTool,\n  DeleteDictionaryItemTool,\n  UpdateDictionaryItemTool,\n  MoveDictionaryItemTool,\n  GetDictionaryRootTool,\n  GetDictionaryChildrenTool,\n  GetDictionaryAncestorsTool,\n];\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { CreateDocumentTypeRequestModel } from \"@/umb-management-api/schemas/index.js\";\nimport { postDocumentTypeBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst CreateDocumentTypeTool = CreateUmbracoTool(\n  \"create-document-type\",\n  \"Creates a new document type\",\n  postDocumentTypeBody.shape,\n  async (model: CreateDocumentTypeRequestModel) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.postDocumentType(model);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating document type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default CreateDocumentTypeTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { deleteDocumentTypeByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst DeleteDocumentTypeTool = CreateUmbracoTool(\n  \"delete-document-type\",\n  \"Deletes a document type by Id\",\n  deleteDocumentTypeByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.deleteDocumentTypeById(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error deleting document type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default DeleteDocumentTypeTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDocumentTypeByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentTypeByIdTool = CreateUmbracoTool(\n  \"get-document-type-by-id\",\n  \"Gets a document type by id\",\n  getDocumentTypeByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getDocumentTypeById(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypeByIdTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { UpdateDocumentTypeRequestModel } from \"@/umb-management-api/schemas/index.js\";\nimport {\n  putDocumentTypeByIdParams,\n  putDocumentTypeByIdBody,\n} from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { z } from \"zod\";\n\nconst UpdateDocumentTypeTool = CreateUmbracoTool(\n  \"update-document-type\",\n  \"Updates a document type by Id\",\n  {\n    id: putDocumentTypeByIdParams.shape.id,\n    data: z.object(putDocumentTypeByIdBody.shape),\n  },\n  async (model: { id: string; data: UpdateDocumentTypeRequestModel }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.putDocumentTypeById(model.id, model.data);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error updating document type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default UpdateDocumentTypeTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { postDocumentTypeByIdCopyBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { z } from \"zod\";\nimport { CopyDocumentTypeRequestModel } from \"@/umb-management-api/schemas/copyDocumentTypeRequestModel.js\";\n\nconst CopyDocumentTypeTool = CreateUmbracoTool(\n  \"copy-document-type\", \n  \"Copy a document type to a new location\",\n  {\n    id: z.string().uuid(),\n    data: z.object(postDocumentTypeByIdCopyBody.shape)\n  },\n  async (model: { id: string; data: CopyDocumentTypeRequestModel }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.postDocumentTypeByIdCopy(model.id, model.data);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response)\n          }\n        ]\n      };\n    } catch (error) {\n      console.error(\"Error copying document type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`\n          }\n        ]\n      };\n    }\n  }\n);\n\nexport default CopyDocumentTypeTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { putDocumentTypeByIdMoveBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { MoveDocumentTypeRequestModel } from \"@/umb-management-api/schemas/moveDocumentTypeRequestModel.js\";\nimport { z } from \"zod\";\n\nconst MoveDocumentTypeTool = CreateUmbracoTool(\n  \"move-document-type\",\n  \"Move a document type to a new location\",\n  {\n    id: z.string().uuid(),\n    data: z.object(putDocumentTypeByIdMoveBody.shape)\n  },\n  async (model: { id: string; data: MoveDocumentTypeRequestModel }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.putDocumentTypeByIdMove(model.id, model.data);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response)\n          }\n        ]\n      };\n    } catch (error) {\n      console.error(\"Error moving document type:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`\n          }\n        ]\n      };\n    }\n  }\n);\n\nexport default MoveDocumentTypeTool;","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { GetTreeDocumentTypeRootParams } from \"@/umb-management-api/schemas/index.js\";\nimport { getTreeDocumentTypeRootQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentTypeRootTool = CreateUmbracoTool(\n  \"get-document-type-root\",\n  \"Gets the root level of the document type tree\",\n  getTreeDocumentTypeRootQueryParams.shape,\n  async (params: GetTreeDocumentTypeRootParams) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getTreeDocumentTypeRoot(params);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document type root:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypeRootTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { GetTreeDocumentTypeChildrenParams } from \"@/umb-management-api/schemas/index.js\";\nimport { getTreeDocumentTypeChildrenQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentTypeChildrenTool = CreateUmbracoTool(\n  \"get-document-type-children\",\n  \"Gets the children of a document type\",\n  getTreeDocumentTypeChildrenQueryParams.shape,\n  async (params: GetTreeDocumentTypeChildrenParams) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getTreeDocumentTypeChildren(params);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document type children:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypeChildrenTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { GetTreeDocumentTypeAncestorsParams } from \"@/umb-management-api/schemas/index.js\";\nimport { getTreeDocumentTypeAncestorsQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentTypeAncestorsTool = CreateUmbracoTool(\n  \"get-document-type-ancestors\",\n  \"Gets the ancestors of a document type\",\n  getTreeDocumentTypeAncestorsQueryParams.shape,\n  async (params: GetTreeDocumentTypeAncestorsParams) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getTreeDocumentTypeAncestors(params);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document type ancestors:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypeAncestorsTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { CreateFolderRequestModel } from \"@/umb-management-api/schemas/index.js\";\nimport { postDocumentTypeFolderBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst CreateDocumentTypeFolderTool = CreateUmbracoTool(\n  \"create-document-type-folder\",\n  \"Creates a new document type folder\",\n  postDocumentTypeFolderBody.shape,\n  async (model: CreateFolderRequestModel) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.postDocumentTypeFolder(model);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating document type folder:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default CreateDocumentTypeFolderTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { deleteDocumentTypeFolderByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst DeleteDocumentTypeFolderTool = CreateUmbracoTool(\n  \"delete-document-type-folder\",\n  \"Deletes a document type folder by Id\",\n  deleteDocumentTypeFolderByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.deleteDocumentTypeFolderById(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error deleting document type folder:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default DeleteDocumentTypeFolderTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDocumentTypeFolderByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentTypeFolderTool = CreateUmbracoTool(\n  \"get-document-type-folder\",\n  \"Gets a document type folder by Id\",\n  getDocumentTypeFolderByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getDocumentTypeFolderById(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document type folder:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypeFolderTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport {\n  putDocumentTypeFolderByIdParams,\n  putDocumentTypeFolderByIdBody,\n} from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { z } from \"zod\";\n\nconst UpdateDocumentTypeFolderTool = CreateUmbracoTool(\n  \"update-document-type-folder\",\n  \"Updates a document type folder by Id\",\n  {\n    id: putDocumentTypeFolderByIdParams.shape.id,\n    data: z.object(putDocumentTypeFolderByIdBody.shape),\n  },\n  async (model: { id: string; data: { name: string } }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.putDocumentTypeFolderById(model.id, model.data);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error updating document type folder:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default UpdateDocumentTypeFolderTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDocumentTypeByIdBlueprintParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentTypeBlueprintTool = CreateUmbracoTool(\n  \"get-document-type-blueprint\",\n  \"Gets the blueprints for a document type\",\n  getDocumentTypeByIdBlueprintParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getDocumentTypeByIdBlueprint(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document type blueprints:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypeBlueprintTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDocumentTypeByIdCompositionReferencesParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentTypeCompositionReferencesTool = CreateUmbracoTool(\n  \"get-document-type-composition-references\",\n  \"Gets the composition references for a document type\",\n  getDocumentTypeByIdCompositionReferencesParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getDocumentTypeByIdCompositionReferences(id);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document type composition references:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypeCompositionReferencesTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { postDocumentTypeAvailableCompositionsBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentTypeAvailableCompositionsTool = CreateUmbracoTool(\n  \"get-document-type-available-compositions\",\n  \"Gets the available compositions for a document type\",\n  postDocumentTypeAvailableCompositionsBody.shape,\n  async (model) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.postDocumentTypeAvailableCompositions(model);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting available document type compositions:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypeAvailableCompositionsTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDocumentTypeByIdAllowedChildrenParams, getDocumentTypeByIdAllowedChildrenQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\n// Combine both parameter schemas\nconst paramSchema = getDocumentTypeByIdAllowedChildrenParams.merge(getDocumentTypeByIdAllowedChildrenQueryParams);\n\nconst GetDocumentTypeAllowedChildrenTool = CreateUmbracoTool(\n  \"get-document-type-allowed-children\",\n  \"Gets the document types that are allowed as children of a document type\",\n  paramSchema.shape,\n  async (model) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getDocumentTypeByIdAllowedChildren(model.id, {\n        skip: model.skip,\n        take: model.take\n      });\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting allowed document type children:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypeAllowedChildrenTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\n\nconst GetDocumentTypeConfigurationTool = CreateUmbracoTool(\n  \"get-document-type-configuration\",\n  \"Gets the global configuration for document types\",\n  {},\n  async () => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getDocumentTypeConfiguration();\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document type configuration:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypeConfigurationTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getItemDocumentTypeQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentTypesByIdArrayTool = CreateUmbracoTool(\n  \"get-document-types-by-id-array\",\n  \"Gets document types by IDs (or empty array if no IDs are provided)\",\n  getItemDocumentTypeQueryParams.shape,\n  async (params) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getItemDocumentType(params);\n\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting item document types:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentTypesByIdArrayTool; ","import CreateDocumentTypeTool from \"./post/create-document-type.js\";\nimport DeleteDocumentTypeTool from \"./delete/delete-document-type.js\";\nimport GetDocumentTypeTool from \"./get/get-document-type-by-ids.js\";\nimport UpdateDocumentTypeTool from \"./put/update-document-type.js\";\nimport CopyDocumentTypeTool from \"./post/copy-document-type.js\";\nimport MoveDocumentTypeTool from \"./put/move-document-type.js\";\nimport GetDocumentTypeRootTool from \"./items/get/get-root.js\";\nimport GetDocumentTypeChildrenTool from \"./items/get/get-children.js\";\nimport GetDocumentTypeAncestorsTool from \"./items/get/get-ancestors.js\";\nimport CreateDocumentTypeFolderTool from \"./folders/post/create-folder.js\";\nimport DeleteDocumentTypeFolderTool from \"./folders/delete/delete-folder.js\";\nimport GetDocumentTypeFolderTool from \"./folders/get/get-folder.js\";\nimport UpdateDocumentTypeFolderTool from \"./folders/put/update-folder.js\";\nimport GetDocumentTypeBlueprintTool from \"./get/get-document-type-blueprint.js\";\nimport GetDocumentTypeCompositionReferencesTool from \"./get/get-document-type-composition-references.js\";\nimport GetDocumentTypeAvailableCompositionsTool from \"./post/get-document-type-available-compositions.js\";\nimport GetDocumentTypeAllowedChildrenTool from \"./get/get-document-type-allowed-children.js\";\nimport GetDocumentTypeConfigurationTool from \"./get/get-document-type-configuration.js\";\nimport GetDocumentTypesByIdArrayTool from \"./get/get-document-type-by-id-array.js\";\n\nexport const DocumentTypeTools = [\n  CreateDocumentTypeTool,\n  DeleteDocumentTypeTool,\n  GetDocumentTypeTool,\n  UpdateDocumentTypeTool,\n  CopyDocumentTypeTool,\n  MoveDocumentTypeTool,\n  GetDocumentTypeRootTool,\n  GetDocumentTypeChildrenTool,\n  GetDocumentTypeAncestorsTool,\n  CreateDocumentTypeFolderTool,\n  DeleteDocumentTypeFolderTool,\n  GetDocumentTypeFolderTool,\n  UpdateDocumentTypeFolderTool,\n  GetDocumentTypeBlueprintTool,\n  GetDocumentTypeCompositionReferencesTool,\n  GetDocumentTypeAvailableCompositionsTool,\n  GetDocumentTypeAllowedChildrenTool,\n  GetDocumentTypeConfigurationTool,\n  GetDocumentTypesByIdArrayTool\n]; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getDocumentBlueprintByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentBlueprintTool = CreateUmbracoTool(\n  \"get-document-blueprint\",\n  \"Gets a document blueprint by Id\",\n  getDocumentBlueprintByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getDocumentBlueprintById(id);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document blueprint:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentBlueprintTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { deleteDocumentBlueprintByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst DeleteDocumentBlueprintTool = CreateUmbracoTool(\n  \"delete-document-blueprint\",\n  \"Deletes a document blueprint by Id\",\n  deleteDocumentBlueprintByIdParams.shape,\n  async ({ id }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.deleteDocumentBlueprintById(id);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error deleting document blueprint:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default DeleteDocumentBlueprintTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { UpdateDocumentBlueprintRequestModel } from \"@/umb-management-api/schemas/updateDocumentBlueprintRequestModel.js\";\nimport { putDocumentBlueprintByIdParams, putDocumentBlueprintByIdBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { z } from \"zod\";\n\nconst UpdateDocumentBlueprintTool = CreateUmbracoTool(\n  \"update-document-blueprint\",\n  \"Updates a document blueprint by Id\",\n  {\n    id: putDocumentBlueprintByIdParams.shape.id,\n    data: z.object(putDocumentBlueprintByIdBody.shape)\n  },\n  async (model: { id: string; data: UpdateDocumentBlueprintRequestModel }) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.putDocumentBlueprintById(model.id, model.data);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error updating document blueprint:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default UpdateDocumentBlueprintTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { postDocumentBlueprintBody } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst CreateDocumentBlueprintTool = CreateUmbracoTool(\n  \"create-document-blueprint\",\n  \"Creates a new document blueprint\",\n  postDocumentBlueprintBody.shape,\n  async (model) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.postDocumentBlueprint(model);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error creating document blueprint:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default CreateDocumentBlueprintTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getTreeDocumentBlueprintAncestorsQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentBlueprintAncestorsTool = CreateUmbracoTool(\n  \"get-document-blueprint-ancestors\",\n  \"Gets the ancestors of a document blueprint by Id\",\n  getTreeDocumentBlueprintAncestorsQueryParams.shape,\n  async (params) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getTreeDocumentBlueprintAncestors(params);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document blueprint ancestors:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentBlueprintAncestorsTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getTreeDocumentBlueprintChildrenQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentBlueprintChildrenTool = CreateUmbracoTool(\n  \"get-document-blueprint-children\",\n  \"Gets the children of a document blueprint by Id\",\n  getTreeDocumentBlueprintChildrenQueryParams.shape,\n  async (params) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getTreeDocumentBlueprintChildren(params);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document blueprint children:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentBlueprintChildrenTool; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTool } from \"@/helpers/create-umbraco-tool.js\";\nimport { getTreeDocumentBlueprintRootQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\n\nconst GetDocumentBlueprintRootTool = CreateUmbracoTool(\n  \"get-document-blueprint-root\",\n  \"Gets the root level of the document blueprint tree\",\n  getTreeDocumentBlueprintRootQueryParams.shape,\n  async (params) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      var response = await client.getTreeDocumentBlueprintRoot(params);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: JSON.stringify(response),\n          },\n        ],\n      };\n    } catch (error) {\n      console.error(\"Error getting document blueprint root:\", error);\n      return {\n        content: [\n          {\n            type: \"text\" as const,\n            text: `Error: ${error}`,\n          },\n        ],\n      };\n    }\n  }\n);\n\nexport default GetDocumentBlueprintRootTool; ","import GetDocumentBlueprintTool from \"./get/get-blueprint.js\";\nimport DeleteDocumentBlueprintTool from \"./delete/delete-blueprint.js\";\nimport UpdateDocumentBlueprintTool from \"./put/update-blueprint.js\";\nimport CreateDocumentBlueprintTool from \"./post/create-blueprint.js\";\nimport GetDocumentBlueprintAncestorsTool from \"./get/get-ancestors.js\";\nimport GetDocumentBlueprintChildrenTool from \"./get/get-children.js\";\nimport GetDocumentBlueprintRootTool from \"./get/get-root.js\";\n\nexport const DocumentBlueprintTools = [\n  GetDocumentBlueprintTool,\n  DeleteDocumentBlueprintTool,\n  UpdateDocumentBlueprintTool,\n  CreateDocumentBlueprintTool,\n  GetDocumentBlueprintAncestorsTool,\n  GetDocumentBlueprintChildrenTool,\n  GetDocumentBlueprintRootTool\n]; ","import { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\nimport { CultureTools } from \"./culture/index.js\";\nimport { DataTypeTools } from \"./data-type/index.js\";\nimport { DictionaryTools } from \"./dictionary/index.js\";\nimport { DocumentTypeTools } from \"./document-type/index.js\";\nimport { DocumentBlueprintTools } from \"./document-blueprint/index.js\";\n\nexport function ToolFactory(server: McpServer) {\n  CultureTools.map((tool) => tool()).forEach((tool) =>\n    server.tool(tool.name, tool.description, tool.schema, tool.handler)\n  );\n  DataTypeTools.map((tool) => tool()).forEach((tool) =>\n    server.tool(tool.name, tool.description, tool.schema, tool.handler)\n  );\n  DictionaryTools.map((tool) => tool()).forEach((tool) =>\n    server.tool(tool.name, tool.description, tool.schema, tool.handler)\n  );\n  DocumentBlueprintTools.map((tool) => tool()).forEach((tool) =>\n    server.tool(tool.name, tool.description, tool.schema, tool.handler)\n  );\n  DocumentTypeTools.map((tool) => tool()).forEach((tool) =>\n    server.tool(tool.name, tool.description, tool.schema, tool.handler)\n  );\n\n}\n","import { ReadResourceTemplateCallback, ResourceTemplate } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { ResourceTemplateDefinition } from \"types/resource-template-definition.js\";\n\nexport const CreateUmbracoTemplateResource = (\n  name: string,\n  description: string,\n  template: ResourceTemplate,\n  handler: ReadResourceTemplateCallback\n): (() => ResourceTemplateDefinition) =>\n  () => ({\n    name,\n    description,\n    template,\n    handler\n  }); ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTemplateResource } from \"@/helpers/create-umbraco-template-resource.js\";\nimport { getTreeDataTypeAncestorsQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { ResourceTemplate } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\nconst GetDataTypeAncestorsResource = CreateUmbracoTemplateResource(\n  \"List Ancestor Data Types\",\n  \"List the ancestors of a data type\",\n  new ResourceTemplate(\"umbraco://data-type/ancestors?descendantId={descendantId}\", {\n    list: undefined,\n    complete: {\n      descendantId: (value: string) => [] // This will be populated dynamically\n    }\n  }),\n  async (uri, variables) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const params = getTreeDataTypeAncestorsQueryParams.parse(variables);\n      const response = await client.getTreeDataTypeAncestors(params);\n      return {\n        contents: [{\n          uri: uri.href,\n          text: JSON.stringify(response, null, 2),\n          mimeType: \"application/json\"\n        }]\n      };\n    } catch (error) {\n      console.error('Error in GetDataTypeAncestorsResource:', error);\n      throw error;\n    }\n  }\n);\n\nexport default GetDataTypeAncestorsResource; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTemplateResource } from \"@/helpers/create-umbraco-template-resource.js\";\nimport { getTreeDataTypeChildrenQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { ResourceTemplate } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\nconst GetDataTypeChildrenResource = CreateUmbracoTemplateResource(\n  \"List Data Type Children\",\n  \"List the children of a data type folder\",\n  new ResourceTemplate(\"umbraco://data-type/children?parentId={parentId}&skip={skip}&take={take}&foldersOnly={foldersOnly}\", {\n    list: undefined,\n    complete: {\n      parentId: (value: string) => [], // This will be populated dynamically\n      skip: (value: string) => [\"0\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\"],\n      take: (value: string) => [\"10\", \"20\", \"50\", \"100\"],\n      foldersOnly: (value: string) => [\"true\", \"false\"]\n    }\n  }),\n  async (uri, variables) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const params = getTreeDataTypeChildrenQueryParams.parse(variables);\n      const response = await client.getTreeDataTypeChildren(params);\n      return {\n        contents: [{\n          uri: uri.href,\n          text: JSON.stringify(response, null, 2),\n          mimeType: \"application/json\"\n        }]\n      };\n    } catch (error) {\n      console.error('Error in GetDataTypeChildrenResource:', error);\n      throw error;\n    }\n  }\n);\n\nexport default GetDataTypeChildrenResource; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTemplateResource } from \"@/helpers/create-umbraco-template-resource.js\";\nimport { getDataTypeFolderByIdParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { ResourceTemplate } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\nconst GetDataTypeFolderResource = CreateUmbracoTemplateResource(\n  \"Get Data Type Folder\",\n  \"Get details of a data type folder\",\n  new ResourceTemplate(\"umbraco://data-type/folder/{id}\", {\n    list: undefined,\n    complete: {\n      id: (value: string) => [] // This will be populated dynamically\n    }\n  }),\n  async (uri, variables) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const params = getDataTypeFolderByIdParams.parse(variables);\n      const response = await client.getDataTypeFolderById(params.id);\n      return {\n        contents: [{\n          uri: uri.href,\n          text: JSON.stringify(response, null, 2),\n          mimeType: \"application/json\"\n        }]\n      };\n    } catch (error) {\n      console.error('Error in GetDataTypeFolderResource:', error);\n      throw error;\n    }\n  }\n);\n\nexport default GetDataTypeFolderResource; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTemplateResource } from \"@/helpers/create-umbraco-template-resource.js\";\nimport { getDataTypeByIdIsUsedParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { ResourceTemplate } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\nconst GetDataTypeIsUsedResource = CreateUmbracoTemplateResource(\n  \"Check Data Type Usage\",\n  \"Check if a data type is used within Umbraco\",\n  new ResourceTemplate(\"umbraco://data-type/{id}/is-used\", {\n    list: undefined,\n    complete: {\n      id: (value: string) => [] // This will be populated dynamically\n    }\n  }),\n  async (uri, variables) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const params = getDataTypeByIdIsUsedParams.parse(variables);\n      const response = await client.getDataTypeByIdIsUsed(params.id);\n      return {\n        contents: [{\n          uri: uri.href,\n          text: JSON.stringify(response, null, 2),\n          mimeType: \"application/json\"\n        }]\n      };\n    } catch (error) {\n      console.error('Error in GetDataTypeIsUsedResource:', error);\n      throw error;\n    }\n  }\n);\n\nexport default GetDataTypeIsUsedResource; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTemplateResource } from \"@/helpers/create-umbraco-template-resource.js\";\nimport { getFilterDataTypeQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { ResourceTemplate } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\nconst GetDataTypeQueryResource = CreateUmbracoTemplateResource(\n  \"Filter Data Types\",\n  \"Filter data types by name, editor UI alias, or editor alias\",\n  new ResourceTemplate(\"umbraco://data-type/filter?name={name}&editorUiAlias={editorUiAlias}&editorAlias={editorAlias}&skip={skip}&take={take}\", {\n    list: undefined,\n    complete: {\n      name: (value: string) => [], // This will be populated dynamically\n      editorUiAlias: (value: string) => [], // This will be populated dynamically\n      editorAlias: (value: string) => [], // This will be populated dynamically\n      skip: (value: string) => [\"0\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\"],\n      take: (value: string) => [\"10\", \"20\", \"50\", \"100\"]\n    }\n  }),\n  async (uri, variables) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const params = getFilterDataTypeQueryParams.parse(variables);\n      const response = await client.getFilterDataType(params);\n      return {\n        contents: [{\n          uri: uri.href,\n          text: JSON.stringify(response, null, 2),\n          mimeType: \"application/json\"\n        }]\n      };\n    } catch (error) {\n      console.error('Error in GetDataTypeFilterResource:', error);\n      throw error;\n    }\n  }\n);\n\nexport default GetDataTypeQueryResource; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTemplateResource } from \"@/helpers/create-umbraco-template-resource.js\";\nimport { getDataTypeByIdReferencesParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { ResourceTemplate } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\nconst GetDataTypeReferencesResource = CreateUmbracoTemplateResource(\n  \"Get Data Type References\",\n  \"Get references to a data type from content types\",\n  new ResourceTemplate(\"umbraco://data-type/{id}/references\", {\n    list: undefined,\n    complete: {\n      id: (value: string) => [] // This will be populated dynamically\n    }\n  }),\n  async (uri, variables) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const params = getDataTypeByIdReferencesParams.parse(variables);\n      const response = await client.getDataTypeByIdReferences(params.id);\n      return {\n        contents: [{\n          uri: uri.href,\n          text: JSON.stringify(response, null, 2),\n          mimeType: \"application/json\"\n        }]\n      };\n    } catch (error) {\n      console.error('Error in GetDataTypeReferencesResource:', error);\n      throw error;\n    }\n  }\n);\n\nexport default GetDataTypeReferencesResource; ","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTemplateResource } from \"@/helpers/create-umbraco-template-resource.js\";\nimport { getTreeDataTypeRootQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { ResourceTemplate } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\nconst GetDataTypeRootResource = CreateUmbracoTemplateResource(\n  \"List Data Types at Root\",\n  \"List the data types at the root of the Umbraco instance\",\n  new ResourceTemplate(\"umbraco://data-type/root?skip={skip}&take={take}&foldersOnly={foldersOnly}\", {\n    list: undefined,\n    complete: {\n      skip: (value: string) => [\"0\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\"],\n      take: (value: string) => [\"10\", \"20\", \"50\", \"100\"],\n      foldersOnly: (value: string) => [\"true\", \"false\"]\n    }\n  }),\n  async (uri, variables) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const params = getTreeDataTypeRootQueryParams.parse(variables);\n      const response = await client.getTreeDataTypeRoot(params);\n      return {\n        contents: [{\n          uri: uri.href,\n          text: JSON.stringify(response, null, 2),\n          mimeType: \"application/json\"\n        }]\n      };\n    } catch (error) {\n      console.error('Error in GetDataTypeRootResource:', error);\n      throw error;\n    }\n  }\n);\n\nexport default GetDataTypeRootResource;\n","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoTemplateResource } from \"@/helpers/create-umbraco-template-resource.js\";\nimport { getItemDataTypeSearchQueryParams } from \"@/umb-management-api/umbracoManagementAPI.zod.js\";\nimport { ResourceTemplate } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\nconst GetDataTypeSearchResource = CreateUmbracoTemplateResource(\n  \"Search Data Types\",\n  \"Search for data types by name\",\n  new ResourceTemplate(\"umbraco://data-type/search?query={query}&skip={skip}&take={take}\", {\n    list: undefined,\n    complete: {\n      query: (value: string) => [], // This will be populated dynamically\n      skip: (value: string) => [\"0\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\"],\n      take: (value: string) => [\"10\", \"20\", \"50\", \"100\"]\n    }\n  }),\n  async (uri, variables) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const params = getItemDataTypeSearchQueryParams.parse(variables);\n      const response = await client.getItemDataTypeSearch(params);\n      return {\n        contents: [{\n          uri: uri.href,\n          text: JSON.stringify(response, null, 2),\n          mimeType: \"application/json\"\n        }]\n      };\n    } catch (error) {\n      console.error('Error in GetDataTypeSearchResource:', error);\n      throw error;\n    }\n  }\n);\n\nexport default GetDataTypeSearchResource; ","import GetDataTypeAncestorsResource from \"./get/get-ancestors.js\";\nimport GetDataTypeChildrenResource from \"./get/get-children.js\";\nimport GetDataTypeFolderResource from \"./get/get-folder.js\";\nimport GetDataTypeIsUsedResource from \"./get/get-is-used.js\";\nimport GetDataTypeQueryResource from \"./get/get-query.js\";\nimport GetDataTypeReferencesResource from \"./get/get-references.js\";\nimport GetDataTypeRootResource from \"./get/get-root.js\";\nimport GetDataTypeSearchResource from \"./get/get-search.js\";\n\nexport const DataTypeTemplateResources = [\n  GetDataTypeAncestorsResource,\n  GetDataTypeChildrenResource,\n  GetDataTypeFolderResource,\n  GetDataTypeIsUsedResource,\n  GetDataTypeQueryResource,\n  GetDataTypeReferencesResource,\n  GetDataTypeRootResource,\n  GetDataTypeSearchResource,\n];\n","import { ReadResourceCallback } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { ResourceDefinition } from \"../types/resource-definition.js\";\n\nexport const CreateUmbracoReadResource =\n  (\n    uri: string,\n    name: string,\n    description: string,\n    handler: ReadResourceCallback\n  ): (() => ResourceDefinition) =>\n    () => ({\n      uri,\n      name,\n      description,\n      handler\n    });","import { UmbracoManagementClient } from \"@/clients/umbraco-management-client.js\";\nimport { CreateUmbracoReadResource } from \"@/helpers/create-umbraco-read-resource.js\";\n\nconst GetLangagueDefaultResource = CreateUmbracoReadResource(\n  \"umbraco://item/langage/default\",\n  \"List default language\",\n  \"List the default language for the current Umbraco instance\",\n  async (uri) => {\n    try {\n      const client = UmbracoManagementClient.getClient();\n      const response = await client.getItemLanguageDefault();\n      return {\n        contents: [{\n          uri: uri.href,\n          text: JSON.stringify(response, null, 2),\n          mimeType: \"application/json\"\n        }]\n      };\n    } catch (error) {\n      console.error('Error in GetItemLanguageDefault:', error);\n      throw error;\n    }\n  }\n);\n\nexport default GetLangagueDefaultResource;","import GetLangagueDefaultResource from \"./get/get-default.js\";\n\nexport const LanugageReadResources = [\n  GetLangagueDefaultResource,\n];\n","import { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { DataTypeTemplateResources } from \"./data-types/index.js\";\nimport { LanugageReadResources } from \"./language/index.js\";\n\nexport function ResourceFactory(server: McpServer) {\n  LanugageReadResources.map((resource) => resource()).forEach((resource) =>\n    server.resource(resource.name, resource.uri, { description: resource.description }, resource.handler)\n  );\n\n  DataTypeTemplateResources.map((resource) => resource()).forEach((resource) =>\n    server.resource(resource.name, resource.template, { description: resource.description }, resource.handler)\n  );\n}\n","#!/usr/bin/env node\n\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { UmbracoMcpServer } from \"./server/umbraco-mcp-server.js\";\nimport { ToolFactory } from \"./tools/tool-factory.js\";\nimport { ResourceFactory } from \"./resources/resource-factory.js\";\n\nconst main = async () => {\n  // Create an MCP server\n  const server = UmbracoMcpServer.GetServer();\n\n  ResourceFactory(server);\n  ToolFactory(server);\n\n  // Start receiving messages on stdin and sending messages on stdout\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n};\n\nmain().catch((error) => {\n  console.error(\"Error:\", error);\n  process.exit(1);\n});\n"]}