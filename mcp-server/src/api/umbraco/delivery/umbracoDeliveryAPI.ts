/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Umbraco Delivery API
 * You can find out more about the Umbraco Delivery API in [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api).
 * OpenAPI spec version: Latest
 */
import { z as zod } from "zod";

/**
 * @deprecated
 */
export const getContentQuerySkipDefault = 0;
export const getContentQueryTakeDefault = 10;

export const getContentQueryParams = zod.object({
  fetch: zod
    .string()
    .optional()
    .describe(
      "Specifies the content items to fetch. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
  filter: zod
    .array(zod.string())
    .optional()
    .describe(
      "Defines how to filter the fetched content items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
  sort: zod
    .array(zod.string())
    .optional()
    .describe(
      "Defines how to sort the found content items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
  skip: zod
    .number()
    .optional()
    .describe(
      "Specifies the number of found content items to skip. Use this to control pagination of the response."
    ),
  take: zod
    .number()
    .default(getContentQueryTakeDefault)
    .describe(
      "Specifies the number of found content items to take. Use this to control pagination of the response."
    ),
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
});

export const getContentHeader = zod.object({
  "Accept-Language": zod
    .string()
    .optional()
    .describe(
      "Defines the language to return. Use this when querying language variant content items."
    ),
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
  Preview: zod
    .boolean()
    .optional()
    .describe("Whether to request draft content."),
  "Start-Item": zod
    .string()
    .optional()
    .describe("URL segment or GUID of a root content item."),
});

export const getContentResponse = zod.object({
  total: zod.number(),
  items: zod.array(
    zod.object({
      id: zod.string().uuid(),
      contentType: zod.string(),
      properties: zod.record(zod.string(), zod.any().nullable()),
      name: zod.string(),
      createDate: zod.string().datetime({ precision: 6 }),
      updateDate: zod.string().datetime({ precision: 6 }),
      route: zod.object({
        path: zod.string(),
        startItem: zod.object({
          id: zod.string().uuid(),
          path: zod.string(),
        }),
      }),
      cultures: zod.record(
        zod.string(),
        zod.object({
          path: zod.string(),
          startItem: zod.object({
            id: zod.string().uuid(),
            path: zod.string(),
          }),
        })
      ),
    })
  ),
});

export const getContent20QuerySkipDefault = 0;
export const getContent20QueryTakeDefault = 10;

export const getContent20QueryParams = zod.object({
  fetch: zod
    .string()
    .optional()
    .describe(
      `The selector allows you to fetch different subsets of items based on a GUID or path of a specific content item. The Delivery API will search all available content items if no fetch parameter is provided. The following built-in selectors can be used out of the box:

?fetch=ancestors:id or path
All ancestors of a content item specified by either its id or path will be retrieved.

?fetch=children:id or path
All immediate children of a content item specified by either its id or path will be retrieved.

?fetch=descendants:id or path
All descendants of a content item specified by either its id or path will be retrieved.

Only one selector option can be applied to a query at a time. You cannot combine multiple fetch parameters in a single query. An example Id would be dc1f43da-49c6-4d87-b104-a5864eca8152, an example path would be /blog/`
    ),
  filter: zod
    .array(zod.string())
    .optional()
    .describe(
      "Defines how to filter the fetched content items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
  sort: zod
    .array(zod.string())
    .optional()
    .describe(
      "Defines how to sort the found content items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
  skip: zod
    .number()
    .optional()
    .describe(
      "Specifies the number of found content items to skip. Use this to control pagination of the response."
    ),
  take: zod
    .number()
    .default(getContent20QueryTakeDefault)
    .describe(
      "Specifies the number of found content items to take. Use this to control pagination of the response."
    ),
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
  fields: zod
    .string()
    .optional()
    .describe(
      "Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
});

export const getContent20Header = zod.object({
  "Accept-Language": zod
    .string()
    .optional()
    .describe(
      "Defines the language to return. Use this when querying language variant content items."
    ),
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
  Preview: zod
    .boolean()
    .optional()
    .describe("Whether to request draft content."),
  "Start-Item": zod
    .string()
    .optional()
    .describe("URL segment or GUID of a root content item."),
});

export const getContent20Response = zod.object({
  total: zod.number(),
  items: zod.array(
    zod.object({
      id: zod.string().uuid(),
      contentType: zod.string(),
      properties: zod.record(zod.string(), zod.any().nullable()),
      name: zod.string(),
      createDate: zod.string().datetime({ local: true }),
      updateDate: zod.string().datetime({ local: true }),
      route: zod.object({
        path: zod.string(),
        startItem: zod.object({
          id: zod.string().uuid(),
          path: zod.string(),
        }),
      }),
      cultures: zod.record(
        zod.string(),
        zod.object({
          path: zod.string(),
          startItem: zod.object({
            id: zod.string().uuid(),
            path: zod.string(),
          }),
        })
      ),
    })
  ),
});

/**
 * @deprecated
 */
export const getContentItemQueryParams = zod.object({
  id: zod.array(zod.string().uuid()).optional(),
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
});

export const getContentItemHeader = zod.object({
  "Accept-Language": zod
    .string()
    .optional()
    .describe(
      "Defines the language to return. Use this when querying language variant content items."
    ),
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
  Preview: zod
    .boolean()
    .optional()
    .describe("Whether to request draft content."),
  "Start-Item": zod
    .string()
    .optional()
    .describe("URL segment or GUID of a root content item."),
});

export const getContentItemResponseItem = zod.object({
  id: zod.string().uuid(),
  contentType: zod.string(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  name: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
  route: zod.object({
    path: zod.string(),
    startItem: zod.object({
      id: zod.string().uuid(),
      path: zod.string(),
    }),
  }),
  cultures: zod.record(
    zod.string(),
    zod.object({
      path: zod.string(),
      startItem: zod.object({
        id: zod.string().uuid(),
        path: zod.string(),
      }),
    })
  ),
});
export const getContentItemResponse = zod.array(getContentItemResponseItem);

/**
 * @deprecated
 */
export const getContentItemByPathPathPathDefault = "";

export const getContentItemByPathParams = zod.object({
  path: zod.string(),
});

export const getContentItemByPathQueryParams = zod.object({
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
});

export const getContentItemByPathHeader = zod.object({
  "Accept-Language": zod
    .string()
    .optional()
    .describe(
      "Defines the language to return. Use this when querying language variant content items."
    ),
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
  Preview: zod
    .boolean()
    .optional()
    .describe("Whether to request draft content."),
  "Start-Item": zod
    .string()
    .optional()
    .describe("URL segment or GUID of a root content item."),
});

export const getContentItemByPathResponse = zod.object({
  id: zod.string().uuid(),
  contentType: zod.string(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  name: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
  route: zod.object({
    path: zod.string(),
    startItem: zod.object({
      id: zod.string().uuid(),
      path: zod.string(),
    }),
  }),
  cultures: zod.record(
    zod.string(),
    zod.object({
      path: zod.string(),
      startItem: zod.object({
        id: zod.string().uuid(),
        path: zod.string(),
      }),
    })
  ),
});

export const getContentItemByPath20PathPathDefault = "";

export const getContentItemByPath20Params = zod.object({
  path: zod.string(),
});

export const getContentItemByPath20QueryParams = zod.object({
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
  fields: zod
    .string()
    .optional()
    .describe(
      "Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
});

export const getContentItemByPath20Header = zod.object({
  "Accept-Language": zod
    .string()
    .optional()
    .describe(
      "Defines the language to return. Use this when querying language variant content items."
    ),
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
  Preview: zod
    .boolean()
    .optional()
    .describe("Whether to request draft content."),
  "Start-Item": zod
    .string()
    .optional()
    .describe("URL segment or GUID of a root content item."),
});

export const getContentItemByPath20Response = zod.object({
  id: zod.string().uuid(),
  contentType: zod.string(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  name: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
  route: zod.object({
    path: zod.string(),
    startItem: zod.object({
      id: zod.string().uuid(),
      path: zod.string(),
    }),
  }),
  cultures: zod.record(
    zod.string(),
    zod.object({
      path: zod.string(),
      startItem: zod.object({
        id: zod.string().uuid(),
        path: zod.string(),
      }),
    })
  ),
});

/**
 * @deprecated
 */
export const getContentItemByIdParams = zod.object({
  id: zod.string().uuid(),
});

export const getContentItemByIdQueryParams = zod.object({
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
});

export const getContentItemByIdHeader = zod.object({
  "Accept-Language": zod
    .string()
    .optional()
    .describe(
      "Defines the language to return. Use this when querying language variant content items."
    ),
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
  Preview: zod
    .boolean()
    .optional()
    .describe("Whether to request draft content."),
  "Start-Item": zod
    .string()
    .optional()
    .describe("URL segment or GUID of a root content item."),
});

export const getContentItemByIdResponse = zod.object({
  id: zod.string().uuid(),
  contentType: zod.string(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  name: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
  route: zod.object({
    path: zod.string(),
    startItem: zod.object({
      id: zod.string().uuid(),
      path: zod.string(),
    }),
  }),
  cultures: zod.record(
    zod.string(),
    zod.object({
      path: zod.string(),
      startItem: zod.object({
        id: zod.string().uuid(),
        path: zod.string(),
      }),
    })
  ),
});

export const getContentItemById20Params = zod.object({
  id: zod.string().uuid(),
});

export const getContentItemById20QueryParams = zod.object({
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
  fields: zod
    .string()
    .optional()
    .describe(
      "Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
});

export const getContentItemById20Header = zod.object({
  "Accept-Language": zod
    .string()
    .optional()
    .describe(
      "Defines the language to return. Use this when querying language variant content items."
    ),
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
  Preview: zod
    .boolean()
    .optional()
    .describe("Whether to request draft content."),
  "Start-Item": zod
    .string()
    .optional()
    .describe("URL segment or GUID of a root content item."),
});

export const getContentItemById20Response = zod.object({
  id: zod.string().uuid(),
  contentType: zod.string(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  name: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
  route: zod.object({
    path: zod.string(),
    startItem: zod.object({
      id: zod.string().uuid(),
      path: zod.string(),
    }),
  }),
  cultures: zod.record(
    zod.string(),
    zod.object({
      path: zod.string(),
      startItem: zod.object({
        id: zod.string().uuid(),
        path: zod.string(),
      }),
    })
  ),
});

export const getContentItems20QueryParams = zod.object({
  id: zod.array(zod.string().uuid()).optional(),
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
  fields: zod
    .string()
    .optional()
    .describe(
      "Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this."
    ),
});

export const getContentItems20Header = zod.object({
  "Accept-Language": zod
    .string()
    .optional()
    .describe(
      "Defines the language to return. Use this when querying language variant content items."
    ),
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
  Preview: zod
    .boolean()
    .optional()
    .describe("Whether to request draft content."),
  "Start-Item": zod
    .string()
    .optional()
    .describe("URL segment or GUID of a root content item."),
});

export const getContentItems20ResponseItem = zod.object({
  id: zod.string().uuid(),
  contentType: zod.string(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  name: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
  route: zod.object({
    path: zod.string(),
    startItem: zod.object({
      id: zod.string().uuid(),
      path: zod.string(),
    }),
  }),
  cultures: zod.record(
    zod.string(),
    zod.object({
      path: zod.string(),
      startItem: zod.object({
        id: zod.string().uuid(),
        path: zod.string(),
      }),
    })
  ),
});
export const getContentItems20Response = zod.array(
  getContentItems20ResponseItem
);

/**
 * @deprecated
 */
export const getMediaQuerySkipDefault = 0;
export const getMediaQueryTakeDefault = 10;

export const getMediaQueryParams = zod.object({
  fetch: zod
    .string()
    .optional()
    .describe(
      "Specifies the media items to fetch. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
  filter: zod
    .array(zod.string())
    .optional()
    .describe(
      "Defines how to filter the fetched media items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
  sort: zod
    .array(zod.string())
    .optional()
    .describe(
      "Defines how to sort the found media items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
  skip: zod
    .number()
    .optional()
    .describe(
      "Specifies the number of found media items to skip. Use this to control pagination of the response."
    ),
  take: zod
    .number()
    .default(getMediaQueryTakeDefault)
    .describe(
      "Specifies the number of found media items to take. Use this to control pagination of the response."
    ),
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
});

export const getMediaHeader = zod.object({
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
});

export const getMediaResponse = zod.object({
  total: zod.number(),
  items: zod.array(
    zod.object({
      id: zod.string().uuid(),
      name: zod.string(),
      mediaType: zod.string(),
      url: zod.string(),
      extension: zod.string().nullish(),
      width: zod.number().nullish(),
      height: zod.number().nullish(),
      bytes: zod.number().nullish(),
      properties: zod.record(zod.string(), zod.any().nullable()),
      focalPoint: zod
        .object({
          left: zod.number(),
          top: zod.number(),
        })
        .nullish(),
      crops: zod
        .array(
          zod.object({
            alias: zod.string().nullish(),
            width: zod.number(),
            height: zod.number(),
            coordinates: zod
              .object({
                x1: zod.number(),
                y1: zod.number(),
                x2: zod.number(),
                y2: zod.number(),
              })
              .nullish(),
          })
        )
        .nullish(),
      path: zod.string(),
      createDate: zod.string().datetime({}),
      updateDate: zod.string().datetime({}),
    })
  ),
});

export const getMedia20QuerySkipDefault = 0;
export const getMedia20QueryTakeDefault = 10;

export const getMedia20QueryParams = zod.object({
  fetch: zod
    .string()
    .optional()
    .describe(
      "Specifies the media items to fetch. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
  filter: zod
    .array(zod.string())
    .optional()
    .describe(
      "Defines how to filter the fetched media items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
  sort: zod
    .array(zod.string())
    .optional()
    .describe(
      "Defines how to sort the found media items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
  skip: zod
    .number()
    .optional()
    .describe(
      "Specifies the number of found media items to skip. Use this to control pagination of the response."
    ),
  take: zod
    .number()
    .default(getMedia20QueryTakeDefault)
    .describe(
      "Specifies the number of found media items to take. Use this to control pagination of the response."
    ),
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
  fields: zod
    .string()
    .optional()
    .describe(
      "Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
});

export const getMedia20Header = zod.object({
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
});

export const getMedia20Response = zod.object({
  total: zod.number(),
  items: zod.array(
    zod.object({
      id: zod.string().uuid(),
      name: zod.string(),
      mediaType: zod.string(),
      url: zod.string(),
      extension: zod.string().nullish(),
      width: zod.number().nullish(),
      height: zod.number().nullish(),
      bytes: zod.number().nullish(),
      properties: zod.record(zod.string(), zod.any().nullable()),
      focalPoint: zod
        .object({
          left: zod.number(),
          top: zod.number(),
        })
        .nullish(),
      crops: zod
        .array(
          zod.object({
            alias: zod.string().nullish(),
            width: zod.number(),
            height: zod.number(),
            coordinates: zod
              .object({
                x1: zod.number(),
                y1: zod.number(),
                x2: zod.number(),
                y2: zod.number(),
              })
              .nullish(),
          })
        )
        .nullish(),
      path: zod.string(),
      createDate: zod.string().datetime({}),
      updateDate: zod.string().datetime({}),
    })
  ),
});

/**
 * @deprecated
 */
export const getMediaItemQueryParams = zod.object({
  id: zod.array(zod.string().uuid()).optional(),
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
});

export const getMediaItemHeader = zod.object({
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
});

export const getMediaItemResponseItem = zod.object({
  id: zod.string().uuid(),
  name: zod.string(),
  mediaType: zod.string(),
  url: zod.string(),
  extension: zod.string().nullish(),
  width: zod.number().nullish(),
  height: zod.number().nullish(),
  bytes: zod.number().nullish(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  focalPoint: zod
    .object({
      left: zod.number(),
      top: zod.number(),
    })
    .nullish(),
  crops: zod
    .array(
      zod.object({
        alias: zod.string().nullish(),
        width: zod.number(),
        height: zod.number(),
        coordinates: zod
          .object({
            x1: zod.number(),
            y1: zod.number(),
            x2: zod.number(),
            y2: zod.number(),
          })
          .nullish(),
      })
    )
    .nullish(),
  path: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
});
export const getMediaItemResponse = zod.array(getMediaItemResponseItem);

/**
 * @deprecated
 */
export const getMediaItemByPathParams = zod.object({
  path: zod.string(),
});

export const getMediaItemByPathQueryParams = zod.object({
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
});

export const getMediaItemByPathHeader = zod.object({
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
});

export const getMediaItemByPathResponse = zod.object({
  id: zod.string().uuid(),
  name: zod.string(),
  mediaType: zod.string(),
  url: zod.string(),
  extension: zod.string().nullish(),
  width: zod.number().nullish(),
  height: zod.number().nullish(),
  bytes: zod.number().nullish(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  focalPoint: zod
    .object({
      left: zod.number(),
      top: zod.number(),
    })
    .nullish(),
  crops: zod
    .array(
      zod.object({
        alias: zod.string().nullish(),
        width: zod.number(),
        height: zod.number(),
        coordinates: zod
          .object({
            x1: zod.number(),
            y1: zod.number(),
            x2: zod.number(),
            y2: zod.number(),
          })
          .nullish(),
      })
    )
    .nullish(),
  path: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
});

export const getMediaItemByPath20Params = zod.object({
  path: zod.string(),
});

export const getMediaItemByPath20QueryParams = zod.object({
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
  fields: zod
    .string()
    .optional()
    .describe(
      "Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
});

export const getMediaItemByPath20Header = zod.object({
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
});

export const getMediaItemByPath20Response = zod.object({
  id: zod.string().uuid(),
  name: zod.string(),
  mediaType: zod.string(),
  url: zod.string(),
  extension: zod.string().nullish(),
  width: zod.number().nullish(),
  height: zod.number().nullish(),
  bytes: zod.number().nullish(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  focalPoint: zod
    .object({
      left: zod.number(),
      top: zod.number(),
    })
    .nullish(),
  crops: zod
    .array(
      zod.object({
        alias: zod.string().nullish(),
        width: zod.number(),
        height: zod.number(),
        coordinates: zod
          .object({
            x1: zod.number(),
            y1: zod.number(),
            x2: zod.number(),
            y2: zod.number(),
          })
          .nullish(),
      })
    )
    .nullish(),
  path: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
});

/**
 * @deprecated
 */
export const getMediaItemByIdParams = zod.object({
  id: zod.string().uuid(),
});

export const getMediaItemByIdQueryParams = zod.object({
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
});

export const getMediaItemByIdHeader = zod.object({
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
});

export const getMediaItemByIdResponse = zod.object({
  id: zod.string().uuid(),
  name: zod.string(),
  mediaType: zod.string(),
  url: zod.string(),
  extension: zod.string().nullish(),
  width: zod.number().nullish(),
  height: zod.number().nullish(),
  bytes: zod.number().nullish(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  focalPoint: zod
    .object({
      left: zod.number(),
      top: zod.number(),
    })
    .nullish(),
  crops: zod
    .array(
      zod.object({
        alias: zod.string().nullish(),
        width: zod.number(),
        height: zod.number(),
        coordinates: zod
          .object({
            x1: zod.number(),
            y1: zod.number(),
            x2: zod.number(),
            y2: zod.number(),
          })
          .nullish(),
      })
    )
    .nullish(),
  path: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
});

export const getMediaItemById20Params = zod.object({
  id: zod.string().uuid(),
});

export const getMediaItemById20QueryParams = zod.object({
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
  fields: zod
    .string()
    .optional()
    .describe(
      "Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
});

export const getMediaItemById20Header = zod.object({
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
});

export const getMediaItemById20Response = zod.object({
  id: zod.string().uuid(),
  name: zod.string(),
  mediaType: zod.string(),
  url: zod.string(),
  extension: zod.string().nullish(),
  width: zod.number().nullish(),
  height: zod.number().nullish(),
  bytes: zod.number().nullish(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  focalPoint: zod
    .object({
      left: zod.number(),
      top: zod.number(),
    })
    .nullish(),
  crops: zod
    .array(
      zod.object({
        alias: zod.string().nullish(),
        width: zod.number(),
        height: zod.number(),
        coordinates: zod
          .object({
            x1: zod.number(),
            y1: zod.number(),
            x2: zod.number(),
            y2: zod.number(),
          })
          .nullish(),
      })
    )
    .nullish(),
  path: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
});

export const getMediaItems20QueryParams = zod.object({
  id: zod.array(zod.string().uuid()).optional(),
  expand: zod
    .string()
    .optional()
    .describe(
      "Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
  fields: zod
    .string()
    .optional()
    .describe(
      "Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this."
    ),
});

export const getMediaItems20Header = zod.object({
  "Api-Key": zod
    .string()
    .optional()
    .describe(
      "API key specified through configuration to authorize access to the API."
    ),
});

export const getMediaItems20ResponseItem = zod.object({
  id: zod.string().uuid(),
  name: zod.string(),
  mediaType: zod.string(),
  url: zod.string(),
  extension: zod.string().nullish(),
  width: zod.number().nullish(),
  height: zod.number().nullish(),
  bytes: zod.number().nullish(),
  properties: zod.record(zod.string(), zod.any().nullable()),
  focalPoint: zod
    .object({
      left: zod.number(),
      top: zod.number(),
    })
    .nullish(),
  crops: zod
    .array(
      zod.object({
        alias: zod.string().nullish(),
        width: zod.number(),
        height: zod.number(),
        coordinates: zod
          .object({
            x1: zod.number(),
            y1: zod.number(),
            x2: zod.number(),
            y2: zod.number(),
          })
          .nullish(),
      })
    )
    .nullish(),
  path: zod.string(),
  createDate: zod.string().datetime({}),
  updateDate: zod.string().datetime({}),
});
export const getMediaItems20Response = zod.array(getMediaItems20ResponseItem);
